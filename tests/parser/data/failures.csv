"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, REORGANIZE PARTITION p3 INTO
(PARTITION p31 VALUES LESS THAN (2003), PARTITION p32 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, REORGANIZE PARTITION p31, p32 INTO (PARTITION p3 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, REBUILD PARTITION p1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = EXCLUSIVE, REBUILD PARTITION p2"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = SHARED, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = SHARED, COALESCE PARTITION 1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = EXCLUSIVE, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = EXCLUSIVE, COALESCE PARTITION 1"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = NONE, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = NONE, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, REORGANIZE PARTITION p3 INTO
(PARTITION p31 VALUES LESS THAN (2003), PARTITION p32 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, REORGANIZE PARTITION p31, p32 INTO (PARTITION p3 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, REBUILD PARTITION p1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, REBUILD PARTITION p2"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = SHARED, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = SHARED, COALESCE PARTITION 1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, COALESCE PARTITION 1"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = NONE, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = NONE, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, EXCHANGE PARTITION p0 WITH TABLE t"
reap
"CHANGE REPLICATION SOURCE TO
SOURCE_USER=     'plug_user',
SOURCE_PASSWORD= 'plug_user',
SOURCE_RETRY_COUNT= 0"
disable_query_log
"SELECT 1 FROM t1 WHERE a = ANY (SELECT a FROM t2)"
send
REAP
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"" USING latin1)"
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"", CHAR)"
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"", CHAR(4))"
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"", BINARY(4))"
"select CAST(TIMESTAMP ""2004-01-22 21:45:33"" AS BINARY(4))"
"SELECT CAST(1/3 AS FLOAT(10)), CAST(1/3 AS FLOAT(53))"
"CREATE VIEW v1 AS SELECT CAST(1/3 AS REAL), CAST(1/3 AS FLOAT(2)), CAST(1/3 AS FLOAT(50))"
"CREATE PROCEDURE p_flush_status()
BEGIN
DECLARE x INT DEFAULT 3000"
"CREATE TRIGGER t1_before_insert_trg BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
IF NEW.f1 = 1 THEN
-- Valid value case.
SET NEW.f2 = '2017-06-06 00:00:00';
ELSEIF NEW.f1 = 2 THEN
-- Check option failure case.
SET NEW.f2 = '2019-06-06 00:00:00';
ELSEIF NEW.f1 = 3 THEN
-- Check constraint failure case.
SET NEW.f2 = '2018-06-06 00:00:00';
END IF;
END;"
"CREATE TRIGGER t1_before_update_trg BEFORE UPDATE ON t1 FOR EACH ROW
BEGIN
IF OLD.f1 = 4 THEN
-- Valid value case.
SET NEW.f2 = '2017-06-06 00:00:00';
ELSEIF OLD.f1 = 5 THEN
-- Check option failure case.
SET NEW.f2 = '2019-06-06 00:00:00';
ELSEIF OLD.f1 = 6 THEN
-- Check constraint failure case.
SET NEW.f2 = '2018-06-06 00:00:00';
END IF;
END;"
"SELECT 1 /*!99999 /* */ */"
"SELECT 2 /*!12345 /* */ */"
"SELECT 3 /*! /* */ */"
"START TRANSACTION READ ONLY, WITH CONSISTENT SNAPSHOT"
"START TRANSACTION READ WRITE, WITH CONSISTENT SNAPSHOT"
"START TRANSACTION WITH CONSISTENT SNAPSHOT, READ ONLY"
"START TRANSACTION WITH CONSISTENT SNAPSHOT, READ WRITE"
"SET TRANSACTION READ ONLY, ISOLATION LEVEL READ COMMITTED"
"SET TRANSACTION READ WRITE, ISOLATION LEVEL READ COMMITTED"
"SET SESSION TRANSACTION READ ONLY, ISOLATION LEVEL REPEATABLE READ"
"CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY,
ISOLATION LEVEL SERIALIZABLE"
"SET SESSION TRANSACTION READ WRITE, ISOLATION LEVEL REPEATABLE READ"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = 8 + 8"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = @gizmo"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = @@global.max_connections"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = DAYOFMONTH('1972-07-29')"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = CAST(RAND() * 10 AS SIGNED)"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = 1024 * 1024 * 1024 * 1024"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = -100"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = ON"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = ""ON"""
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = OFF"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = ""OFF"""
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = gizmo"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = 1"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = 11"
"INSTALL COMPONENT ""file://component_validate_password""
SET GLOBAL validate_password.length = 16"
"INSTALL COMPONENT ""file://component_validate_password""
SET validate_password.length = 16, PERSIST validate_password.number_count = 13"
"INSTALL COMPONENT ""file://component_validate_password""
SET validate_password.length = 16"
"INSTALL COMPONENT ""file://component_validate_password""
SET GLOBAL validate_password.length = 60, validate_password.number_count = 50"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = 12"
"select 1ea10.1a20,1e+ 1e+10 from 1ea10"
"create function f1() returns int
begin
declare res int"
"return res"
"end|
create table t1 as select 1"
"CREATE TRIGGER f BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
INSERT INTO t1 ( `int` ) VALUES (4 ),( 8 ),( 2 ) "
"|


DROP TABLE t1"
"CREATE PROCEDURE IF NOT EXISTS sp1() BEGIN END"
"CREATE FUNCTION IF NOT EXISTS sf1() RETURNS INT DETERMINISTIC return 0"
"CREATE FUNCTION IF NOT EXISTS abs() RETURNS INT DETERMINISTIC return 0"
"CREATE FUNCTION IF NOT EXISTS metaphon() RETURNS INT DETERMINISTIC return 0"
"CREATE TRIGGER IF NOT EXISTS trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN END"
"CREATE TABLE t1 (f1 INT) START TRANSACTION"
"CREATE PROCEDURE proc1()
BEGIN
CREATE TABLE t1 (f1 INT) START TRANSACTION;
ROLLBACK;
CREATE TABLE t1 (f1 INT) START TRANSACTION;
COMMIT;
END"
"SELECT MAX(k COLLATE latin1_german2_ci)
FROM t1
WHERE
SELECT *
FROM t1
WHERE (_latin1'Mu""ller' COLLATE latin1_german2_ci) = k
HAVING
SELECT *
FROM t1
HAVING (_latin1'Mu""ller' COLLATE latin1_german2_ci) = k"
"CREATE TABLE t4 (s1 CHAR(50) CHARACTER SET latin1,
s2 CHAR(50) CHARACTER SET cp932,
d DECIMAL(10,2))|
CREATE PROCEDURE bug18293 (IN ins1 CHAR(50),
IN ins2 CHAR(50) CHARACTER SET cp932,
IN ind DECIMAL(10,2))
BEGIN
INSERT INTO t4 VALUES (ins1, ins2, ind)"
"END|
CALL bug18293(""Foo's a Bar"", _cp932 0xED40ED41ED42, 47.93)"
"ALTER DATABASE DEFAULT CHARACTER SET latin2"
" ¡¢£¤¥±º»¼½¾ 
05
15
25
35
4

SET NAMES gb18030"
"SELECT HEX('²@\') FROM DUAL;



CREATE TABLE t1 (a varchar(16)) character set sjis;
INSERT INTO t1 VALUES (0x8372835E),(0x8352835E);
SELECT hex(a), hex(lower(a)), hex(upper(a)) FROM t1 ORDER BY binary(a);
DROP TABLE t1;

SELECT QUOTE('\')"
"CREATE VIEW v1 AS SELECT 1 from t1
WHERE t1.b <=> (SELECT a FROM t1 WHERE a < SOME(SELECT '1'))"
"FLUSH TABLES mysql.events"
"CREATE TRIGGER tr1 AFTER DELETE ON t1 FOR EACH ROW
BEGIN
INSERT INTO t1 SELECT * FROM t1 AS A"
"select * from (select * from t1 intersect all select * from t1 order by a,b limit 2) a"
"select * from (select * from t1 except all select * from t1 limit 2) a"
"SELECT  table1.col_date_key AS field1
FROM
C AS table1
WHERE
(table1.col_int_key <=ANY
( SELECT SUBQUERY1_t1.col_int_key
FROM viewC AS SUBQUERY1_t1
WHERE SUBQUERY1_t1.col_varchar_10_key <= table1.col_varchar_10_key
)
)
"
"SELECT
/*+ SET_VAR(optimizer_switch = 'materialization=off,semijoin=off') */
* FROM t1 AS ta, lateral (select 1 WHERE ta.a IN (SELECT b FROM t2 AS tb                WHERE tb.b >= SOME(SELECT SUM(tc.a) as sg FROM t1 as tc                                   GROUP BY tc.b                                   HAVING ta.a=tc.b))) dt"
disable_result_log
enable_query_log
"EXPLAIN ((SELECT a FROM t ORDER BY 1 LIMIT 3) ORDER BY -a LIMIT 2) ORDER BY a"
"EXPLAIN
DELETE LOW_PRIORITY QUICK IGNORE
FROM t1 PARTITION (p1)
WHERE c1 > 0
ORDER BY c2
LIMIT 10"
"EXPLAIN FORMAT=TREE SELECT * FROM ( SELECT * FROM t1 LIMIT 2 OFFSET 1 ) AS alias1
WHERE f1 <= ANY ( SELECT f1 FROM t1 ) ORDER BY f1"
"EXPLAIN FORMAT=tree SELECT a FROM t1 WHERE a = ANY ( SELECT a FROM t1 WHERE b = 2 )"
"EXPLAIN FORMAT=tree SELECT a FROM t1 WHERE a = ANY ( SELECT MAX(a) FROM t1 WHERE b = 2 )"
echo
"FLUSH LOCAL TABLES test.t1, test.t2 for ExPoRt"
"FLUSH TABLE db1.t1 FOR EXPORT"
"FLUSH LOCAL TABLES test.t1 FOR EXPORT"
"create table t1 (
a int not null,
b int not null references t2 (c),
primary key (a,b),
foreign key (a,b) references t3 (c,d) on delete no action
on update no action,
foreign key (a,b) references t3 (c,d) on update cascade,
foreign key (a,b) references t3 (c,d) on delete set default,
foreign key (a,b) references t3 (c,d) on update set null) engine=myisam"
"SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE 'UTC' AS DATETIME)"
"SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE '+00:00' AS DATETIME)"
"SELECT cast(TIMESTAMP'2019-10-10 10:11:12+00:00' AT TIME ZONE '+00:00' AS DATETIME)"
"SELECT cast( a AT TIME ZONE '+00:00' AS DATETIME ) FROM t1"
enable_result_log
"UPDATE IGNORE e1 AS outr1, b1 AS outr2 SET outr1.col_date =
JSON_SET(outr1.col_date, CONCAT('$','[',1,']','.','cdate'), '2007-07-12')
WHERE outr1.pk <= ANY ( SELECT DISTINCT innr1.col_int_key AS y FROM bb4
AS innr2 LEFT JOIN bb4 AS innr1 ON (innr2.col_int_key <> innr1.col_int_key)
WHERE innr1.col_int_key= 4)"
exit
"select 1 from t1 where 1 < some (select cast(a as datetime) from t1)"
"select hex(weight_string('aa' as binary(3)))"
"SELECT HEX(WEIGHT_STRING('ab' AS BINARY(1000000)))"
"CREATE VIEW v5 AS SELECT WEIGHT_STRING(a AS BINARY(2)) AS b FROM t1"
"CREATE VIEW v6 AS SELECT WEIGHT_STRING(a AS BINARY(6)) AS b FROM t1"
"SELECT HEX(WEIGHT_STRING(a AS BINARY(2))) FROM t1"
"SELECT HEX(WEIGHT_STRING(a AS BINARY(6))) FROM t1"
"CREATE PROCEDURE run_show_and_i_s_stmts() BEGIN
SHOW CREATE TABLE t1;
SHOW COLUMNS FROM t1;
SHOW EXTENDED COLUMNS FROM t1;
SHOW KEYS FROM t1;

-- I_S.TABLES
SELECT TABLE_NAME, AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME='t1';
-- I_S.COLUMNS
SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, EXTRA
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='t1' ORDER BY ORDINAL_POSITION;
-- I_S.COLUMN_EXTENSIONS
SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS_EXTENSIONS
WHERE TABLE_NAME='t1' ORDER BY COLUMN_NAME;
-- I_S.STATISTICS
SELECT INDEX_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.STATISTICS
WHERE TABLE_NAME='t1' ORDER BY INDEX_NAME, COLUMN_NAME;
-- I_S.KEY_COLUMN_USAGE
SELECT CONSTRAINT_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_NAME='t1'
ORDER BY CONSTRAINT_NAME, COLUMN_NAME;
-- I_S.TABLE_CONSTRAINTS
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, ENFORCED
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME='t1'
ORDER BY CONSTRAINT_NAME;
-- I_S.TABLE_CONSTRAINTS_EXTENSIONS
SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS_EXTENSIONS
WHERE TABLE_NAME='t1' ORDER BY CONSTRAINT_NAME;
END;
"
"DO ST_ASTEXT(ST_UNION(ST_GEOMFROMTEXT('POLYGON((525000 183300,525400
183300,525400 18370, 525000 183700,525000 183300))'),
ST_GeomFromText('POLYGON((525298.67 183511.53,525296.57
183510.39,525296.42 183510.31,525289.11 183506.62,525283.17
183503.47,525280.98 183502.26,525278.63 183500.97,525278.39
183500.84,525276.79 183500,525260.7 183491.55,525263.95
183484.75,525265.58 183481.95,525278.97 183488.73,525276.5
183493.45,525275.5 183495.7,525280.35 183498.2,525282.3
183499.1,525282.2 183499.3,525283.55 183500,525301.75
183509.35,525304.45 183504.25,525307.85 183504.95,525304.5
183510.83,525302.81 183513.8,525298.67 183511.53),(525275.06
183489.89,525272.06 183488.37,525268.94 183494.51,525271.94
183496.03,525275.06 183489.89),(525263.26 183491.55,525266.15
183493.04,525269.88 183485.82,525266.99 183484.33,525263.26
183491.55))'))) st_u"
"DO ST_AsText(@centroid_point) as centroid"
"DO MBRWITHIN(@centroid_point, ST_INTERSECTION(ST_GEOMFROMTEXT('MULTILINESTRING((541 -927,-414 316,-429 -444,212 260,-125 104,445 563,-713 -975,-976 514),(-830 882,-377 914,-915 919,-535 -23,-508 979),(806 347,-87 220,226 -22,-12 468,707 598,83 951,-592 701,833 964,270 -932,743 -514,231 469,-575 -122,-99 -245,416 465,801 -587))'), ST_GEOMFROMTEXT('LINESTRING(-96 -182,-373 75,697 687,-881 -463,-557 -959,-493 810)'))) as result"
"DO ST_ASTEXT(ST_UNION(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((4 -10,-3 0,-5 6,9 9,5 7,9 -6,9 -10,7 9,0 -4,-6 10,0 -3,9 3, 4 -10)),
GEOMETRYCOLLECTION(),
GEOMETRYCOLLECTION(MULTIPOLYGON(((-8 0,-2 -6,-10 -9,-9 7,-2 -10,7 -9,3 -6,-5 -8,-10 -7,-6 10,4 -10,-7 -8,6 -1, -8 0)),((-4 -3,7 -10,-4 -1,-10 -3,3 -3,-10 -4,-1 2,-2 -10,6 -7,-9 -8, -4 -3))),
POINT(5 0),
MULTIPOINT(-3 0,-4 -8,-3 -4,10 4,0 7,-7 2,4 -8,1 -6),
MULTILINESTRING((-10 10,-10 5,9 -9,2 2,-7 2,0 -3,2 3,-6 -4,0 -2),(5 -9,0 -9,6 -4,1 -4,-1 6,2 -9,5 -7,8 10)),
MULTILINESTRING((-10 10,-10 5,9 -9,2 2,-7 2,0 -3,2 3,-6 -4,0 -2),(5 -9,0 -9,6 -4,1 -4,-1 6,2 -9,5 -7,8 10)),
LINESTRING(10 5,-4 7,-5 -8,-4 4,-4 6,-5 9,-1 6,0 -5)),
GEOMETRYCOLLECTION(MULTILINESTRING((-8 5,9 -10,-9 9,-9 4,3 -2,4 -6),(3 -10,3 8,-10 4,6 -3,8 -2,3 3,4 -7,-8 6,-3 2,5 3,0 10,2 4,1 -5,-6 1),(10 3,-4 2,4 -4,3 -1,-8 0,-7 -2,10 9,-5 5,-3 6),(0 3,3 7,0 2,4 -1,8 8,-10 -4,2 7,-4 5)),
POINT(2 -1),
MULTIPOLYGON(((-10 8,1 -4,0 -8,9 2,-8 -6,-3 -7,-10 -1,-10 -9,10 -3, -10 8)),((-6 7,-1 3,2 8,10 -6,-8 4,-9 -10,-8 -8,-2 -1,-9 7,6 -9,5 1,-1 -6, -6 7)),((8 9,0 1,-5 -8,0 8,-3 -6,-9 -2,9 -6,-5 5,-1 -3,-8 2,2 -9,5 -5,7 -7,-9 3,0 -3, 8 9)),((1 -4,-7 -10,10 10,5 3,8 -9,-6 5,2 2,-5 5,-1 5, 1 -4))),
MULTIPOLYGON(((-10 8,1 -4,0 -8,9 2,-8 -6,-3 -7,-10 -1,-10 -9,10 -3, -10 8)),((-6 7,-1 3,2 8,10 -6,-8 4,-9 -10,-8 -8,-2 -1,-9 7,6 -9,5 1,-1 -6, -6 7)),((8 9,0 1,-5 -8,0 8,-3 -6,-9 -2,9 -6,-5 5,-1 -3,-8 2,2 -9,5 -5,7 -7,-9 3,0 -3, 8 9)),((1 -4,-7 -10,10 10,5 3,8 -9,-6 5,2 2,-5 5,-1 5, 1 -4)))),
MULTIPOLYGON(((8 0,7 -6,7 -2,-7 -9,-3 10,-4 -3,3 -10, 8 0)),((7 3,7 6,1 8,4 6,-8 -7,-6 -7,9 -4,-1 3,-7 10, 7 3)),((3 -6,5 4,-3 -6,-5 1,-6 0,0 0,0 -7,-2 -10,-4 8,9 9,4 6, 3 -6)),((7 -7,3 4,-5 0, 7 -7)),((4 -9,-2 -9,-2 10, 4 -9))),
POLYGON((-3 -6,-3 0,3 -10,3 10,1 -4,-6 -10,8 -5,-9 -8,2 -4,9 10,1 -3, -3 -6)),
POLYGON((2 -5,0 -2,-3 9,0 4,6 -6,5 -4,-4 2,-6 6,3 -4,1 0,-10 -7,1 6,-7 2, 2 -5)),
MULTIPOINT(7 8,-6 -3,-1 -7,0 7,-2 1,-8 -8))'),
ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()'))) as result"
"DO ST_ASTEXT(ST_UNION(ST_INTERSECTION(ST_GEOMFROMTEXT('MULTIPOINT(7 2,-4 -5,6 -9,-7 3,-10 5,8 -6,0 -10,10 -4,8 -10,2 6,8 -4,-8 2,-4 2)'),
ST_GEOMFROMTEXT('MULTIPOLYGON(((6 2,1 1,-4 5,1 4,-3 -4,-7 9,-10 2,-6 1,10 -7,0 1,9 4, 6 2)))')),
ST_UNION(ST_GEOMFROMTEXT('LINESTRING(-1 -5,0 -6,4 6,3 3,2 8,-2 6,-4 5,6 -7,-1 -1,-8 6,4 -2)'),
ST_GEOMFROMTEXT('MULTIPOLYGON(((5 -4,-5 -9,-1 -6,-3 0,5 -2, 5 -4)),((-5 -10,-8 -2,-3 7,1 5,5 -10,1 -5,0 10,3 2,1 1, -5 -10)),((4 -2,6 3,7 5,1 2,8 -9,-10 -5,7 -10,-2 -9,-2 0,2 -8,-8 3,5 0, 4 -2)),((6 -4,0 4,-8 -2,10 -10,-6 5, 6 -4)))')))) as result"
"CREATE TABLE lakes (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
shore POLYGON)"
"CREATE TABLE road_segments (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
aliases CHARACTER VARYING(64),
num_lanes INTEGER,
centerline LINESTRING)"
"CREATE TABLE divided_routes (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
num_lanes INTEGER,
centerlines MULTILINESTRING)"
"CREATE TABLE forests (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
boundary MULTIPOLYGON)"
"CREATE TABLE bridges (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
position POINT)"
"CREATE TABLE streams (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
centerline LINESTRING)"
"CREATE TABLE buildings (
fid INTEGER NOT NULL PRIMARY KEY,
address CHARACTER VARYING(64),
position POINT,
footprint POLYGON)"
"CREATE TABLE ponds (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
type CHARACTER VARYING(64),
shores MULTIPOLYGON)"
"CREATE TABLE named_places (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
boundary POLYGON)"
"CREATE TABLE t1 (g GEOMCOLLECTION)"
"create user mysqltest_7@"
"alter user mysqltest_7@ identified by 'systpass'"
"show grants for mysqltest_7@"
"drop user mysqltest_7@"
"grant select on mysqltest.* to mysqltest_8@"
"show grants for mysqltest_8@"
"CREATE TEMPORARY TABLE t6(a INT) ENGINE = MERGE UNION = ()"
"ALTER TABLE t6 UNION = ()"
"ALTER TABLE mysqltest_db2.t2_2 UNION = ()"
"flush table mysqltest_db1.t1"
"ALTER USER user() IDENTIFIED BY 'abc'"
"ALTER USER USER() IDENTIFIED BY 'abc'"
"ALTER USER USER() IDENTIFIED BY 'new_pwd_string'"
"ALTER USER USER() IDENTIFIED BY 'new-auth'"
"SHOW GRANTS FOR u1@localhost USING r1"
"ALTER USER u1@localhost DEFAULT ROLE r1"
"SHOW GRANTS FOR u1 using r1"
"SHOW GRANTS FOR u1 using r2"
enable_connect_log
disable_connect_log
"insert into t2 select
x3.a,  -- 3
concat('val-', x3.a + 3*x4.a), -- 12
concat('val-', @a:=x3.a + 3*x4.a + 12*C.a), -- 120
concat('val-', @a + 120*D.a)
from t1 x3, t1 x4, t1 C, t1 D where x3.a < 3 and x4.a < 4 and D.a < 4
order by x3.a, x4.a, C.a, D.a"
"EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY)
IGNORE INDEX FOR GROUP BY (i2) GROUP BY a"
"EXPLAIN SELECT a FROM t1 IGNORE INDEX (PRIMARY) IGNORE INDEX FOR ORDER BY (i2)"
"EXPLAIN SELECT a FROM t1 USE INDEX () USE INDEX (i2)"
"EXPLAIN SELECT a FROM t1 USE INDEX (i2) USE INDEX ()"
"EXPLAIN SELECT a FROM t1 USE INDEX FOR JOIN (i2)
USE INDEX FOR GROUP BY (i2) GROUP BY a"
"EXPLAIN SELECT a FROM t1 FORCE INDEX FOR JOIN (i2)
FORCE INDEX FOR GROUP BY (i2) GROUP BY a"
"EXPLAIN SELECT a FROM t1 USE INDEX () IGNORE INDEX (i2)"
"EXPLAIN SELECT a FROM t1 IGNORE INDEX (i2) USE INDEX ()"
"EXPLAIN SELECT a FROM t1
USE INDEX FOR GROUP BY (i2)
USE INDEX FOR ORDER BY (i2)
USE INDEX FOR JOIN (i2)"
"EXPLAIN SELECT a FROM t1
USE INDEX FOR JOIN (i2)
USE INDEX FOR JOIN (i2)
USE INDEX FOR JOIN (i2,i2)"
"EXPLAIN SELECT 1 FROM t1 WHERE a IN
(SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2))"
"EXPLAIN SELECT 1 FROM t2 WHERE a IN
(SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2))"
"SELECT EMPNUM, GRADE*1000
FROM HU.STAFF WHERE GRADE * 1000 >
ANY (SELECT SUM(BUDGET) FROM HU.PROJ
GROUP BY CITY, PTYPE
HAVING HU.PROJ.CITY = HU.STAFF.CITY)"
"GRANT some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890 TO root@localhost"
"GRANT u1@localhost TO some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890"
"CREATE TABLE t1 (f1 INTEGER, b INTEGER AS ((1)) INVISIBLE, KEY k1(b))"
enable_info
disable_info
"SELECT *
FROM t1
NATURAL JOIN (
SELECT t2.*
FROM t1 AS t2 JOIN t1 AS t3 ON t3.c1 = t2.c1
WHERE t2.c3 <> ANY (SELECT c3 FROM t1)
) AS d1"
"SELECT MIN(t3.f1)
FROM (t2 JOIN (t3 JOIN (SELECT t1.*
FROM t1
WHERE t1.f2 < t1.f2) AS dt
ON (dt.f1 = t3.f1))
ON (dt.f2 = t3.f2))
WHERE (dt.f2 <> ANY (SELECT t1.f1 FROM t1 WHERE t1.f2 = dt.f2))"
disable_reconnect
enable_reconnect
"SELECT 1 FROM DUAL LIMIT 1 FOR UPDATE INTO @var"
"SELECT 1 UNION SELECT 1 FOR UPDATE INTO @var"
disable_warnings
"log_sink_test"";

disable_warnings;
SET @@global.dragnet.log_error_filter_rules= @rules;
SET @@global.log_error_services=""log_filter_dragnet"
"SELECT ""Too long: â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââA7UÎ·)R|5æªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼AZ0UÎ»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£â¼Î»â®Î³Î¶ââ¤âââæªç£"""
"FLUSH TABLE mysql.general_log"
"FLUSH TABLE mysql.slow_log"
"CREATE TABLE m1(a INT) ENGINE=MERGE UNION=()"
"ALTER TABLE m1 UNION=()"
"FLUSH TABLE mysql_db1.t1"
enable_warnings
"CREATE TABLE x3 (c0 BLOB AS ('a') VIRTUAL INVISIBLE, c1 INT)"
"CREATE TABLE x4 (c1 INT, c0 BLOB AS ('a') VIRTUAL INVISIBLE)"
"CREATE TABLE x7 (c0 BLOB AS ('a') STORED INVISIBLE, c1 INT)"
"CREATE TABLE x8 (c1 INT, c0 BLOB AS ('a') STORED INVISIBLE)"
"CREATE TABLE t1(f1 INT INVISIBLE, f2 INT,
f3 INT AS (f1 + 10), f4 INT AS (f2 + 10) INVISIBLE)"
"CREATE TABLE B32340208.test (
`pk` int NOT NULL AUTO_INCREMENT,
`a1` smallint GENERATED ALWAYS AS (((0 <> `c1`) and (_utf8mb4'0000-00-00
00:00:00' <> `d1`))) VIRTUAL NOT SECONDARY,
`b1` char(8) DEFAULT NULL,
`c1` longblob NOT NULL NOT SECONDARY,
`d1` timestamp NOT NULL,
PRIMARY KEY (`pk`),
KEY `functional_index` ((radians(`c1`))) USING BTREE COMMENT 'you''re'
) ENGINE=InnoDB DEFAULT CHARSET=euckr"
"print ""val is $val\n"""
"UNTIL
}
inc $ifval"
sorted_result
lowercase_result
"EOF
}

if(0) {
--perl
# False block
print ""False block\n"""
"EOF
}

while($i) {
--dec $i
if (!$i) {
--perl
print ""Hello\n"""
"EOF
}
}


SELECT 100 + /* Shouldn't fail */ 1 AS result;
SELECT 100 /* Shouldn't fail */ + 1 AS result"
$my_stmt
"SELECT 1 WHERE 1 =
ANY (SELECT GROUPING(a) FROM t1 GROUP BY a WITH ROLLUP)"
"create procedure p1()
select COUNT(*)
FROM v1 WHERE f1 IN
(SELECT f1 FROM t2 WHERE f1 = ANY (SELECT f1 FROM v1))"
"((SELECT 1 FROM t1 ORDER BY 1) ORDER BY 1) ORDER BY 1"
"((SELECT 1 FROM t1 LIMIT 1) LIMIT 1) LIMIT 1"
"( (SELECT 1 UNION SELECT 1 ) UNION SELECT 1 ) UNION SELECT 1"
"((SELECT 1 FROM t1)  UNION   SELECT 2 FROM t1)"
"(((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1)"
"((((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1))"
"((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1))"
"(((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1)))"
"((((SELECT 1 FROM t1)) UNION  (SELECT 2 FROM t1)))"
"(((SELECT 1 FROM t1)  UNION ((SELECT 2 FROM t1))))"
"((((SELECT 1 FROM t1)) UNION ((SELECT 2 FROM t1))))"
"((SELECT 1) ORDER BY 1)"
"((SELECT 1) LIMIT 1)"
"SELECT * FROM   ((SELECT 1 FROM t1)  UNION   SELECT 2 FROM t1) dt"
"SELECT * FROM  (((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1) dt"
"SELECT * FROM ((((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1)) dt"
"SELECT * FROM   ((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1)) dt"
"SELECT * FROM  (((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1))) dt"
"SELECT * FROM ((((SELECT 1 FROM t1)) UNION  (SELECT 2 FROM t1))) dt"
"SELECT * FROM  (((SELECT 1 FROM t1)  UNION ((SELECT 2 FROM t1)))) dt"
"SELECT * FROM ((((SELECT 1 FROM t1)) UNION ((SELECT 2 FROM t1)))) dt"
"SELECT 1 FROM ((SELECT 2) ORDER BY 1) AS res"
"SELECT 1 FROM ((SELECT 2) LIMIT 1) AS res"
"((SELECT 1 UNION SELECT 1) UNION SELECT 1)"
"SELECT * FROM ((SELECT 1 UNION SELECT 1) UNION SELECT 1) a"
"((SELECT 1) UNION (SELECT 1 INTO @v FROM t1))"
"((SELECT 1) UNION (SELECT 2 INTO OUTFILE 'parser.test.file5'))"
"EXPLAIN ((SELECT * FROM t3 ORDER BY a LIMIT 3)
ORDER BY b DESC LIMIT 2)
ORDER BY c LIMIT 1"
"SELECT 'a%' LIKE 'a!%' ESCAPE '!', 'a%' LIKE 'a!' || '%' ESCAPE '!'"
"SELECT 'a%' NOT LIKE 'a!%' ESCAPE '!', 'a%' NOT LIKE 'a!' || '%' ESCAPE '!'"
"SELECT 'a%' LIKE 'a!%' ESCAPE '$', 'a%' LIKE 'a!' || '%' ESCAPE '$'"
"SELECT 'a%' NOT LIKE 'a!%' ESCAPE '$', 'a%' NOT LIKE 'a!' || '%' ESCAPE '$'"
"SELECT 1 UNION SELECT 1 FROM DUAL FOR UPDATE INTO @var"
"(SELECT 1 UNION SELECT 1 FROM DUAL FOR UPDATE INTO @var)"
"WITH cte AS (SELECT 0 /*! ) */ SELECT * FROM cte a, cte b"
"WITH cte AS /*! ( */ SELECT 0) SELECT * FROM cte a, cte b"
"(SELECT 1) LIMIT 1 INTO @var"
"(SELECT 2 AS c) ORDER BY c INTO @var"
"(SELECT 3 AS c) ORDER BY c LIMIT 1 INTO @var"
"SELECT cast( NULL AT TIME ZONE 'UTC' AS DATETIME )"
"((SELECT * FROM t1 ORDER BY i) ORDER BY i) ORDER BY i"
"ALTER TABLE t1 DROP PARTITION p0"
"ALTER TABLE t1 DROP PARTITION p1"
"DELETE FROM t1 PARTITION(subp1) WHERE b = ""REPLACEd by REPLACE"""
"DELETE FROM t1 PARTITION (pNeg) WHERE a = -1"
"DELETE FROM t1 PARTITION (subp1) WHERE b like '%subp1%'"
"DELETE FROM t1 PARTITION (subp1) WHERE b = 'p0-9:subp3'"
"DELETE FROM t1 PARTITION (`p0-9`) WHERE b = 'p0-9:subp3'"
"DELETE FROM t1 PARTITION (subp3)"
"DELETE FROM t1 PARTITION (`p0-29`)"
"DELETE FROM t1 PARTITION (p2)"
"alter table t1 drop partition p2"
SEND
"DELETE FROM t1 PARTITION (p0)
WHERE a = (SELECT a + 2 FROM t2 WHERE a = 1)"
"EXPLAIN DELETE FROM t1 PARTITION (p0)
WHERE a = (SELECT a + 2 FROM t2 WHERE a = 1)"
"CREATE TABLE t1 (a INT)
/*!50100 PARTITION BY HASH (a)
/* Test
of multi-line
comment */
PARTITIONS 5 */"
"ALTER TABLE t1 DROP PARTITION x1"
"create table t9 (a date not null) partition by RANGE(TO_DAYS(a)) (
partition p0 values less than (732299), -- 2004-12-19
partition p1 values less than (732468), -- 2005-06-06
partition p2 values less than (732664)  -- 2005-12-19
)"
"alter table t1 drop partition p0"
"ALTER TABLE t1 DROP PARTITION p3"
"ALTER TABLE t1 DROP PARTITION p2"
"RESET PERSIST default.key_buffer_size"
"set @a= timestamp ""2001-01-02 10:11:12.345"""
"set @a=date ""2001-01-02"""
"set @a= time ""10:11:12.345"""
"set @a= time ""01:02:00"""
"set @a= timestamp ""2001-01-02 01:02:00"""
"set @a= date ""2001-01-02"""
"query_attributes a b"
"query_attributes a b c d"
"query_attributes 'a' ""b c"""
"query_attributes '' 'a'"
reset_connection
"EXPLAIN FORMAT = tree
(SELECT * FROM r UNION ALL SELECT * FROM s) INTERSECT ALL SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r UNION ALL SELECT * FROM s INTERSECT ALL SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT ALL SELECT * FROM s) INTERSECT ALL SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT ALL SELECT * FROM s INTERSECT ALL SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT ALL SELECT * FROM s) UNION ALL SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT ALL SELECT * FROM s UNION ALL SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r UNION DISTINCT SELECT * FROM s) INTERSECT DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r UNION DISTINCT SELECT * FROM s INTERSECT DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) INTERSECT DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s INTERSECT DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s UNION DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r UNION SELECT * FROM s) INTERSECT SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r UNION SELECT * FROM s INTERSECT SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT SELECT * FROM s) INTERSECT SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT SELECT * FROM s INTERSECT SELECT * FROM t"
"EXPLAIN FORMAT = tree
(SELECT * FROM r EXCEPT SELECT * FROM s) UNION SELECT * FROM t"
"EXPLAIN FORMAT = tree
SELECT * FROM r EXCEPT SELECT * FROM s UNION SELECT * FROM t"
"EXPLAIN SELECT * FROM r EXCEPT ALL SELECT * FROM s"
"EXPLAIN SELECT * FROM r INTERSECT ALL SELECT * FROM s"
"EXPLAIN SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s"
"EXPLAIN SELECT * FROM r INTERSECT DISTINCT SELECT * FROM s"
"EXPLAIN FORMAT = json SELECT * FROM r EXCEPT ALL SELECT * FROM s"
"EXPLAIN FORMAT = json SELECT * FROM r INTERSECT ALL SELECT * FROM s"
"EXPLAIN FORMAT = json SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s"
"EXPLAIN FORMAT = json SELECT * FROM r INTERSECT DISTINCT SELECT * FROM s"
"EXPLAIN FORMAT=json SELECT * FROM (SELECT 1 INTERSECT SELECT 2) AS dt"
"EXPLAIN FORMAT=json SELECT * FROM (SELECT 1 EXCEPT SELECT 2) AS dt"
"EXPLAIN (SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT SELECT * FROM t"
"EXPLAIN (SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT
(SELECT * FROM t INTERSECT DISTINCT SELECT * FROM t)"
"EXPLAIN FORMAT = json
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT SELECT * FROM t"
"EXPLAIN FORMAT = json
(SELECT * FROM r EXCEPT DISTINCT SELECT * FROM s) UNION DISTINCT
(SELECT * FROM t INTERSECT DISTINCT SELECT * FROM t)"
"WITH RECURSIVE qn AS
( SELECT * FROM t INTERSECT
VALUES ROW(1, 1, 1) UNION ALL
SELECT 1+n, unp1, un+unp1 FROM qn WHERE n<10)
SELECT * FROM qn"
"WITH RECURSIVE cte AS
( ( (SELECT 1 AS n UNION SELECT 2) EXCEPT SELECT 2)  UNION ALL
SELECT n+1  FROM cte WHERE n<100)
SELECT n FROM cte LIMIT 10"
"SELECT * FROM t1 INTERSECT DISTINCT SELECT * FROM t2"
"SELECT * FROM t2 INTERSECT DISTINCT SELECT * FROM t1"
"SELECT * FROM t1 INTERSECT ALL SELECT * FROM t2 INTERSECT ALL SELECT * FROM t3"
"SELECT * FROM t2 INTERSECT ALL SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3"
"SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3 INTERSECT ALL SELECT * FROM t2"
"SELECT * FROM t3 INTERSECT ALL SELECT * FROM t1 INTERSECT ALL SELECT * FROM t2"
"SELECT * FROM t2 INTERSECT ALL SELECT * FROM t3 INTERSECT ALL SELECT * FROM t1"
"SELECT * FROM t3 INTERSECT ALL SELECT * FROM t2 INTERSECT ALL SELECT * FROM t1"
"SELECT * FROM t1 INTERSECT DISTINCT SELECT * FROM t2 INTERSECT ALL SELECT * FROM t3"
"SELECT * FROM t2 INTERSECT DISTINCT SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3"
"SELECT * FROM t1 INTERSECT DISTINCT SELECT * FROM t3 INTERSECT ALL SELECT * FROM t2"
"SELECT * FROM t3 INTERSECT DISTINCT SELECT * FROM t1 INTERSECT ALL SELECT * FROM t2"
"SELECT * FROM t2 INTERSECT DISTINCT SELECT * FROM t3 INTERSECT ALL SELECT * FROM t1"
"SELECT * FROM t3 INTERSECT DISTINCT SELECT * FROM t2 INTERSECT ALL SELECT * FROM t1"
"SELECT * FROM t1 INTERSECT ALL SELECT * FROM t2 INTERSECT DISTINCT SELECT * FROM t3"
"SELECT * FROM t2 INTERSECT ALL SELECT * FROM t1 INTERSECT DISTINCT SELECT * FROM t3"
"SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3 INTERSECT DISTINCT SELECT * FROM t2"
"SELECT * FROM t3 INTERSECT ALL SELECT * FROM t1 INTERSECT DISTINCT SELECT * FROM t2"
"SELECT * FROM t2 INTERSECT ALL SELECT * FROM t3 INTERSECT DISTINCT SELECT * FROM t1"
"SELECT * FROM t3 INTERSECT ALL SELECT * FROM t2 INTERSECT DISTINCT SELECT * FROM t1"
"SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t3"
"SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t3"
"SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t2"
"SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t2"
"SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t1"
"SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t1"
"SELECT * FROM t1 EXCEPT    DISTINCT SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t3"
"SELECT * FROM t2 EXCEPT    DISTINCT SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t3"
"SELECT * FROM t1 EXCEPT    DISTINCT SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t2"
"SELECT * FROM t3 EXCEPT    DISTINCT SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t2"
"SELECT * FROM t2 EXCEPT    DISTINCT SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t1"
"SELECT * FROM t3 EXCEPT    DISTINCT SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t1"
"SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t2 EXCEPT    DISTINCT SELECT * FROM t3"
"SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t1 EXCEPT    DISTINCT SELECT * FROM t3"
"SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t3 EXCEPT    DISTINCT SELECT * FROM t2"
"SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t1 EXCEPT    DISTINCT SELECT * FROM t2"
"SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t3 EXCEPT    DISTINCT SELECT * FROM t1"
"SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t2 EXCEPT    DISTINCT SELECT * FROM t1"
"SELECT * FROM t1 INTERSECT ALL SELECT * FROM t2"
"SELECT * FROM t2 INTERSECT ALL SELECT * FROM t1"
"SELECT * FROM t1 INTERSECT ALL SELECT * FROM t3"
"SELECT * FROM t3 INTERSECT ALL SELECT * FROM t1"
"SELECT * FROM t2 INTERSECT ALL SELECT * FROM t3"
"SELECT * FROM t3 INTERSECT ALL SELECT * FROM t2"
"SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t2"
"SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t1"
"SELECT * FROM t1 EXCEPT    ALL SELECT * FROM t3"
"SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t1"
"SELECT * FROM t2 EXCEPT    ALL SELECT * FROM t3"
"SELECT * FROM t3 EXCEPT    ALL SELECT * FROM t2"
"CREATE TABLE t1 AS SELECT 1 AS c1, 1 AS c2 INTERSECT SELECT 2,2"
"CREATE TABLE t2 AS SELECT 1 AS c1, 1 AS c2 INTERSECT SELECT null, null"
"CREATE TABLE t3 AS SELECT null AS c1, null AS c2 INTERSECT SELECT 2,2"
"CREATE TABLE t4 AS SELECT null AS c1, null AS c2 INTERSECT SELECT null, null"
"CREATE TABLE t1 AS SELECT 1 AS c1, 1 AS c2 EXCEPT SELECT 2,2"
"CREATE TABLE t2 AS SELECT 1 AS c1, 1 AS c2 EXCEPT SELECT null, null"
"CREATE TABLE t3 AS SELECT null AS c1, null AS c2 EXCEPT SELECT 2,2"
"CREATE TABLE t4 AS SELECT null AS c1, null AS c2 EXCEPT SELECT null, null"
"CREATE TABLE t1 AS SELECT 1 AS c1, 1 AS c2 EXCEPT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT null, null)"
"CREATE TABLE t2 AS SELECT 1 AS c1, 1 AS c2 EXCEPT
(SELECT null AS c1, null AS c2 UNION SELECT null, null)"
"CREATE TABLE t3 AS SELECT 1 AS c1, 1 AS c2 EXCEPT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT 2,2)"
"CREATE TABLE t1 AS SELECT null AS c1, null AS c2 EXCEPT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT null, null)"
"CREATE TABLE t2 AS SELECT null AS c1, null AS c2 EXCEPT
(SELECT null AS c1, null AS c2 UNION SELECT null, null)"
"CREATE TABLE t3 AS SELECT null AS c1, null AS c2 EXCEPT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT 2,2)"
"CREATE TABLE t1 AS SELECT 1 AS c1, 1 AS c2 INTERSECT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT null, null)"
"CREATE TABLE t2 AS SELECT 1 AS c1, 1 AS c2 INTERSECT
(SELECT null AS c1, null AS c2 UNION SELECT null, null)"
"CREATE TABLE t3 AS SELECT 1 AS c1, 1 AS c2 INTERSECT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT 2,2)"
"CREATE TABLE t1 AS SELECT null AS c1, null AS c2 INTERSECT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT null, null)"
"CREATE TABLE t2 AS SELECT null AS c1, null AS c2 INTERSECT
(SELECT null AS c1, null AS c2 UNION SELECT null, null)"
"CREATE TABLE t3 AS SELECT null AS c1, null AS c2 INTERSECT
(SELECT 1 AS c1, 1 AS c2 UNION SELECT 2,2)"
"CREATE TABLE t1 AS SELECT 1 AS c1, 1 AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 INTERSECT SELECT null, null)"
"CREATE TABLE t2 AS SELECT 1 AS c1, 1 AS c2 UNION
(SELECT null AS c1, null AS c2 INTERSECT SELECT null, null)"
"CREATE TABLE t3 AS SELECT 1 AS c1, 1 AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 INTERSECT SELECT 2,2)"
"CREATE TABLE t1 AS SELECT null AS c1, null AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 INTERSECT SELECT null, null)"
"CREATE TABLE t2 AS SELECT null AS c1, null AS c2 UNION
(SELECT null AS c1, null AS c2 INTERSECT SELECT null, null)"
"CREATE TABLE t3 AS SELECT null AS c1, null AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 INTERSECT SELECT 2,2)"
"CREATE TABLE t1 AS SELECT 1 AS c1, 1 AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 EXCEPT SELECT null, null)"
"CREATE TABLE t2 AS SELECT 1 AS c1, 1 AS c2 UNION
(SELECT null AS c1, null AS c2 EXCEPT SELECT null, null)"
"CREATE TABLE t3 AS SELECT 1 AS c1, 1 AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 EXCEPT SELECT 2,2)"
"CREATE TABLE t1 AS SELECT null AS c1, null AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 EXCEPT SELECT null, null)"
"CREATE TABLE t2 AS SELECT null AS c1, null AS c2 UNION
(SELECT null AS c1, null AS c2 EXCEPT SELECT null, null)"
"CREATE TABLE t3 AS SELECT null AS c1, null AS c2 UNION
(SELECT 1 AS c1, 1 AS c2 EXCEPT SELECT 2,2)"
"CREATE TABLE t1 AS ((VALUES ROW (1, 1), ROW (2,2) ORDER BY column_0 LIMIT 2)
ORDER BY column_1 LIMIT 1)"
"CREATE TABLE t2 AS ((VALUES ROW (null, null), ROW (2,2)
ORDER BY column_0 LIMIT 2) ORDER BY column_1 LIMIT 1)"
"EXPLAIN FORMAT=tree
SELECT * FROM t1 INTERSECT (SELECT * FROM t1 ORDER BY 1 LIMIT 3)"
"EXPLAIN FORMAT=tree
SELECT * FROM t1 EXCEPT    (SELECT * FROM t1 ORDER BY 1 LIMIT 3)"
"ALTER USER u11 DEFAULT ROLE ALL"
"ALTER USER u1@localhost DEFAULT ROLE r1,r2"
"SHOW GRANTS FOR u2@localhost USING r1"
"ALTER USER u5 DEFAULT ROLE r2,r3"
"ALTER USER u2 DEFAULT ROLE r1, r2, r3"
"REVOKE ALL ON *.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE SELECT ON *.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE ALL PRIVILEGES, GRANT OPTION FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE PROXY ON u1 FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE r1 FROM unknown_user IGNORE UNKNOWN USER"
"GRANT CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE, CREATE ROLE, DROP ROLE ON *.* TO u2"
"REVOKE INSERT (i) ON wl14690.t FROM u1, u2 IGNORE UNKNOWN USER"
"REVOKE r1 FROM unknown_user, u2 IGNORE UNKNOWN USER"
"REVOKE SELECT, INSERT (i) ON wl14690.t FROM u1, u2, unknown_user IGNORE UNKNOWN USER"
"REVOKE TABLE_ENCRYPTION_ADMIN ON *.* FROM unknown_user, u2 IGNORE UNKNOWN USER"
"REVOKE IF EXISTS PROXY ON u3 FROM u1"
"REVOKE IF EXISTS PROXY ON u3 FROM r1"
"REVOKE IF EXISTS SELECT ON wl14690.* FROM u1"
"REVOKE IF EXISTS SELECT ON wl14690.* FROM r1"
"REVOKE IF EXISTS INSERT (i) ON wl14690.t FROM u4"
"REVOKE IF EXISTS INSERT (j) ON wl14690.t FROM u4"
"REVOKE IF EXISTS ENCRYPTION_KEY_ADMIN, APPLICATION_PASSWORD_ADMIN ON *.* FROM u4"
"REVOKE IF EXISTS role1 FROM u1"
"REVOKE IF EXISTS role1, r1 FROM u1"
"REVOKE IF EXISTS SELECT, INSERT, UPDATE ON *.* FROM u1"
"REVOKE IF EXISTS SELECT ON wl14690.* FROM u1, u2, u3"
"REVOKE IF EXISTS role1 FROM u1, u2"
"REVOKE IF EXISTS DELETE, SELECT ON wl14690.* FROM u1, u2, u3"
"REVOKE IF EXISTS DELETE, SELECT ON wl14690.* FROM r1"
"REVOKE IF EXISTS SYSTEM_VARIABLES_ADMIN,TABLE_ENCRYPTION_ADMIN,XA_RECOVER_ADMIN
ON *.* FROM u1,u2,u3,u4,r1"
"REVOKE IF EXISTS UPDATE, SELECT ON wl14690.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS PROXY ON u1 FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS INSERT (i) ON wl14690.t FROM u1, u2 IGNORE UNKNOWN USER"
"REVOKE IF EXISTS TABLE_ENCRYPTION_ADMIN,XA_RECOVER_ADMIN ON *.* FROM u1, u3
IGNORE UNKNOWN USER"
"REVOKE IF EXISTS DELETE, SELECT ON wl14690.* FROM u1, u2, u3
IGNORE UNKNOWN USER"
"REVOKE IF EXISTS SYSTEM_VARIABLES_ADMIN,CONNECTION_ADMIN,ENCRYPTION_KEY_ADMIN
ON *.* FROM u1, u2 IGNORE UNKNOWN USER"
"REVOKE IF EXISTS SELECT ON wl14690.t FROM u1, unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS DYNAMIC_PRIV1, DYNAMIC_PRIV2 ON wl14690.* FROM u1"
"REVOKE IF EXISTS DYNAMIC_PRIV1, DYNAMIC_PRIV2 ON wl14690.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS r1 FROM u1"
"REVOKE IF EXISTS r1 FROM r2"
"REVOKE IF EXISTS r1 FROM u1,u2,u3,r2"
"CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3'"
"SET PASSWORD = '' REPLACE ''"
"ALTER USER u1 IDENTIFIED BY '123' REPLACE '', u2 IDENTIFIED BY '456'
PASSWORD REQUIRE CURRENT OPTIONAL"
"ALTER USER u2 IDENTIFIED BY 'xyz', u1 IDENTIFIED BY 'abc' REPLACE '123'"
"ALTER USER plaintext_test IDENTIFIED BY '' REPLACE 'pwd'"
"SET PASSWORD='789' REPLACE '456'"
"ALTER USER test_user2 IDENTIFIED BY 'azundris2' REPLACE 'azundris2'"
"SET PASSWORD='azundris2' REPLACE 'azundris2'"
"CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3',
SOURCE_BIND = 'eth4n',
SOURCE_TLS_CIPHERSUITES = ''
FOR CHANNEL 'chan_jackie'"
"CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3',
SOURCE_CONNECT_RETRY = 1, SOURCE_HEARTBEAT_PERIOD = 1.01,
SOURCE_LOG_FILE = 'master_log_name', SOURCE_LOG_POS = 0,
SOURCE_SSL = 0, SOURCE_SSL_CA = 'ca_file_name',
SOURCE_SSL_CAPATH = 'ca_directory_name',
SOURCE_SSL_CERT = 'cert_file_name', SOURCE_SSL_KEY = 'key_file_name',
SOURCE_SSL_CIPHER = 'cipher_list', SOURCE_SSL_VERIFY_SERVER_CERT = 1,
SOURCE_SSL_CRL = 'crl_file_name', SOURCE_SSL_CRLPATH = 'crl_directory_name',
IGNORE_SERVER_IDS = (99,100), SOURCE_TLS_VERSION = 'TLSv1.2',
SOURCE_TLS_CIPHERSUITES = NULL,
SOURCE_BIND = 'eth4n', SOURCE_RETRY_COUNT = 7,
SOURCE_DELAY = 4711, SOURCE_AUTO_POSITION = 0 FOR CHANNEL 'chan_jackie'"
"SHOW GRANTS FOR CURRENT_USER() USING `admin-db1`"
"GRANT b30896461_test1@localhost TO b30896461_test2@localhost"
"SHOW GRANTS FOR u_worldrou@localhost USING r_worldrou"
"GRANT role1, `role2`@`host2`, role3 TO user1, user2, `user3`@`host3`"
"GRANT `engineering`@`US` TO `engineering`@`INDIA`"
"SHOW GRANTS FOR current_user() USING `engineering`@`%`,`role`@`%`"
"REVOKE role1, `role2`@`host2`, role3 FROM user1, user2, `user3`@`host3`"
"ALTER USER `joe`@`localhost` DEFAULT ROLE wp_administrators"
"ALTER USER CURRENT_USER() DEFAULT ROLE NONE"
"SHOW GRANTS FOR `joe`@`localhost` USING wp_administrators"
"SHOW GRANTS FOR `joe`@`localhost` USING engineering"
"SHOW GRANTS FOR sally USING engineering, consultants"
"SHOW GRANTS FOR sally USING consultants"
"SHOW GRANTS FOR sally USING engineering"
"SHOW GRANTS FOR current_user() USING `replication`"
"SHOW GRANTS FOR `joe`@`localhost` USING `replication`"
"ALTER USER `joe_schema_designer`@`localhost` DEFAULT ROLE `schema_designer`"
"SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'schema_designer'"
"SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'db_admin'"
"SHOW GRANTS FOR CURRENT_USER() USING `db_admin`"
"SHOW GRANTS FOR CURRENT_USER() USING db_admin"
"SHOW GRANTS FOR u1@`%` USING r1"
"ALTER USER u1@localhost DEFAULT ROLE ALL"
"ALTER USER u1@localhost DEFAULT ROLE NONE"
"GRANT CREATE ROLE, DROP ROLE ON *.* TO r1"
"GRANT r1@Vilhelmina TO u1@localhost"
"SHOW GRANTS FOR u1@localhost USING u1234567890123456789012345678901"
"ALTER USER r2 DEFAULT ROLE r1"
"ALTER USER baseuser default role r2"
"ALTER USER u1 DEFAULT ROLE r1"
"ALTER USER u1@localhost DEFAULT ROLE 'r1'"
"SHOW GRANTS FOR CURRENT_USER() USING r1"
"SHOW GRANTS FOR u1@localhost USING r1,r2"
"GRANT 'r1'@'' TO 'u1'@''"
"GRANT 'r2'@'' TO 'u1'@''"
"REVOKE 'r1'@'' FROM 'u1'@''"
"REVOKE 'r2'@'' FROM 'u1'@''"
"GRANT CREATE ROLE, DROP ROLE ON *.* TO uu@localhost"
"GRANT `r_verifier`@`localhost` TO `TestUserFails`@`localhost`"
"GRANT CREATE ROLE, DROP ROLE ON *.* TO b35471453@localhost"
"REVOKE CREATE ROLE, DROP ROLE, SET_USER_ID ON *.* FROM b35471453@localhost"
"CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch1.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch1'"
"CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch2.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch2'"
"CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE=""binlog-default.000001"", SOURCE_LOG_POS=4 FOR CHANNEL ''"
"ALTER SCHEMA s1 READ ONLY DEFAULT"
"START TRANSACTION READ ONLY,  WITH CONSISTENT SNAPSHOT"
"SET TRANSACTION   READ ONLY, ISOLATION LEVEL SERIALIZABLE"
"FLUSH TABLE mysql.procs_priv"
"create procedure p1()
begin
declare v_stmt_text varchar(255);
declare v_id integer;
declare done int default 0;
declare c cursor for select id, stmt_text from t1;
declare continue handler for 1295 -- ER_UNSUPPORTED_PS
set @status='not supported';
declare continue handler for 1064 -- ER_SYNTAX_ERROR
set @status='syntax error';
declare continue handler for sqlstate '02000' set done = 1;

prepare update_stmt from ""update t1 set status=? where id=?"";
open c;
repeat
if not done then
fetch c into v_id, v_stmt_text;
set @id=v_id, @stmt_text=v_stmt_text;
set @status=""supported"";
prepare stmt from @stmt_text;
execute update_stmt using @status, @id;
end if;
until done end repeat;
deallocate prepare update_stmt;
end"
"DECLARE cur1 CURSOR FOR SHOW TABLES"
"OPEN cur1"
"FETCH cur1 INTO c"
"CLOSE cur1"
"END|


CREATE DATABASE mysqltest"
"create procedure p1(a int)
begin
declare continue handler for 1436 -- ER_STACK_OVERRUN_NEED_MORE
select 'exception';
call p1(a+1);
end"
"create procedure h_ee()
deterministic
begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Outer (bad)' as 'h_ee';

begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Inner (good)' as 'h_ee';

insert into t3 values (1);
end;
end"
"create procedure h_es()
deterministic
begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Outer (bad)' as 'h_es';

begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Inner (good)' as 'h_es';

insert into t3 values (1);
end;
end"
"create procedure h_en()
deterministic
begin
declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA
select 'Outer (bad)' as 'h_en';

begin
declare x int;
declare continue handler for sqlstate '02000' -- no data
select 'Inner (good)' as 'h_en';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_ew()
deterministic
begin
declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE
select 'Outer (bad)' as 'h_ew';

begin
declare continue handler for sqlwarning
select 'Inner (good)' as 'h_ew';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_ex()
deterministic
begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Outer (bad)' as 'h_ex';

begin
declare continue handler for sqlexception
select 'Inner (good)' as 'h_ex';

insert into t3 values (1);
end;
end"
"create procedure h_se()
deterministic
begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Outer (bad)' as 'h_se';

begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Inner (good)' as 'h_se';

insert into t3 values (1);
end;
end"
"create procedure h_ss()
deterministic
begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Outer (bad)' as 'h_ss';

begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Inner (good)' as 'h_ss';

insert into t3 values (1);
end;
end"
"create procedure h_sn()
deterministic
begin
-- Note: '02000' is more specific than NOT FOUND ;
--       there might be other not found states
declare continue handler for sqlstate '02000' -- no data
select 'Outer (bad)' as 'h_sn';

begin
declare x int;
declare continue handler for not found
select 'Inner (good)' as 'h_sn';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_sw()
deterministic
begin
-- data exception - numeric value out of range
declare continue handler for sqlstate '22003'
select 'Outer (bad)' as 'h_sw';

begin
declare continue handler for sqlwarning
select 'Inner (good)' as 'h_sw';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_sx()
deterministic
begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Outer (bad)' as 'h_sx';

begin
declare continue handler for sqlexception
select 'Inner (good)' as 'h_sx';

insert into t3 values (1);
end;
end"
"create procedure h_ne()
deterministic
begin
declare continue handler for not found
select 'Outer (bad)' as 'h_ne';

begin
declare x int;
declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA
select 'Inner (good)' as 'h_ne';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_ns()
deterministic
begin
declare continue handler for not found
select 'Outer (bad)' as 'h_ns';

begin
declare x int;
declare continue handler for sqlstate '02000' -- no data
select 'Inner (good)' as 'h_ns';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_we()
deterministic
begin
declare continue handler for sqlwarning
select 'Outer (bad)' as 'h_we';

begin
declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE
select 'Inner (good)' as 'h_we';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_ws()
deterministic
begin
declare continue handler for sqlwarning
select 'Outer (bad)' as 'h_ws';

begin
-- data exception - numeric value out of range
declare continue handler for sqlstate '22003'
select 'Inner (good)' as 'h_ws';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_xe()
deterministic
begin
declare continue handler for sqlexception
select 'Outer (bad)' as 'h_xe';

begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Inner (good)' as 'h_xe';

insert into t3 values (1);
end;
end"
"create procedure h_xs()
deterministic
begin
declare continue handler for sqlexception
select 'Outer (bad)' as 'h_xs';

begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Inner (good)' as 'h_xs';

insert into t3 values (1);
end;
end"
"create procedure mysqltest1.p1()
begin
alter database character set koi8r;
end"
"CREATE PROCEDURE p1(IN loops BIGINT(19) UNSIGNED)
BEGIN
WHILE loops > 0 DO
SELECT c1 FROM v1"
"END|

CREATE PROCEDURE p2(IN loops BIGINT(19) UNSIGNED)
BEGIN
WHILE loops > 0 DO
SELECT c1 FROM v1"
"END|

CREATE FUNCTION f1(loops INT UNSIGNED)
RETURNS INT
BEGIN
DECLARE tmp INT"
"RETURN loops"
"END|

DELIMITER "
"|

eval CALL p1($p1_cnt)"
"CREATE FUNCTION f1() RETURNS INT DETERMINISTIC
BEGIN
DECLARE a int;
-- SQL statement inside
SELECT 1 INTO a;
RETURN a;
END "
"CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND STARTS NOW() DO
BEGIN
DECLARE EXIT HANDLER FOR 1136 BEGIN
INSERT INTO t3 VALUES (1);
END; -- ER_WRONG_VALUE_COUNT_ON_ROW

SELECT GET_LOCK('e1_lock', 60);
SELECT RELEASE_LOCK('e1_lock');

INSERT INTO t2 SELECT * FROM t1;
END"
"create function bug23333()
RETURNS int(11)
DETERMINISTIC
begin
insert into t1 values (null)"
"return @a"
"end|

reset master"
"ALTER INSTANCE RELOAD TLS"
"ALTER INSTANCE RELOAD TLS NO ROLLBACK ON ERROR"
"SELECT 1 FROM t1 AS table2 LEFT JOIN (SELECT 'c') AS table3(f1)
ON table3.f1 = table2.f1 WHERE table2.f1
IN (SELECT 1 FROM (SELECT 1314830897) AS t1(pk)
WHERE t1.pk <= ANY(SELECT 5)) AND FALSE"
"EXPLAIN FORMAT=tree
SELECT /*+ JOIN_ORDER(t3,t2,t1) */ * FROM t1
WHERE t1.col1 = ANY (
SELECT t1.col1 + t2.col2
FROM t2 JOIN t3 ON t2.col2 = t3.col2 AND t2.col1 =  t3.col1
WHERE t2.col2 BETWEEN 2 AND 9
)"
"SELECT t2.i FROM t2
WHERE ( false ) AND
( t2.i  IN ( SELECT t1.i FROM t1
WHERE t1.i <= SOME ( SELECT 8 UNION  SELECT 3 ) ) )"
"SELECT SUM(pk) FROM t1 WHERE ( pk >= ANY ( SELECT MAX(1) FROM DUAL) )"
"FLUSH TABLE schema1.t1"
"SELECT * FROM t0 WHERE a <ANY (VALUES ROW(1))"
"SELECT * FROM t0 WHERE a <ANY (VALUES ROW(1), ROW(2))"
"CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE=''"
"CREATE TABLESPACE ts2 ENGINE_ATTRIBUTE='{""c"": ""v""}'"
"ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{""foo"": ""bar""}'"
"create temporary table tg (i int not null) engine=merge union=()"
"SELECT JSON_VALUE('{""data"": ""2019-01-01 11:11::11""}', '$.data' RETURNING DATETIME) AS v"
"SELECT JSON_VALUE('{""data"": ""2019-01/01""}', '$.data' RETURNING DATE) AS v"
"SELECT JSON_VALUE('{""data"": ""10:11:12.098700    ""}', '$.data' RETURNING TIME) AS v"
"CREATE USER user1@"
"GRANT UPDATE (a) ON t1 TO user1@"
"DROP USER user1@"
"create trigger t1_whoupdated before update on t1 for each row
begin
declare user varchar(32);
declare i int;
select user() into user;
set NEW.username = user;
select count(*) from ((select 1) union (select 2)) as d1 into i;
end"
"load data infile '../../std_data/words.dat' into table t1 (a) set b:= f1()"
"SELECT 10,10.0,10.,.1e+2,100.0e-1"
"create table t1 (c nchar varchar(10))"
"create table t1 (c national character varying(10))"
"create table t1 (c nchar varying(10))"
"CREATE PROCEDURE p1 ()
BEGIN
DECLARE a TIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE PROCEDURE p1 (a TIME(6))
BEGIN
SELECT a"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1(112233)//
CALL p1(112233.123)//
CALL p1(112233.123e0)//
CALL p1('11:22:33.123')//
DROP PROCEDURE p1//
CREATE PROCEDURE p1()
BEGIN
DECLARE a TIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE FUNCTION p1 (a TIME(6)) RETURNS TIME(6)
BEGIN
RETURN a"
"END//
SHOW CREATE FUNCTION p1//
SELECT p1(112233.123)//
DROP FUNCTION p1//
DELIMITER "
"//


CREATE TABLE t1 (a TIME(6))"
"CREATE PROCEDURE p1 ()
BEGIN
DECLARE a DATETIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE PROCEDURE p1 (a DATETIME(6))
BEGIN
SELECT a"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1(20010101112233)//
CALL p1(20010101112233.123)//
CALL p1(0.123e0)//
CALL p1('2001-01-01 11:22:33.123')//
DROP PROCEDURE p1//
CREATE PROCEDURE p1()
BEGIN
DECLARE a DATETIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE FUNCTION p1 (a DATETIME(6)) RETURNS DATETIME(6)
BEGIN
RETURN a"
"END//
SHOW CREATE FUNCTION p1//
SELECT p1(20010101112233)//
SELECT p1(20010101112233.123)//
DROP FUNCTION p1//
DELIMITER "
"//

CREATE TABLE t1 (a DATETIME(6))"
"CREATE PROCEDURE p1 ()
BEGIN
DECLARE a TIMESTAMP(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE PROCEDURE p1 (a TIMESTAMP(6))
BEGIN
SELECT a"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1(20010101112233)//
CALL p1(20010101112233.123)//
CALL p1(0.123e0)//
CALL p1('2001-01-01 11:22:33.123')//
DROP PROCEDURE p1//
CREATE PROCEDURE p1()
BEGIN
DECLARE a TIMESTAMP(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE FUNCTION p1 (a TIMESTAMP(6)) RETURNS TIMESTAMP(6)
BEGIN
RETURN a"
"//

CREATE TABLE t1 (a TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6))"
"select count(*) from (
(select                      a,b from t1 limit 2)  union all (select a,b from t2 order by a)) q"
"(select * from t1 limit 3) intersect (select * from t1 limit 3)"
"(select * from t1 limit 4) except (select * from t1 limit 1)"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1) UNION all (SELECT * FROM t2)) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) UNION all (SELECT * FROM t2)) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1) UNION all (SELECT * FROM t2 LIMIT 1)) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) UNION SELECT * FROM t2) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) UNION all SELECT * FROM t2) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 100) UNION SELECT * FROM t2) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 limit 2,2) UNION SELECT * FROM t2) q"
"select * from ((select * from t1 limit 1) union (select * from t1 limit 1)) a"
"select * from ((select * from t1 limit 1) union (select * from t1 limit 1) union (select * from t1 limit 1)) a"
"select * from ((((select * from t1))) union (select * from t1) union (select * from t1)) a"
"select * from ((select * from t1) union (((select * from t1))) union (select * from t1)) a"
"SELECT c1, c2 FROM (
(
(SELECT c1, c2 FROM t1)
UNION
(SELECT c1, c2 FROM t2)
)
ORDER BY c2 DESC, c1 ASC LIMIT 1
) AS res"
"((SELECT SQL_CALC_FOUND_ROWS * FROM r ORDER BY a LIMIT 5) ORDER BY -a LIMIT 4) ORDER BY a LIMIT 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 6"
"ALTER USER foo@localhost FAILED_LOGIN_ATTEMPTS 2"
"ALTER USER foo@localhost PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER failed_login_attempts@localhost FAILED_LOGIN_ATTEMPTS 2"
"CREATE USER password_lock_time@localhost PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"ALTER USER foo@localhost FAILED_LOGIN_ATTEMPTS 0"
"ALTER USER foo@localhost FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 0"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3 ACCOUNT LOCK"
"CREATE USER proxied_to_user@localhost IDENTIFIED WITH 'mysql_native_password' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER proxy_user@localhost IDENTIFIED WITH 'mysql_native_password' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 2"
"ALTER USER u1 FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"ALTER USER u1 FAILED_LOGIN_ATTEMPTS 0 PASSWORD_LOCK_TIME 0"
"CREATE USER foo@localhost FAILED_LOGIN_ATTEMPTS 32767"
"CREATE USER foo@localhost PASSWORD_LOCK_TIME 32767"
"CREATE USER ''@localhost IDENTIFIED BY 'pwd' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' PASSWORD_LOCK_TIME 3 FAILED_LOGIN_ATTEMPTS 2"
"ALTER USER foo@localhost ATTRIBUTE ""{ \"test\": \"account locking\" }"""
"ALTER USER foo@localhost COMMENT ""This is a test account for verifying that password locking and user attributes won't interfer with one and another."""
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME UNBOUNDED"
"ALTER USER u1 COMMENT 'free form text'"
"ALTER USER u1 COMMENT 'changed the free form text'"
"ALTER USER u1 ATTRIBUTE '{""uid"" : ""34234""}'"
"ALTER USER u1 ATTRIBUTE '{""speed"" : ""9000""}'"
"ALTER USER u1 ATTRIBUTE '{""speed"" : null }'"
"ALTER USER foo@localhost COMMENT 'password lock time'"
"ALTER USER foo@localhost ATTRIBUTE '{""flag"":""red""}'"
"ALTER USER foo@localhost ATTRIBUTE '{""flag"":null}'"
"ALTER USER foo@localhost COMMENT 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'"
"ALTER USER foo@localhost COMMENT 'xxx'"
"CREATE USER foo2@localhost IDENTIFIED BY 'foo' COMMENT 'xxx'"
"CREATE USER foo3 PASSWORD EXPIRE DEFAULT COMMENT 'abc'"
"CREATE USER foo4 ACCOUNT LOCK ATTRIBUTE '{""stuff"":""ffuts""}'"
"ALTER USER foo4 ACCOUNT UNLOCK ATTRIBUTE '{""stuff"":""unlocked""}'"
"ALTER USER foo@localhost ATTRIBUTE '{""key"":""value""}'"
"ALTER USER foo@localhost COMMENT 'Added key/value pair'"
"ALTER USER redqueen@localhost IDENTIFIED BY 'madness' RETAIN CURRENT PASSWORD"
"ALTER USER redqueen@localhost DISCARD OLD PASSWORD COMMENT 'Dropped old password'"
"CREATE USER u1 COMMENT 'Hello ""Smith""'"
"CREATE USER u1@localhost IDENTIFIED BY 'foo' COMMENT 'Not permitted to change this'"
"CREATE USER u1@localhost IDENTIFIED BY 'foo',u2@localhost IDENTIFIED BY 'foo' COMMENT ""Works with partial restrictions"""
"ALTER USER CURRENT_USER() COMMENT 'test'"
"ALTER USER CURRENT_USER() ATTRIBUTE '{ ""comment"" : null }'"
"ALTER USER u1@localhost ATTRIBUTE '{""Restrictions"": [{""Database"":""mysql"",""Privileges"": [ ""CREATE"" ]}]}'"
"CREATE TRIGGER trig_t1_ins BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
SET @aux = GET_LOCK(2,1)"
END
"|
SELECT GET_LOCK(CAST(2 AS CHAR),0)"
"create table table_28127_a(0b02 int)"
"create table table_28127_b(0b2 int)"
"CREATE VIEW v1 AS SELECT 1 FROM t1 WHERE
ROW(1,1) >= ROW(1, (SELECT 1 FROM t1 WHERE  f1 >= ANY ( SELECT '1' )))"
"CREATE VIEW v1 AS SELECT 1 FROM t1 GROUP BY
SUBSTRING(1 FROM (SELECT 3 FROM t1 WHERE a >= ANY(SELECT 1)))"
"SELECT * FROM t WHERE a = SOME(SELECT ROW_NUMBER() OVER () + 1 FROM t)"
"SELECT * FROM t WHERE a = ANY(SELECT ROW_NUMBER() OVER () + 1 FROM t)"
"SELECT * FROM t WHERE a >= SOME(SELECT ROW_NUMBER() OVER () + 1 FROM t)"
"CREATE PROCEDURE p2(n INT) DO LEAD(1, n) OVER()"
"CREATE PROCEDURE p3(n INT) DO LAG(1, n) OVER()"
"DO LAG(1, @v) OVER()"
"DO LEAD(1, @v) OVER()"
