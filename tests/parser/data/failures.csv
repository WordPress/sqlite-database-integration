"reset binary logs and gtids"
"CHECK TABLES t1"
"alter table t1 algorithm=inplace, rename key k to kk"
"alter table t2 algorithm=inplace, rename key k to kk"
"alter table t1 algorithm=copy, rename key kkk to kkkk"
"alter table t2 algorithm=copy, rename key kkk to kkkk"
"alter table t1 algorithm=inplace, rename key kkkk to k, alter column i set default 100"
"alter table t2 algorithm=inplace, rename key kkkk to k, alter column i set default 100"
"alter table t1 algorithm=copy, rename key kk to kkk"
"ALTER TABLE t1 ALGORITHM=INPLACE, DROP INDEX fld1,
ADD FULLTEXT INDEX fld1(fld1)"
"CREATE TABLE t3(a POINT GENERATED ALWAYS AS (POINT(1,1)) VIRTUAL NOT NULL)
ENGINE=INNODB"
"CREATE TABLE t4 (a BLOB, b BLOB GENERATED ALWAYS AS (a) VIRTUAL NOT NULL) ENGINE=INNODB"
"CREATE TABLE t (a TIMESTAMP(1) GENERATED ALWAYS AS (1) VIRTUAL,
b INT GENERATED ALWAYS AS (1) VIRTUAL
) ENGINE=INNODB"
"CREATE TABLE t_gen(a INT, b DOUBLE GENERATED ALWAYS AS (SQRT(a)))"
"ALTER TABLE t_gen RENAME COLUMN a TO c, CHANGE COLUMN b b DOUBLE GENERATED ALWAYS AS (SQRT(c))"
"ALTER TABLE t
ADD COLUMN b DATE GENERATED ALWAYS AS ('1999-09-09') VIRTUAL NOT NULL"
"ALTER TABLE t
ADD COLUMN c DATE GENERATED ALWAYS AS ('1999-09-09') STORED NOT NULL"
"ALTER TABLE t
ADD COLUMN d DATE GENERATED ALWAYS AS (NULL) VIRTUAL NOT NULL"
"CREATE TABLE t1(fld1 INT, fld2 INT GENERATED ALWAYS AS (-fld1) VIRTUAL,
fld3 INT GENERATED ALWAYS AS (-fld1) STORED)"
"CREATE TABLE t1(c1 int,
c2 VARCHAR(1) CHARSET UTF8MB3,
c3 VARCHAR(1) CHARSET UTF8MB3,
c4 VARCHAR(2) GENERATED ALWAYS AS (CONCAT(c2,c3)) virtual)"
"ALTER TABLE t1 ADD gcol INT AS (b + 1) VIRTUAL FIRST, ADD COLUMN a INT"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, REORGANIZE PARTITION p3 INTO
(PARTITION p31 VALUES LESS THAN (2003), PARTITION p32 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, REORGANIZE PARTITION p31, p32 INTO (PARTITION p3 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, REBUILD PARTITION p1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = EXCLUSIVE, REBUILD PARTITION p2"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = SHARED, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = SHARED, COALESCE PARTITION 1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = EXCLUSIVE, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = COPY, LOCK = EXCLUSIVE, COALESCE PARTITION 1"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = NONE, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = NONE, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, ADD PARTITION (PARTITION p4 VALUES LESS THAN (2010))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, DROP PARTITION p4"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, REORGANIZE PARTITION p3 INTO
(PARTITION p31 VALUES LESS THAN (2003), PARTITION p32 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, REORGANIZE PARTITION p31, p32 INTO (PARTITION p3 VALUES LESS THAN (2005))"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, REBUILD PARTITION p1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, REBUILD PARTITION p2"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = SHARED, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = SHARED, COALESCE PARTITION 1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, ADD PARTITION PARTITIONS 1"
"ALTER TABLE t2 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, COALESCE PARTITION 1"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = NONE, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = SHARED, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = COPY, LOCK = EXCLUSIVE, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = NONE, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = SHARED, EXCHANGE PARTITION p0 WITH TABLE t"
"ALTER TABLE t1 ALGORITHM = INPLACE, LOCK = EXCLUSIVE, EXCHANGE PARTITION p0 WITH TABLE t"
reap
"CREATE TABLE ta (pk INT, embedding VECTOR(4)) ENGINE=ARCHIVE"
"create table t1 (
dummyKey INTEGER NOT NULL AUTO_INCREMENT,
a001 TINYINT,
a010 TINYINT,
a012 TINYINT,
a015 TINYINT,
a016 TINYINT,
a017 TINYINT,
a019 TINYINT,
a029 TINYINT,
a030 TINYINT,
a031 TINYINT,
a032 TINYINT,
a042 TINYINT,
a043 TINYINT,
a044 TINYINT,
a3001 TINYINT,
a3002 TINYINT,
a3003 TINYINT,
a3004 TINYINT,
a3005 TINYINT,
a3021 TINYINT,
a3022 TINYINT,
a BIT(6),
b BIT(6),
c BIT(6),
d TINYINT,
e TINYINT,
f TINYINT,
g TINYINT,
h TINYINT,
i TINYINT,
j TINYINT,
k TINYINT,
l TINYINT,
m TINYINT,
n TINYINT,
o TINYINT,
a034 TINYINT,
PRIMARY KEY USING HASH (dummyKey) ) engine=archive"
"CHANGE REPLICATION SOURCE TO
SOURCE_USER=     'plug_user',
SOURCE_PASSWORD= 'plug_user',
SOURCE_RETRY_COUNT= 0"
"EOF




use strict"
"my $mysqld_log= $ENV{'MYSQLD_LOG'}"
"open(MYSQLD_LOG, $mysqld_log) || die ""Failed to open '$mysqld_log': $!"""
"print ""# Look for [ERROR] in error log (there should be none):\n"""
"EOF

use strict"
"my $bdir= $ENV{'BDIR'}"
"chdir $bdir"
"my $binary= $ENV{'MYSQLD'}"
"$binary =~ s|$bdir/||"
"my $init_file_args= $ENV{'INIT_FILE_ARGS'}"
"(system(""$binary $init_file_args"") == 0) ||
die ""system failed on '$binary $init_file_args': $!"""
"open(MYSQLD_LOG, $ENV{'MYSQLD_LOG'}) ||
die ""Failed to open '$mysqld_log': $!"""
"use File::Basename"
"my $bindir= dirname($ENV{'MYSQLD'})"
"$ENV{'PATH'}=""$bindir:$ENV{'PATH'}"""
"(system(""$binary $init_file_args"") == 0) ||
die ""system failed on 'mysqld $init_file_args': $!"""
"my $mysqld_out= $ENV{'MYSQLD_OUT'}"
"open(MYSQLD_OUT, $mysqld_out) || die ""Failed to open '$mysqld_out': $!"""
"my $found_expected_error= 0"
"$found_expected_error= 1"
"my $found_expected_errors= 0"
++$found_expected_errors
"EOF



use strict"
"my $mysqld= $ENV{'MYSQLD'}"
"my $mysql_tmp_dir= $ENV{'MYSQL_TMP_DIR'}"
"my $init_file_args_d= $ENV{'INIT_FILE_ARGS_D'}"
"chdir($mysql_tmp_dir) || die ""# Could not chdir to '$mysql_tmp_dir': $!"""
"(system(""$mysqld $init_file_args_d >$mysqld_out 2>&1"") == 0) ||
die ""system failed on '$mysqld $init_file_args_d': $!"""
"print ""# Look for output (there should be none):\n"""
"print ""# Supressing output for initialize:\n"""
"print ""# Supressing output for server shutdown\n"""
"EOF


SHOW DATABASES"
disable_query_log
"SELECT 1 FROM t1 WHERE a = ANY (SELECT a FROM t2)"
"CREATE TABLE ta (pk INT, embedding VECTOR(4), PRIMARY KEY (pk)) ENGINE=BLACKHOLE"
send
REAP
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"" USING latin1)"
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"", CHAR)"
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"", CHAR(4))"
"SELECT CONVERT(TIMESTAMP ""2004-01-22 21:45:33"", BINARY(4))"
"select CAST(TIMESTAMP ""2004-01-22 21:45:33"" AS BINARY(4))"
"SELECT CAST(1/3 AS FLOAT(10)), CAST(1/3 AS FLOAT(53))"
"SELECT CAST(DATE'2000-01-01' AS FLOAT), CAST(DATE'2000-01-01' AS DOUBLE)"
"SELECT CAST(TIME'23:59:59' AS FLOAT), CAST(TIME'23:59:59' AS DOUBLE)"
"SELECT CAST(TIME'23:59:59.123456' AS FLOAT),
CAST(TIME'23:59:59.123456' AS DOUBLE)"
"SELECT CAST(TIMESTAMP'2000-01-01 23:59:59' AS FLOAT),
CAST(TIMESTAMP'2000-01-01 23:59:59' AS DOUBLE)"
"SELECT CAST(TIMESTAMP'2000-01-01 23:59:59.123456' AS FLOAT),
CAST(TIMESTAMP'2000-01-01 23:59:59.123456' AS DOUBLE)"
"CREATE VIEW v1 AS SELECT CAST(1/3 AS REAL), CAST(1/3 AS FLOAT(2)), CAST(1/3 AS FLOAT(50))"
"EXPLAIN SELECT * from t1 WHERE userID = DATE'2012-02-20'"
"SELECT CAST(TIMESTAMP'2010-01-01 00:00' AS YEAR)"
"SELECT CAST(TIMESTAMP'0000-00-00 00:00' AS YEAR)"
"SELECT CAST(TIMESTAMP'2010-01-01 08:09:10' AS YEAR)"
"SELECT CAST(TIME'08:09:10' AS YEAR)"
"SELECT CAST(TIME'00:00:00' AS YEAR)"
"INSERT INTO t1 VALUES (19, CAST(TIMESTAMP'2015-01-15 23:24:25' AS JSON))"
"SELECT CAST(TIMESTAMP'579-10-10 10:10:10' AS YEAR)"
"CREATE PROCEDURE p_flush_status()
BEGIN
DECLARE x INT DEFAULT 3000"
"RESET PERSIST character_set_server"
"CREATE TABLE ð¬(a INT)"
"CREATE TABLE t1(ð¬ INT)"
"DROP TABLE ð¬"
"my $input_file= $ENV{'_INPUT_FILE_'}"
"my $mode = (stat($input_file))[2]"
"open(FILE, "">"", ""$ENV{MYSQL_TMP_DIR}/permissions.inc"") or die"
"my $perm= $mode & 07777"
"print FILE ""let \$FILE_PERMISSIONS= $perm;\n"""
"close FILE"
"use File::Spec"
"my $bindir= dirname($binary)"
"my $binary= basename($binary)"
"chdir(""$bindir/.."") || die ""Cannot chdir to $bindir/..; $!"""
"my $relbindir= basename($bindir)"
"my $exe= File::Spec->catfile($relbindir, $binary)"
"my $syscmd= ""$exe $ENV{'HVARGS'}"""
"(system($syscmd) == 0) || die ""system($syscmd) failed: $!"""
"EOF


use strict"
"$binary= basename($binary)"
"$ENV{'PATH'}=""$bindir$Config{'path_sep'}$ENV{'PATH'}"""
"my $syscmd= ""$binary $ENV{'HVARGS'}"""
"create table t1 (f1 int,
CONSTRAINT cafe CHECK (f1 < 10),
CONSTRAINT cafÃ© CHECK (f1 < 10))"
"CREATE TABLE t1(c1 INT,
c2 INT,
c3 INT GENERATED ALWAYS AS (c1 + c2),
CONSTRAINT ck CHECK (c3 > 10)
)"
"CREATE TABLE t2 LIKE t1"
"CREATE TEMPORARY TABLE tmp_t2 LIKE t2"
"CREATE TABLE t3 LIKE tmp_t2"
"ALTER TABLE t1 ADD f3 INT CHECK (f3 < 10) NOT ENFORCED, ALGORITHM=INPLACE"
"ALTER TABLE t1 ADD CONSTRAINT CHECK (f2 < 10) NOT ENFORCED, ALGORITHM=INPLACE"
"ALTER TABLE t1 ALTER CHECK t1_chk_1 NOT ENFORCED, ALGORITHM=INPLACE"
"ALTER TABLE t1 ALTER CHECK t1_chk_1 ENFORCED, ALGORITHM=COPY"
"ALTER TABLE t1 ALTER CHECK t1_chk_1 ENFORCED, ALGORITHM=INPLACE"
"CREATE TABLE t1(f1 INT,
f2 INT CHECK (f2 < 10),
f3 INT CHECK (f3 < 10) NOT ENFORCED,
CONSTRAINT ck CHECK (f1 > 10),
CONSTRAINT CHECK (f1 > 10) NOT ENFORCED)"
"ALTER TABLE t1 ALTER CHECK ck NOT ENFORCED"
"ALTER TABLE t1 ALTER CHECK ck ENFORCED"
"ALTER TABLE t1 ADD CONSTRAINT ck1 CHECK(f1<10) NOT ENFORCED"
"ALTER TABLE t1 ALTER CHECK ck1 ENFORCED"
"ALTER TABLE t1 ALTER CHECK t1_chk_2 ENFORCED"
"ALTER TABLE t1 ADD f4 INT CONSTRAINT t1_f4_chk CHECK (f4 < 10) NOT ENFORCED"
"ALTER TABLE t1 ALTER CHECK t1_f4_chk ENFORCED"
"ALTER TABLE t1
DROP CHECK ck21, ADD CONSTRAINT ck21 CHECK (c1 > 10),
DROP CHECK ck22, ADD CONSTRAINT ck22 CHECK (c1 < 10),
DROP CHECK ck31, ADD CONSTRAINT ck31 CHECK (c1 > 10),
DROP CHECK ck32, ADD CONSTRAINT ck32 CHECK (c1 < 10),
DROP CHECK ck41, ADD CONSTRAINT ck41 CHECK (c1 > 10),
DROP CHECK ck42, ADD CONSTRAINT ck42 CHECK (c1 < 10),
ALTER CHECK ck11 NOT ENFORCED,
ALTER CHECK ck12 NOT ENFORCED,
ALTER CHECK ck11 ENFORCED"
"ALTER TABLE t1 MODIFY COLUMN c1 FLOAT(10.3), DROP CHECK t1_chk_1, ADD CONSTRAINT CHECK(C1 > 10.1) ENFORCED"
"CREATE TABLE t1 (
c1 BIT(7) CHECK(c1 < B'1111100') NOT ENFORCED,
c2 BOOLEAN CHECK(c2 > 0) NOT ENFORCED,
c3 TINYINT CHECK(c3 > 10) NOT ENFORCED,
c4 SMALLINT CHECK(c4 > 10) NOT ENFORCED,
c5 MEDIUMINT CHECK(c5 > 10) NOT ENFORCED,
c6 INT CHECK(c6 > 10),
c7 BIGINT CHECK(c7 > 10),
c8 DECIMAL(6,2) CHECK(c8 > 10.1),
c9 FLOAT(6,2) CHECK(c9 > 10.1),
c10 DOUBLE(6,2) CHECK(c10 > 10.1),
c11 CHAR(6) CHECK (c11 IS NULL))"
"CREATE TABLE t4(a INTEGER CHECK (a > 0) ENFORCED NOT NULL)"
"CREATE TABLE t5(a INTEGER CHECK (a > 0) NOT ENFORCED NOT NULL)"
"CREATE TABLE t7(a INTEGER CHECK (a > 0) ENFORCED NOT NULL)"
"CREATE TRIGGER t1_before_insert_trg BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
IF NEW.f1 = 1 THEN
-- Valid value case.
SET NEW.f2 = '2017-06-06 00:00:00';
ELSEIF NEW.f1 = 2 THEN
-- Check option failure case.
SET NEW.f2 = '2019-06-06 00:00:00';
ELSEIF NEW.f1 = 3 THEN
-- Check constraint failure case.
SET NEW.f2 = '2018-06-06 00:00:00';
END IF;
END;"
"CREATE TRIGGER t1_before_update_trg BEFORE UPDATE ON t1 FOR EACH ROW
BEGIN
IF OLD.f1 = 4 THEN
-- Valid value case.
SET NEW.f2 = '2017-06-06 00:00:00';
ELSEIF OLD.f1 = 5 THEN
-- Check option failure case.
SET NEW.f2 = '2019-06-06 00:00:00';
ELSEIF OLD.f1 = 6 THEN
-- Check constraint failure case.
SET NEW.f2 = '2018-06-06 00:00:00';
END IF;
END;"
"CREATE TABLE t1 (f1 INT, f2 INT, f3 INT, f4 FLOAT AS (f3 * 0.01), f5 INT,
CHECK (f1 < f2))"
"my $mode = (stat($ENV{SESSION_FILE}))[2]"
"my $perm = sprintf ""%04o"", ($mode & 07777)"
"/* line with only comment */"
"SELECT 1 /*!99999 /* */ */"
"SELECT 2 /*!12345 /* */ */"
"SELECT 3 /*! /* */ */"
"START TRANSACTION READ ONLY, WITH CONSISTENT SNAPSHOT"
"START TRANSACTION READ WRITE, WITH CONSISTENT SNAPSHOT"
"START TRANSACTION WITH CONSISTENT SNAPSHOT, READ ONLY"
"START TRANSACTION WITH CONSISTENT SNAPSHOT, READ WRITE"
"SET TRANSACTION READ ONLY, ISOLATION LEVEL READ COMMITTED"
"SET TRANSACTION READ WRITE, ISOLATION LEVEL READ COMMITTED"
"SET SESSION TRANSACTION READ ONLY, ISOLATION LEVEL REPEATABLE READ"
"CREATE PROCEDURE p1() SET SESSION TRANSACTION READ ONLY,
ISOLATION LEVEL SERIALIZABLE"
"SET SESSION TRANSACTION READ WRITE, ISOLATION LEVEL REPEATABLE READ"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = 8 + 8"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = @gizmo"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = @@global.max_connections"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = DAYOFMONTH('1972-07-29')"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = CAST(RAND() * 10 AS SIGNED)"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = 1024 * 1024 * 1024 * 1024"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = -100"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = ON"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = ""ON"""
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = OFF"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = ""OFF"""
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = gizmo"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = 1"
"INSTALL COMPONENT ""file://component_validate_password"" SET check_user_name = 11"
"INSTALL COMPONENT ""file://component_validate_password""
SET GLOBAL validate_password.length = 16"
"INSTALL COMPONENT ""file://component_validate_password""
SET validate_password.length = 16, PERSIST validate_password.number_count = 13"
"INSTALL COMPONENT ""file://component_validate_password""
SET validate_password.length = 16"
"INSTALL COMPONENT ""file://component_validate_password""
SET GLOBAL validate_password.length = 60, validate_password.number_count = 50"
"INSTALL COMPONENT ""file://component_validate_password"" SET length = 12"
"EOF
SELECT COUNT(*) FROM wl12475.t1"
"create user test@127.0.0.1 identified by ""gambling"""
"grant ALL on *.* to test@127.0.0.1"
"drop user test@127.0.0.1"
"SELECT * FROM t WHERE t = TIME'180000.001'"
"EXPLAIN SELECT * FROM t WHERE t = TIME'180000.001'"
"CREATE TABLE t3 (col1 INT, col2 INT GENERATED ALWAYS AS (col1) STORED)"
"ALTER TABLE t1 ADD COLUMN f3 INT GENERATED ALWAYS AS (f1) STORED"
"ALTER TABLE t1 ALTER CONSTRAINT f2_check NOT ENFORCED"
"ALTER TABLE t1 ALTER CHECK f2_check NOT ENFORCED, ALTER CHECK f2_check ENFORCED"
"ALTER TABLE t1 ALTER CONSTRAINT f2_check NOT ENFORCED, ALTER CONSTRAINT f2_check ENFORCED"
"ALTER TABLE t1 ALTER CHECK f2_check NOT ENFORCED, ALTER CONSTRAINT f2_check ENFORCED"
"CREATE PROCEDURE alter_constraint_proc()
ALTER TABLE t1 ALTER CONSTRAINT f2_check NOT ENFORCED"
"CREATE PROCEDURE alter_constraint_proc()
ALTER TABLE t1 ALTER CONSTRAINT constraint_name NOT ENFORCED"
"ALTER TABLE tmp ALTER CONSTRAINT f2_check NOT ENFORCED"
"create table t1 like `a/a`"
"create table 1ea10 (1a20 int,1e int)"
"insert into 1ea10 values(1,1)"
"select 1ea10.1a20,1e+ 1e+10 from 1ea10"
"drop table 1ea10"
"create table t3 like t1"
"create table if not exists t3 like t1"
"create temporary table t3 like t2"
"create table mysqltest.t3 like t1"
"create temporary table t3 like mysqltest.t3"
"create table t2 like t3"
"create temporary table t3 like t1"
"CREATE TABLE t1(c1 VARCHAR(33), KEY USING BTREE (c1))"
"CREATE TABLE t1(c1 VARCHAR(33), KEY USING BTREE (c1) USING HASH) ENGINE=MEMORY"
"CREATE TABLE t1(c1 VARCHAR(33), KEY USING HASH (c1) USING BTREE) ENGINE=MEMORY"
"create database Ð¸Ð¼Ñ_Ð±Ð°Ð·Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_45"
"use Ð¸Ð¼Ñ_Ð±Ð°Ð·Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_45"
"drop database Ð¸Ð¼Ñ_Ð±Ð°Ð·Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_45"
"create table Ð¸Ð¼Ñ_ÑÐ°Ð±Ð»Ð¸ÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48
(
Ð¸Ð¼Ñ_Ð¿Ð¾Ð»Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_45 int,
index Ð¸Ð¼Ñ_Ð¸Ð½Ð´ÐµÐºÑÐ°_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48 (Ð¸Ð¼Ñ_Ð¿Ð¾Ð»Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_45)
)"
"create view Ð¸Ð¼Ñ_Ð²ÑÑ_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_42 as
select Ð¸Ð¼Ñ_Ð¿Ð¾Ð»Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_45
from Ð¸Ð¼Ñ_ÑÐ°Ð±Ð»Ð¸ÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48"
"select * from Ð¸Ð¼Ñ_ÑÐ°Ð±Ð»Ð¸ÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48"
"show create table Ð¸Ð¼Ñ_ÑÐ°Ð±Ð»Ð¸ÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48"
"show create view Ð¸Ð¼Ñ_Ð²ÑÑ_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_42"
"create trigger Ð¸Ð¼Ñ_ÑÑÐ¸Ð³Ð³ÐµÑÐ°_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_49
before insert on Ð¸Ð¼Ñ_ÑÐ°Ð±Ð»Ð¸ÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48 for each row set @a:=1"
"drop trigger Ð¸Ð¼Ñ_ÑÑÐ¸Ð³Ð³ÐµÑÐ°_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_49"
"create procedure Ð¸Ð¼Ñ_Ð¿ÑÐ¾ÑÐµÐ´ÑÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_50()
begin
end"
"drop procedure Ð¸Ð¼Ñ_Ð¿ÑÐ¾ÑÐµÐ´ÑÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_50"
"create function Ð¸Ð¼Ñ_ÑÑÐ½ÐºÑÐ¸Ð¸_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_49()
returns int
return 0"
"drop function Ð¸Ð¼Ñ_ÑÑÐ½ÐºÑÐ¸Ð¸_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_49"
"drop view Ð¸Ð¼Ñ_Ð²ÑÑ_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_42"
"drop table Ð¸Ð¼Ñ_ÑÐ°Ð±Ð»Ð¸ÑÑ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48"
"create function f1() returns int
begin
declare res int"
"return res"
"end|
create table t1 as select 1"
"create table t1 like information_schema.processlist"
"create temporary table t1 like information_schema.processlist"
"CREATE TRIGGER f BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
INSERT INTO t1 ( `int` ) VALUES (4 ),( 8 ),( 2 ) "
"|


DROP TABLE t1"
"create table t2 like t1"
"CREATE PROCEDURE IF NOT EXISTS sp1() BEGIN END"
"CREATE FUNCTION IF NOT EXISTS sf1() RETURNS INT DETERMINISTIC return 0"
"CREATE FUNCTION IF NOT EXISTS abs() RETURNS INT DETERMINISTIC return 0"
"CREATE FUNCTION IF NOT EXISTS metaphon() RETURNS INT DETERMINISTIC return 0"
"CREATE TRIGGER IF NOT EXISTS trg1 BEFORE INSERT ON t1 FOR EACH ROW BEGIN END"
"CREATE TABLE t1 (f1 INT) START TRANSACTION"
"CREATE PROCEDURE proc1()
BEGIN
CREATE TABLE t1 (f1 INT) START TRANSACTION;
ROLLBACK;
CREATE TABLE t1 (f1 INT) START TRANSACTION;
COMMIT;
END"
"SELECT MAX(k COLLATE latin1_german2_ci)
FROM t1
WHERE
SELECT *
FROM t1
WHERE (_latin1'Mu""ller' COLLATE latin1_german2_ci) = k
HAVING
SELECT *
FROM t1
HAVING (_latin1'Mu""ller' COLLATE latin1_german2_ci) = k"
"CREATE TABLE t4 (s1 CHAR(50) CHARACTER SET latin1,
s2 CHAR(50) CHARACTER SET cp932,
d DECIMAL(10,2))|
CREATE PROCEDURE bug18293 (IN ins1 CHAR(50),
IN ins2 CHAR(50) CHARACTER SET cp932,
IN ind DECIMAL(10,2))
BEGIN
INSERT INTO t4 VALUES (ins1, ins2, ind)"
"END|
CALL bug18293(""Foo's a Bar"", _cp932 0xED40ED41ED42, 47.93)"
"ALTER DATABASE DEFAULT CHARACTER SET latin2"
"RESET BINARY LOGS AND GTIDS"
" ¡¢£¤¥±º»¼½¾ 
05
15
25
35
4

SET NAMES gb18030"
"SELECT 1 as , 2 as , 3 as , 4 as , 5 as , 6 as , 7 as , 8 as "
"INSERT INTO abcÿdef VALUES (2)"
"SELECT * FROM abcÿdef"
"DROP TABLE IF EXISTS ÔÁÂÌÉÃÁ, t1, t2"
"CREATE TABLE `ÔÁÂÌÉÃÁ`
(
ÐÏÌÅ CHAR(32) CHARACTER SET koi8r NOT NULL COMMENT ""ËÏÍÍÅÎÔÁÒÉÊ ÐÏÌÑ""
) COMMENT ""ËÏÍÍÅÎÔÁÒÉÊ ÔÁÂÌÉÃÙ"""
"SHOW CREATE TABLE ÔÁÂÌÉÃÁ"
"SHOW FIELDS FROM ÔÁÂÌÉÃÁ"
"SHOW CREATE TABLE òàáëèöà"
"SHOW FIELDS FROM òàáëèöà"
"SHOW CREATE TABLE ÑÐ°Ð±Ð»Ð¸ÑÐ°"
"SHOW FIELDS FROM ÑÐ°Ð±Ð»Ð¸ÑÐ°"
"DROP TABLE ÔÁÂÌÉÃÁ"
"CREATE DATABASE ÔÅÓÔ"
"USE ÔÅÓÔ"
"SHOW TABLES IN ÔÅÓÔ"
"SHOW TABLES IN òåñò"
"DROP DATABASE ÔÅÓÔ"
"SELECT HEX('²@\') FROM DUAL"
"SELECT QUOTE('\')"
"CREATE VIEW v1 AS SELECT 1 from t1
WHERE t1.b <=> (SELECT a FROM t1 WHERE a < SOME(SELECT '1'))"
"INSERT INTO t1 VALUES (N'\\')"
"INSERT INTO t1 VALUES (N'Cote d\'Ivoire');
INSERT INTO t1 VALUES (_utf8mb3'Cote d\'Ivoire')"
"select concat(a, if(b>10, N'x', N'y')) from t1"
"INSERT INTO t1 VALUES (N'Cote d\'Ivoire');
INSERT INTO t1 VALUES (_utf8mb4'Cote d\'Ivoire')"
"my $ddir_perms= (stat($ENV{'DDIR'}))[2]"
"SET @null = NULL"
"EXECUTE ps USING @null"
"EOF




perl"
"my $log= $ENV{'MYSQLD_LOG'} or die"
"open(FILE, ""$log"") or die"
"print ""#     DD initialization error found $c_e times.\n"""
close(FILE)
"EOF

remove_file $MYSQLD_LOG"
"my $c_e= grep(/\[ERROR\] \[[^]]*\] \[[^]]*\] failed to set datadir/gi,<FILE>)"
"print ""#     Datadir error found $c_e times.\n"""
"my $c_e= grep(/File \..ibdata1: \'open\' returned OS error 71/gi,<FILE>)"
"my $log= $ENV{'ENV_MYSQLD_LOG'} or die"
"my $c_w= grep(/No data dictionary version number found./gi,<FILE>)"
"print ""#     Data Dictionary initialization error found $c_w times.\n"""
"EOF

remove_file $BOOTSTRAP_SQL"
"my $c_w= grep(/The used command is not allowed with this MySQL version/gi,<FILE>)"
"EOF



connect(root_con,localhost,root,,mysql)"
"my $c_w= grep(/Access to data dictionary table \'mysql.st_spatial_reference_systems\' is rejected/gi,<FILE>)"
"print ""#     Data Dictionary table access error found $c_w times.\n"""
"my $c_w= grep(/Access to data dictionary table \'mysql.tables\' is rejected/gi,<FILE>)"
"CREATE TABLE t1 LIKE information_schema.processlist"
"FLUSH TABLES mysql.events"
"CREATE TABLE t1 (a1 INTEGER,
a2 INTEGER GENERATED ALWAYS AS (a1 * 2) STORED,
a3 INTEGER GENERATED ALWAYS AS (a1 * 3) VIRTUAL,
KEY (a1) )"
"CREATE TABLE t1 (a INT NOT NULL,b INT NOT NULL, PRIMARY KEY USING BTREE (a))
ENGINE=MYISAM COMMENT=""TESTING"" PACK_KEYS=1 DELAY_KEY_WRITE=1
STATS_PERSISTENT=1 CHECKSUM=1 MIN_ROWS=1 MAX_ROWS=100"
"CREATE TABLE t2 (a INT NOT NULL,b INT NOT NULL, PRIMARY KEY USING BTREE (a))
ENGINE=MYISAM COMMENT=""TESTING"" PACK_KEYS=0 DELAY_KEY_WRITE=1
STATS_PERSISTENT=1 CHECKSUM=1 MIN_ROWS=1 MAX_ROWS=100"
"CREATE TEMPORARY TABLE t1 (
a INTEGER NOT NULL DEFAULT 1,
b INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
c INTEGER,
d INTEGER GENERATED ALWAYS AS (a * 2) STORED,
e POINT NOT NULL SRID 0,
f CHAR(30),
g INT,
h TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
KEY(g), SPATIAL KEY(e), FULLTEXT(f)) engine=myisam"
"REVOKE ALL ON db1.v1 FROM testuser1@localhost"
"REVOKE ALL ON db1.t1 FROM testuser1@localhost"
"CREATE TABLE t1(ËÏÌ INT)"
"CREATE VIEW v1 AS
SELECT 'ÔÅÓÔ' AS c1, ËÏÌ AS c2
FROM t1"
"CREATE PROCEDURE p1(
INOUT ÐÁÒÁÍ1 CHAR(10),
OUT ÐÁÒÁÍ2 CHAR(10))
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10);

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION(ÐÁÒÁÍ1) AS c2,
COLLATION(ÐÁÒÁÍ2) AS c3;

SELECT
COLLATION('ÔÅËÓÔ') AS c4,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c5,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET ÐÁÒÁÍ1 = 'a';
SET ÐÁÒÁÍ2 = 'b';
END"
"CREATE PROCEDURE p2(
INOUT ÐÁÒÁÍ1 CHAR(10) CHARACTER SET utf8mb3,
OUT ÐÁÒÁÍ2 CHAR(10) CHARACTER SET utf8mb3)
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION(ÐÁÒÁÍ1) AS c2,
COLLATION(ÐÁÒÁÍ2) AS c3;

SELECT
COLLATION('ÔÅËÓÔ') AS c4,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c5,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET ÐÁÒÁÍ1 = 'a';
SET ÐÁÒÁÍ2 = 'b';
END"
"CREATE PROCEDURE mysqltest2.p3(
INOUT ÐÁÒÁÍ1 CHAR(10),
OUT ÐÁÒÁÍ2 CHAR(10))
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10);

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION(ÐÁÒÁÍ1) AS c2,
COLLATION(ÐÁÒÁÍ2) AS c3;

SELECT
COLLATION('ÔÅËÓÔ') AS c4,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c5,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET ÐÁÒÁÍ1 = 'a';
SET ÐÁÒÁÍ2 = 'b';
END"
"CREATE PROCEDURE mysqltest2.p4(
INOUT ÐÁÒÁÍ1 CHAR(10) CHARACTER SET utf8mb3,
OUT ÐÁÒÁÍ2 CHAR(10) CHARACTER SET utf8mb3)
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION(ÐÁÒÁÍ1) AS c2,
COLLATION(ÐÁÒÁÍ2) AS c3;

SELECT
COLLATION('ÔÅËÓÔ') AS c4,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c5,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET ÐÁÒÁÍ1 = 'a';
SET ÐÁÒÁÍ2 = 'b';
END"
"CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10);

INSERT INTO log VALUES(COLLATION(ÐÅÒÅÍ1));
INSERT INTO log VALUES(COLLATION('ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @a1 = 'ÔÅËÓÔ';
SET @a1 = _koi8r    'ÔÅËÓÔ';
SET @a2 = _utf8mb3 'ÑÐµÐºÑÑ';
END"
"CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROW
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

INSERT INTO log VALUES(COLLATION(ÐÅÒÅÍ1));
INSERT INTO log VALUES(COLLATION('ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @b1 = 'ÔÅËÓÔ';
SET @b1 = _koi8r    'ÔÅËÓÔ';
SET @b2 = _utf8mb3 'ÑÐµÐºÑÑ';
END"
"CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROW
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10);

INSERT INTO log VALUES(COLLATION(ÐÅÒÅÍ1));
INSERT INTO log VALUES(COLLATION('ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @a1 = 'ÔÅËÓÔ';
SET @a1 = _koi8r    'ÔÅËÓÔ';
SET @a2 = _utf8mb3 'ÑÐµÐºÑÑ';
END"
"CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROW
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

INSERT INTO log VALUES(COLLATION(ÐÅÒÅÍ1));
INSERT INTO log VALUES(COLLATION('ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @b1 = 'ÔÅËÓÔ';
SET @b1 = _koi8r    'ÔÅËÓÔ';
SET @b2 = _utf8mb3 'ÑÐµÐºÑÑ';
END"
"CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10);

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION('ÔÅËÓÔ') AS c2,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c3,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION('ÔÅËÓÔ') AS c2,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c3,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION('ÔÅËÓÔ') AS c2,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c3,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE ÐÅÒÅÍ1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(ÐÅÒÅÍ1) AS c1,
COLLATION('ÔÅËÓÔ') AS c2,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c3,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE TABLE t1(ÐºÐ¾Ð» INT)"
"CREATE VIEW v1 AS
SELECT 'ÑÐµÑÑ' AS c1, ÐºÐ¾Ð» AS c2
FROM t1"
"CREATE PROCEDURE p1(
INOUT Ð¿Ð°ÑÐ°Ð¼1 CHAR(10),
OUT Ð¿Ð°ÑÐ°Ð¼2 CHAR(10))
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10);

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION(Ð¿Ð°ÑÐ°Ð¼1) AS c2,
COLLATION(Ð¿Ð°ÑÐ°Ð¼2) AS c3;

SELECT
COLLATION('ÑÐµÐºÑÑ') AS c4,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c5,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET Ð¿Ð°ÑÐ°Ð¼1 = 'a';
SET Ð¿Ð°ÑÐ°Ð¼2 = 'b';
END"
"CREATE PROCEDURE p2(
INOUT Ð¿Ð°ÑÐ°Ð¼1 CHAR(10) CHARACTER SET utf8mb3,
OUT Ð¿Ð°ÑÐ°Ð¼2 CHAR(10) CHARACTER SET utf8mb3)
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION(Ð¿Ð°ÑÐ°Ð¼1) AS c2,
COLLATION(Ð¿Ð°ÑÐ°Ð¼2) AS c3;

SELECT
COLLATION('ÑÐµÐºÑÑ') AS c4,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c5,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET Ð¿Ð°ÑÐ°Ð¼1 = 'a';
SET Ð¿Ð°ÑÐ°Ð¼2 = 'b';
END"
"CREATE PROCEDURE mysqltest2.p3(
INOUT Ð¿Ð°ÑÐ°Ð¼1 CHAR(10),
OUT Ð¿Ð°ÑÐ°Ð¼2 CHAR(10))
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10);

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION(Ð¿Ð°ÑÐ°Ð¼1) AS c2,
COLLATION(Ð¿Ð°ÑÐ°Ð¼2) AS c3;

SELECT
COLLATION('ÑÐµÐºÑÑ') AS c4,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c5,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET Ð¿Ð°ÑÐ°Ð¼1 = 'a';
SET Ð¿Ð°ÑÐ°Ð¼2 = 'b';
END"
"CREATE PROCEDURE mysqltest2.p4(
INOUT Ð¿Ð°ÑÐ°Ð¼1 CHAR(10) CHARACTER SET utf8mb3,
OUT Ð¿Ð°ÑÐ°Ð¼2 CHAR(10) CHARACTER SET utf8mb3)
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION(Ð¿Ð°ÑÐ°Ð¼1) AS c2,
COLLATION(Ð¿Ð°ÑÐ°Ð¼2) AS c3;

SELECT
COLLATION('ÑÐµÐºÑÑ') AS c4,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c5,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c6,
@@collation_connection AS c7,
@@character_set_client AS c8;

SET Ð¿Ð°ÑÐ°Ð¼1 = 'a';
SET Ð¿Ð°ÑÐ°Ð¼2 = 'b';
END"
"CREATE TRIGGER trg1 BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10);

INSERT INTO log VALUES(COLLATION(Ð¿ÐµÑÐµÐ¼1));
INSERT INTO log VALUES(COLLATION('ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @a1 = 'ÑÐµÐºÑÑ';
SET @a2 = _utf8mb3 'ÑÐµÐºÑÑ';
SET @a3 = _koi8r    'ÔÅËÓÔ';
END"
"CREATE TRIGGER trg2 AFTER INSERT ON t1 FOR EACH ROW
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

INSERT INTO log VALUES(COLLATION(Ð¿ÐµÑÐµÐ¼1));
INSERT INTO log VALUES(COLLATION('ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @b1 = 'ÑÐµÐºÑÑ';
SET @b2 = _utf8mb3 'ÑÐµÐºÑÑ';
SET @b3 = _koi8r    'ÔÅËÓÔ';
END"
"CREATE TRIGGER mysqltest2.trg3 BEFORE INSERT ON mysqltest2.t1 FOR EACH ROW
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10);

INSERT INTO log VALUES(COLLATION(Ð¿ÐµÑÐµÐ¼1));
INSERT INTO log VALUES(COLLATION('ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @a1 = 'ÑÐµÐºÑÑ';
SET @a2 = _utf8mb3 'ÑÐµÐºÑÑ';
SET @a3 = _koi8r    'ÔÅËÓÔ';
END"
"CREATE TRIGGER mysqltest2.trg4 AFTER INSERT ON mysqltest2.t1 FOR EACH ROW
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

INSERT INTO log VALUES(COLLATION(Ð¿ÐµÑÐµÐ¼1));
INSERT INTO log VALUES(COLLATION('ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_utf8mb3 'ÑÐµÐºÑÑ'));
INSERT INTO log VALUES(COLLATION(_koi8r    'ÔÅËÓÔ'));
INSERT INTO log VALUES(@@collation_connection);
INSERT INTO log VALUES(@@character_set_client);

SET @b1 = 'ÑÐµÐºÑÑ';
SET @b2 = _utf8mb3 'ÑÐµÐºÑÑ';
SET @b3 = _koi8r    'ÔÅËÓÔ';
END"
"CREATE EVENT ev1 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10);

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION('ÑÐµÐºÑÑ') AS c2,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c3,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE EVENT ev2 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION('ÑÐµÐºÑÑ') AS c2,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c3,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE EVENT mysqltest2.ev3 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION('ÑÐµÐºÑÑ') AS c2,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c3,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE EVENT mysqltest2.ev4 ON SCHEDULE AT '2030-01-01 00:00:00' DO
BEGIN
DECLARE Ð¿ÐµÑÐµÐ¼1 CHAR(10) CHARACTER SET utf8mb3;

SELECT
COLLATION(Ð¿ÐµÑÐµÐ¼1) AS c1,
COLLATION('ÑÐµÐºÑÑ') AS c2,
COLLATION(_utf8mb3 'ÑÐµÐºÑÑ') AS c3,
COLLATION(_koi8r    'ÔÅËÓÔ') AS c4,
@@collation_connection AS c5,
@@character_set_client AS c6;
END"
"CREATE TABLE t3 LIKE t1"
"CREATE TABLE t1 (i INT, b char(255) DEFAULT (sha2(i, 0)), j INT GENERATED ALWAYS AS (i*2))"
"CREATE TABLE IF NOT EXISTS D1 (i2 INT DEFAULT 568447044, d1 DOUBLE,
d2 DOUBLE DEFAULT 0.0, c2 CHAR(255),
def2 DOUBLE DEFAULT( i2 DIV d2 ),
v1 INT AS ( d2 = c2 % ASIN( d1 ) > i2 ) VIRTUAL)"
"CREATE TABLE IF NOT EXISTS D1 (def2 DOUBLE DEFAULT( 100 DIV 0 ),
v1 INT AS (1) VIRTUAL)"
"ALTER TABLE t1 ADD COLUMN b INT DEFAULT (a), ADD COLUMN c INT GENERATED ALWAYS AS (-b) STORED"
"ALTER TABLE t2 ADD COLUMN b INT DEFAULT (a), ADD COLUMN c INT GENERATED ALWAYS AS (-b) STORED, ALGORITHM=COPY"
"ALTER TABLE t1 ADD COLUMN b INT DEFAULT (a),
ADD COLUMN c INT GENERATED ALWAYS AS (-b) STORED,
ADD COLUMN d INT DEFAULT (c),
ADD COLUMN e INT GENERATED ALWAYS AS (-d) STORED"
"ALTER TABLE t2 ADD COLUMN b INT DEFAULT (a),
ADD COLUMN c INT GENERATED ALWAYS AS (-b) STORED,
ADD COLUMN d INT DEFAULT (c),
ADD COLUMN e INT GENERATED ALWAYS AS (-d) STORED,
ALGORITHM=COPY"
"CREATE TABLE t (a INT,
b INT,
c INT DEFAULT 77,
d INT GENERATED ALWAYS AS (DEFAULT(c)))"
"CREATE TABLE t (a INT,
b INT GENERATED ALWAYS AS (a*5))"
"CREATE TRIGGER tr1 AFTER DELETE ON t1 FOR EACH ROW
BEGIN
INSERT INTO t1 SELECT * FROM t1 AS A"
"CREATE TABLE t (
a INT,
b INT,
c TIMESTAMP GENERATED ALWAYS AS (65),
UNIQUE KEY (a, b),
UNIQUE KEY (c, a)
)"
perl
"my $logf= $ENV{'LOGF'} or die ""LOGF not set"""
"open(FILE, ""$logf"") or die(""Unable to open $logf: $!\n"")"
"my $count_warnings= grep(/\[Warning\] \[[^]]*\] \[[^]]*\] The syntax 'plugin-validate-password-length' is deprecated and will be removed in a future release\. Please use validate-password-length instead\./gi,<FILE>)"
"my $count_warnings= $count_warnings"
"print ""Deprecation warning count : $count_warnings\n"""
"select * from (select * from t1 intersect all select * from t1 order by a,b limit 2) a"
"select * from (select * from t1 except all select * from t1 limit 2) a"
"SELECT  table1.col_date_key AS field1
FROM
C AS table1
WHERE
(table1.col_int_key <=ANY
( SELECT SUBQUERY1_t1.col_int_key
FROM viewC AS SUBQUERY1_t1
WHERE SUBQUERY1_t1.col_varchar_10_key <= table1.col_varchar_10_key
)
)
"
"CREATE TABLE t (
a INTEGER GENERATED ALWAYS AS (1) VIRTUAL,
KEY (a)
) ENGINE = InnoDB"
"SELECT f1
FROM t1 JOIN
LATERAL (SELECT (t1.f1 + t2.f1) AS f2
FROM t1 AS t2
GROUP BY f2) AS dt
WHERE f2 = 9"
"create table t12 like t11"
"explain select dt.a from t1, lateral (select t1.a from t2) dt"
"explain SELECT * FROM t1
JOIN
lateral (select t1.a) as dt ON t1.a=dt.a
JOIN
lateral (select dt.a) as dt1 ON dt.a=dt1.a"
"select t1.a, dt.a from t1, lateral (select t1.a+t2.a as a from t2) dt"
"select t1.a, dt.a from t1, lateral (select t2.a as a from t2 having t1.a) dt"
"create view v1 as
select t1.a as f1, dt.a as f2
from t1, lateral (select t1.a+t2.a as a from t2) dt"
"SELECT COUNT(*) FROM t1 GROUP BY t1.a  HAVING t1.a IN (SELECT t3.a
FROM t1 AS t3 WHERE t3.b IN (SELECT b FROM t2, lateral (select t1.a) dt))"
"select vq1.b,dt.b from v1 vq1, lateral (select vq1.b) dt"
"select b from v1 vq1, lateral (select count(*) from v1 vq2 having vq1.b = 3) dt"
"SELECT
/*+ SET_VAR(optimizer_switch = 'materialization=off,semijoin=off') */
* FROM t1 AS ta, lateral (select 1 WHERE ta.a IN (SELECT b FROM t2 AS tb                WHERE tb.b >= SOME(SELECT SUM(tc.a) as sg FROM t1 as tc                                   GROUP BY tc.b                                   HAVING ta.a=tc.b))) dt"
"select (select f from lateral (select max(t1.a) as f) as dt) as g from t1"
"select t1.a, f from t1, lateral (select max(t1.a) as f) as dt"
"select * from t1,
lateral (with qn as (select t1.a) select (select max(a) from qn)) as dt"
"SELECT * FROM t1, LATERAL ( SELECT MAX(1) FROM t2 GROUP BY t1.f1 ) AS l1"
"SELECT STD(0) FROM t2, LATERAL ( SELECT f1 FROM t1 GROUP BY f2,f1 ) AS d1"
"SELECT * FROM t1 JOIN LATERAL (
SELECT GROUP_CONCAT(t.id) AS c FROM t2 t WHERE (t.id = t1.id)
) d0 ON (1)"
"EXPLAIN SELECT * FROM t1 JOIN LATERAL (SELECT a+t1.a from t2 GROUP BY a) AS dt"
"SELECT * FROM t1 JOIN LATERAL (SELECT a+t1.a from t2 GROUP BY a) AS dt"
"SELECT *
FROM
t1
LEFT JOIN (
t1 AS t2
LEFT JOIN t1 AS t3 ON TRUE
) ON TRUE,
LATERAL (
SELECT SUM(t1.a), t2.a FROM t1
) AS d1"
"SELECT * FROM t1 AS tbl1
LEFT JOIN t1 AS tbl3 ON FALSE WHERE tbl1.id NOT IN
(SELECT id FROM t1 AS tbl2 JOIN LATERAL
(SELECT 1 FROM t2 WHERE id = tbl2.id LIMIT 10) AS d1)"
"SELECT /*+ JOIN_PREFIX(tbl1, tbl2) */ * FROM t1 AS tbl1
LEFT JOIN t1 AS tbl3 ON FALSE WHERE tbl1.id NOT IN
(SELECT id FROM t1 AS tbl2 JOIN LATERAL
(SELECT 1 FROM t2 WHERE id = tbl2.id LIMIT 10) AS d1)"
"SELECT t3.b
FROM
t AS t1,
t AS t2,
LATERAL (SELECT DISTINCT * FROM t WHERE t2.x <> 0) AS t3
WHERE t1.x = t2.x AND t2.x = t3.x ORDER BY t3.x"
"EXPLAIN FORMAT=TREE
SELECT 1 FROM t1, LATERAL (SELECT DISTINCT t1.x) AS dt, t2
WHERE t2.pk = dt.x"
"SELECT 1 FROM
t1,
LATERAL (SELECT DISTINCT t1.x) AS dt1,
LATERAL (SELECT DISTINCT dt1.x) AS dt2
WHERE dt1.x = dt2.x"
"CREATE USER u1@192.129.12.11"
"CREATE DEFINER = u1@192.129.12.11 VIEW v3 as SELECT * FROM t1"
"DROP USER u1@192.129.12.11"
"SHOW REPLICA STATUS"
"SHOW BINARY LOG STATUS"
"SHOW REPLICAS"
"create table $t(id int)"
"drop table $t"
"create table t(id int, $id int, $id2 int, `$$id` int, $ int, $1 int,
`$$$` int, id$$$ int, 1$ int, `$$` int, _$ int, b$$lit$$ int)"
"select id+$id+$id from t"
"create view $view as select id, $id2 from t"
"select * from $view"
"prepare $stmt from 'select `$$id`, $id, `$$` from t'"
"execute $stmt"
"set @sql:=concat('select `$$id`, $id, `$$` from ', @table_name)"
"prepare dynamic_stmt from @sql"
"create schema $s"
"create table $s.$t($id int)"
"select $s.$t.$id from $s.$t"
"select $s.`$t`.`$id` from $s.`$t`"
"create procedure $p(in $i int)
begin
declare $id1 int;
select b$$lit$$ into $id1 from t where id = $i;
end"
"call $p(3)"
"create function $f($i int) returns int no sql
begin
return `$i` * 2;
end"
"select $f(2)"
"create role $username@$hostname.$domainname.com"
"drop role $username@$hostname.$domainname.com"
"set @$myvar = true"
"select count(*) from t where @$myvar"
"select 8.0 $p, 8.4$p, .0$p, 8.$p, 8.p"
"create table `#mysql50#abc``def` ( id int )"
"EOF

DROP DATABASE bug19573998"
"my $file= $ENV{'GREP_FILE'} or die(""grep file not set"")"
"my $pattern= $ENV{'GREP_PATTERN'} or die(""pattern is not set"")"
"open(FILE, ""$file"") or die(""Unable to open $file: $!"")"
"rename $file, ""$file~"""
"open(FILE, "">"", ""$file"") or die(""Unable to open file: $!"")"
"EOF

SET GLOBAL log_error_verbosity = @old_log_error_verbosity"
"create event ðóóò21 on schedule every '50:23:59:95' day_second COMMENT 'òîâà å 1251 êîìåíòàð' do select 1"
"SHOW CREATE EVENT ðóóò21"
"create event Ð·Ð°Ð´Ð°ÑÐºÐ° on schedule every 123 minute starts now() ends now() + interval 1 month do select 1"
"drop event Ð·Ð°Ð´Ð°ÑÐºÐ°"
"create event Ð·Ð°ÐºÐ°ÑÐºÐ° on schedule every 10 hour do select get_lock(""test_lock1"", 20)"
"drop event Ð·Ð°ÐºÐ°ÑÐºÐ°"
"create event Ð·Ð°ÐºÐ°ÑÐºÐ° on schedule every 10 hour do select get_lock(""test_lock2"", 20)"
"create event Ð·Ð°ÐºÐ°ÑÐºÐ°21 on schedule every 10 hour do select get_lock(""test_lock2_1"", 20)"
"drop event Ð·Ð°ÐºÐ°ÑÐºÐ°21"
"create event Ð¸Ð¼Ñ_ÑÐ¾Ð±ÑÑÐ¸Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48 on schedule every 2 year do select 1"
"drop event Ð¸Ð¼Ñ_ÑÐ¾Ð±ÑÑÐ¸Ñ_Ð²_ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²ÐºÐµ_ÑÑÑ8_Ð´Ð»Ð¸Ð½Ð¾Ð¹_Ð±Ð¾Ð»ÑÑÐµ_ÑÐµÐ¼_48"
"CREATE EVENT äîëåí_ðåãèñòúð_1251 ON SCHEDULE EVERY 1 YEAR DO SELECT 100"
"DROP EVENT ÄîËåÍ_ðåãèñòúð_1251"
"CREATE EVENT Ð´Ð¾Ð»ÐµÐ½_ÑÐµÐ³Ð¸ÑÑÑÑ_ÑÑÑ8 ON SCHEDULE EVERY 3 YEAR DO SELECT 300"
"DROP EVENT ÐÐÐÐÐ_ÑÐµÐ³Ð¸ÑÑÑÑ_ÑÑÑ8"
"SHOW CREATE EVENT CaFÃ©"
"DROP EVENT CaFÃ©"
"CREATE EVENT Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_e ON SCHEDULE EVERY 2 YEAR DO SELECT 1"
"SHOW CREATE EVENT Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"DROP EVENT Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"CREATE EVENT cafÃ© ON SCHEDULE EVERY 2 YEAR DO SELECT 1"
disable_result_log
enable_query_log
"create table ÔÁÂ (ËÏÌ0 int, ËÏÌ1 int, key ÉÎÄ0 (ËÏÌ0), key ÉÎÄ01 (ËÏÌ0,ËÏÌ1))"
"insert into ÔÁÂ (ËÏÌ0) values (1)"
"insert into ÔÁÂ (ËÏÌ0) values (2)"
"explain select ËÏÌ0 from ÔÁÂ where ËÏÌ0=1"
"drop table ÔÁÂ"
"EXPLAIN ((SELECT a FROM t ORDER BY 1 LIMIT 3) ORDER BY -a LIMIT 2) ORDER BY a"
"CREATE TABLE t3 LIKE t2"
"EXPLAIN
DELETE LOW_PRIORITY QUICK IGNORE
FROM t1 PARTITION (p1)
WHERE c1 > 0
ORDER BY c2
LIMIT 10"
"EXPLAIN analyze FORMAT=TREE SELECT t1.a, GROUP_CONCAT(t2.b) AS b FROM t1 LEFT JOIN t2 ON t1.a=t2.a GROUP BY t1.a ORDER BY t1.b"
"EXPLAIN FORMAT=JSON INTO @var
SELECT 1 + 1 AS x FROM t GROUP BY x WITH ROLLUP HAVING x = 1"
"EXPLAIN FORMAT=JSON INTO @v1 SELECT * FROM t1 JOIN t2 ON i1 = i3 WHERE i2 = 2"
"EXPLAIN FORMAT=JSON INTO @v1 SELECT * FROM t1"
"EXPLAIN FORMAT=JSON INTO @v1 INSERT INTO t1 VALUES (4,5)"
"EXPLAIN FORMAT=JSON INTO @v1 INSERT INTO t1 SELECT * FROM t2"
"EXPLAIN FORMAT=JSON INTO @v1 UPDATE t1 SET i2 = i2 + 1 WHERE i1 = 1"
"EXPLAIN FORMAT=JSON INTO @v1 REPLACE t1 SELECT * FROM t2"
"EXPLAIN FORMAT=JSON INTO @v1 DELETE FROM t1"
"EXPLAIN FORMAT=JSON INTO @v1 UPDATE t1, t2 SET i1 = i1 - 1, i3 = i3 + 1"
"EXPLAIN FORMAT=JSON INTO @v1 DELETE t1, t2 FROM t1, t2"
"EXPLAIN FORMAT=JSON INTO @v1 SELECT /*+ SET_VAR(optimizer_switch='hypergraph_optimizer=OFF')*/ * FROM t1"
"EXPLAIN FORMAT=JSON INTO @v1 SELECT /*+ SET_VAR(optimizer_switch='hypergraph_optimizer=ON')*/ * FROM t1"
"EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN t2 USING ( a ),
LATERAL ( SELECT * FROM t3 WHERE t3.a = t2.a LIMIT 1 ) t3d,
LATERAL ( SELECT * FROM t3 WHERE t3.a > t1.a LIMIT 1 ) t4d"
"EXPLAIN FORMAT=tree SELECT * FROM t1 LEFT JOIN (
t2 LEFT JOIN t3 USING ( a ) CROSS JOIN
LATERAL ( SELECT * FROM t4 WHERE t4.a = t3.a LIMIT 1 ) t4d
) ON t1.a = t4d.a"
"EXPLAIN FORMAT=TREE SELECT * FROM ( SELECT * FROM t1 LIMIT 2 OFFSET 1 ) AS alias1
WHERE f1 <= ANY ( SELECT f1 FROM t1 ) ORDER BY f1"
"EXPLAIN FORMAT=tree SELECT a FROM t1 WHERE a = ANY ( SELECT a FROM t1 WHERE b = 2 )"
"EXPLAIN FORMAT=tree SELECT a FROM t1 WHERE a = ANY ( SELECT MAX(a) FROM t1 WHERE b = 2 )"
"CREATE TABLE t1 (
col_int_key INTEGER,
col_json JSON,
KEY mv_idx ((CAST(col_json->'$[*]' AS CHAR(40) ARRAY)))
)"
"EXPLAIN FORMAT=tree SELECT /*+ NO_BNL(t1, t2) */ * FROM t2
JOIN t1 ON 1 WHERE (CAST(""1"" AS JSON) MEMBER OF( t1.col_json->'$[*]'))"
"EXPLAIN ANALYZE FORMAT=TREE SELECT 1"
"EXPLAIN ANALYZE FORMAT=TREE SELECT * FROM t1 x1, t1 x2 WHERE x1.c=x2.d AND x1.d>900 AND x2.a=x2.b"
"print ""\nChecking 'INFO_SRC' and 'INFO_BIN'\n"""
"$dir_bin = $ENV{'MYSQL_BINDIR'}"
"$dir_docs =~ s|/lib|/share/doc|"
"$dir_docs = $dir_docs[0]"
"$found_revision = ""No line 'revision-id: .....'"""
"open(I_SRC,""<"",""$dir_docs/INFO_SRC"") or print ""Cannot open 'INFO_SRC' in '$dir_docs' (starting from bindir '$dir_bin')\n"""
"print ""INFO_SRC: $found_version / $found_revision\n"""
"$found_compiler = ""No line about compiler information"""
"$found_features = ""No line 'Feature flags'"""
"open(I_BIN,""<"",""$dir_docs/INFO_BIN"") or print ""Cannot open 'INFO_BIN' in '$dir_docs' (starting from bindir '$dir_bin')\n"""
"print ""INFO_BIN: $found_compiler / $found_features\n"""
"CREATE TABLE t2 (
pk INT PRIMARY KEY,
vc VARCHAR(1) NOT NULL,
gc INT GENERATED ALWAYS AS (1))"
"/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */"
"/*!40101 SET SQL_MODE=@OLD_SQL_MODE */"
echo
"REVOKE ALL PRIVILEGES ON db35380295.* FROM u1b35380295"
"FLUSH LOCAL TABLES test.t1, test.t2 for ExPoRt"
"FLUSH TABLE db1.t1 FOR EXPORT"
"FLUSH LOCAL TABLES test.t1 FOR EXPORT"
"CREATE TABLE t1(a INT PRIMARY KEY,
b INT GENERATED ALWAYS AS (a+1) VIRTUAL UNIQUE)"
"CREATE TABLE t2(a INT, b INT GENERATED ALWAYS AS (a+1) STORED UNIQUE)"
"CREATE TABLE t3(a INT, b INT GENERATED ALWAYS AS (a+1) STORED UNIQUE,
FOREIGN KEY (b) REFERENCES t1(a))"
"CREATE TABLE t3(a INT, b INT GENERATED ALWAYS AS (a+1) STORED UNIQUE,
FOREIGN KEY (a) REFERENCES t1(a))"
"CREATE TABLE t2(a INT, b INT GENERATED ALWAYS AS (a+1) VIRTUAL UNIQUE)"
"CREATE TABLE t2(fld1 INT NOT NULL, fld2 INT AS (fld1) VIRTUAL, KEY(fld2),
FOREIGN KEY(fld1) REFERENCES t1(fld1) ON UPDATE CASCADE)"
"CREATE TABLE child2 LIKE child"
"CREATE TABLE IF NOT EXISTS parent LIKE parent_source"
"CREATE TABLE child (base INT, fk INT GENERATED ALWAYS AS (base+1) VIRTUAL)"
"CREATE TABLE self (pk INT PRIMARY KEY, base INT,
fk INT GENERATED ALWAYS AS (base+1) VIRTUAL)"
"CREATE TABLE child (base INT, fk INT GENERATED ALWAYS AS (base+1) STORED,
FOREIGN KEY (fk) REFERENCES parent(pk))"
"CREATE TABLE self (pk INT PRIMARY KEY, base INT,
fk INT GENERATED ALWAYS AS (base+1) STORED,
FOREIGN KEY (fk) REFERENCES self(pk))"
"CREATE TABLE parent (base INT, pk INT GENERATED ALWAYS AS (base+1) VIRTUAL, UNIQUE KEY(pk))"
"CREATE TABLE self (base INT, pk INT GENERATED ALWAYS AS (base+1) VIRTUAL, fk INT,
UNIQUE KEY(pk))"
"CREATE TABLE parent (base INT, pk INT GENERATED ALWAYS AS (base+1) STORED, UNIQUE KEY(pk))"
"CREATE TABLE self (base INT, pk INT GENERATED ALWAYS AS (base+1) STORED, fk INT,
UNIQUE KEY(pk), FOREIGN KEY (fk) REFERENCES self(pk))"
"CREATE TABLE parent0 (base INT, pk INT GENERATED ALWAYS AS (base+1) VIRTUAL, UNIQUE KEY(pk))"
"/*!50101 CREATE TABLE child (fk INT, FOREIGN KEY (fk) REFERENCES parent(pk)) */"
"/*! ALTER TABLE child ADD FOREIGN KEY (fk) REFERENCES parent(pk) */"
"CREATE TABLE t1 (f1 INT PRIMARY KEY, f2 INT, F3 INT AS (f1+1) VIRTUAL,
FOREIGN KEY(f2) REFERENCES t2(f3))"
"CREATE TABLE t1 (f1 VARCHAR(10), f2 VARCHAR(10),
f3 VARCHAR(30) AS (CONCAT(f1, f2)) VIRTUAL,
UNIQUE INDEX(f3))"
"CREATE TABLE referencing (f1 VARCHAR(10), f2 VARCHAR(10),
f3 VARCHAR(30) AS (CONCAT(f1, f2)) STORED REFERENCES referenced(f1))"
"CREATE TABLE referenced (f1 VARCHAR(10) PRIMARY KEY, f2 VARCHAR(10),
f3 VARCHAR(30) AS (CONCAT(f1, f2)) VIRTUAL, UNIQUE KEY(f3))"
"CREATE TABLE referenced (f1 VARCHAR(10) PRIMARY KEY, f2 VARCHAR(10),
f3 VARCHAR(30) AS (CONCAT(f1, f2)) STORED, UNIQUE KEY(f3))"
"CREATE TABLE referencing (f1 VARCHAR(10),
f2 VARCHAR(10) REFERENCES referenced(f1) ON DELETE SET NULL,
f3 VARCHAR(30) AS (CONCAT(f1, f2)) VIRTUAL)"
"CREATE TABLE referenced (f1 VARCHAR(10), f2 VARCHAR(10),
f3 VARCHAR(30) AS (CONCAT(f1, f2)) STORED, PRIMARY KEY(f3))"
"CREATE TABLE child_copy LIKE child"
"CREATE TABLE parent LIKE parent_base"
"CREATE TABLE parent (i INT, j INT,
d INT GENERATED ALWAYS AS (i) VIRTUAL,
e INT GENERATED ALWAYS AS (j) VIRTUAL,
PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e))"
"CREATE TABLE self (i INT, j INT, i2 INT, j2 INT,
d INT GENERATED ALWAYS AS (i) VIRTUAL,
e INT GENERATED ALWAYS AS (j) VIRTUAL,
PRIMARY KEY (i), UNIQUE u(i,d), UNIQUE u1(i,j,e),
FOREIGN KEY (i2, j2) REFERENCES self (i, j))"
"create table t1 (
a int not null,
b int not null references t2 (c),
primary key (a,b),
foreign key (a,b) references t3 (c,d) on delete no action
on update no action,
foreign key (a,b) references t3 (c,d) on update cascade,
foreign key (a,b) references t3 (c,d) on delete set default,
foreign key (a,b) references t3 (c,d) on update set null) engine=myisam"
"SET @KEYS=REPEAT('c', 16)"
"SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR"
"SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR"
"SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS), @KEYS)=@ENCSTR FROM t1"
"SELECT AES_DECRYPT(AES_ENCRYPT(@ENCSTR, @KEYS, @IV), @KEYS, @IV)=@ENCSTR FROM t1"
"SET @KEYS=RANDOM_BYTES(1)"
"SET @KEYS=RANDOM_BYTES(1024)"
"SET @KEYS='helloworld'"
"select AES_ENCRYPT(@ENCSTR, @KEYS, @IV)=AES_ENCRYPT(@ENCSTR, @KEYS, @IV1)"
"SET @KEYS='helloworld1234567890'"
"INSERT INTO t1 values(AES_ENCRYPT(@ENCSTR, @KEYS, @IV))"
"SELECT AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR FROM t1"
"SELECT COALESCE (AES_DECRYPT(f1, @KEYS, @IV)=@ENCSTR,0) FROM t1"
"SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE 'UTC' AS DATETIME)"
"SELECT cast(TIMESTAMP'2019-10-10 10:11:12' AT TIME ZONE '+00:00' AS DATETIME)"
"SELECT cast(TIMESTAMP'2019-10-10 10:11:12+00:00' AT TIME ZONE '+00:00' AS DATETIME)"
"SELECT cast( a AT TIME ZONE '+00:00' AS DATETIME ) FROM t1"
enable_result_log
"SELECT ADDDATE(DATE'2021-01-01', INTERVAL 1 DAY)"
"SELECT ADDDATE(DATE'2021-01-01', INTERVAL 1 HOUR)"
"SELECT ADDDATE(TIMESTAMP'2021-01-01 00:00:00', INTERVAL 1 DAY)"
"SELECT ADDDATE(TIMESTAMP'2021-01-01 00:00:00', INTERVAL 1 HOUR)"
"SELECT DATE(ts) = CURRENT_DATE + INTERVAL '1' DAY AS is_tomorrow, TIME(ts)
FROM (SELECT ADDDATE(TIME'00:00:00', INTERVAL 1 DAY) AS ts) AS dt"
"SELECT ADDDATE(TIME'00:00:00', INTERVAL 1 HOUR)"
"DROP TABLE Ã¥Ã¤Ã¶, æ¥æ¬èª,  ð©¸½"
"select sum(all a),count(all a),avg(all a),std(all a),variance(all a),bit_or(all a),bit_and(all a),min(all a),max(all a),min(all c),max(all c) from t1"
"insert into t1 values('AME',0,'SEA',0.100,date'1942-02-19')"
"insert into t1 values('HBR',1,'SEA',0.085,date'1948-03-05')"
"insert into t1 values('BOT',2,'SEA',0.085,date'1951-11-29')"
"insert into t1 values('BMC',3,'SEA',0.085,date'1958-09-08')"
"insert into t1 values('TWU',0,'LAX',0.080,date'1969-10-05')"
"insert into t1 values('BDL',0,'DEN',0.080,date'1960-11-27')"
"insert into t1 values('DTX',1,'NYC',0.080,date'1961-05-04')"
"insert into t1 values('PLS',1,'WDC',0.075,date'1949-01-02')"
"insert into t1 values('ZAJ',2,'CHI',0.075,date'1960-06-15')"
"insert into t1 values('VVV',2,'MIN',0.075,date'1959-06-28')"
"insert into t1 values('GTM',3,'DAL',0.070,date'1977-09-23')"
"insert into t1 values('SSJ',null,'CHI',null,date'1974-03-19')"
"explain
select max(a5) from t1 where a5 < date'1970-01-01'"
"select max(a5) from t1 where a5 < date'1970-01-01'"
"SELECT a,AVG(DISTINCT b) AS average FROM t1 GROUP BY a HAVING average > 50"
"SELECT AVG(DISTINCT col_int_nokey) FROM t1"
"SELECT AVG(DISTINCT outr.col_int_nokey) FROM t1 AS outr LEFT JOIN t1 AS outr2 ON
outr.col_int_nokey = outr2.col_int_nokey"
"UPDATE IGNORE e1 AS outr1, b1 AS outr2 SET outr1.col_date =
JSON_SET(outr1.col_date, CONCAT('$','[',1,']','.','cdate'), '2007-07-12')
WHERE outr1.pk <= ANY ( SELECT DISTINCT innr1.col_int_key AS y FROM bb4
AS innr2 LEFT JOIN bb4 AS innr1 ON (innr2.col_int_key <> innr1.col_int_key)
WHERE innr1.col_int_key= 4)"
"SELECT NULLIF(COALESCE(x, NULL), 0) FROM t EXCEPT SELECT 1"
"SELECT COALESCE(IF(x, NULL, NULL), x) FROM t EXCEPT SELECT 1"
"SELECT COALESCE(CASE WHEN x THEN NULL ELSE NULL END, x) FROM t EXCEPT SELECT 1"
"SELECT COALESCE(COALESCE(NULL, NULL), x) FROM t EXCEPT SELECT 1"
"INSERT INTO t1 VALUES
(NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL),
(1, 1.1, 1.1e100, '1', '1', DATE'2020-01-01', TIME'01:01:01',
TIMESTAMP'2020-01-01 01:01:01', '{""i"":1, ""s"":""1""}', '1', '""1""'),
(2, 2.2, 2.2e100, '2', '2', DATE'2020-02-02', TIME'02:02:02',
TIMESTAMP'2020-02-02 02:02:02', '{""i"":2, ""s"":""2""}', '2', '""2""'),
(3, 3.3, 3.3e100, '3', '3', DATE'2020-03-03', TIME'03:03:03',
TIMESTAMP'2020-03-03 03:03:03', '{""i"":3, ""s"":""3""}', '3', '""3""'),
(4, 4.4, 4.4e100, '4', '4', DATE'2020-04-04', TIME'04:04:04',
TIMESTAMP'2020-04-04 04:04:04', '{""i"":4, ""s"":""4""}', '4', '""4""'),
(5, 5.5, 5.5e100, '5', '5', DATE'2020-05-05', TIME'05:05:05',
TIMESTAMP'2020-05-05 05:05:05', '{""i"":5, ""s"":""5""}', '5', '""5""')"
"set @null = NULL"
"EXECUTE ps USING @null, @int_two, @int_five"
"EXECUTE ps USING @str_one, @null, @str_five"
"EXECUTE ps USING @null, @null, @null"
"EXECUTE ps USING @null, @dec_two, @dec_five"
"EXECUTE ps USING @null, @dbl_two, @dbl_five"
"EXECUTE ps USING @null, @str_two, @str_five"
"SELECT i8 FROM t1
WHERE d IN (DATE'2020-01-01', DATE'2020-02-02', DATE'2020-05-05')"
"EXECUTE ps USING @null, @date_two, @date_five"
"SELECT i8 FROM t1
WHERE t IN (TIME'01:01:01', TIME'02:02:02', TIME'05:05:05')"
"EXECUTE ps USING @null, @time_two, @time_five"
"SELECT i8 FROM t1
WHERE dt IN (TIMESTAMP'2020-01-01 01:01:01',
TIMESTAMP'2020-02-02 02:02:02',
TIMESTAMP'2020-05-05 05:05:05')"
"EXECUTE ps USING @null, @dt_two, @dt_five"
"EXECUTE ps USING @null, @json_two, @json_five"
"EXECUTE ps USING @null, @null, @null, @int_two, @dec_two, @str_two,
@int_five, @dec_five, @str_five"
"EXECUTE ps USING @null, @dec_one, @str_one, @int_two, @null, @str_two,
@int_five, @dec_five, @null"
"CREATE TABLE t(x VARCHAR(10),
gc INTEGER GENERATED ALWAYS AS (x LIKE 'abba' ESCAPE 'b'))"
exit
"SELECT r FROM t LEFT JOIN LATERAL (SELECT i, RAND(0) AS r) AS dt ON TRUE"
"SELECT TIMEDIFF(TIME('17:00:00'),TIME('17:00:00'))=TIME('00:00:00') AS 1Eq,
TIMEDIFF(TIME('17:59:00'),TIME('17:00:00'))=TIME('00:00:00') AS 1NEq1,
TIMEDIFF(TIME('18:00:00'),TIME('17:00:00'))=TIME('00:00:00') AS 1NEq2,
TIMEDIFF(TIME('17:00:00'),TIME('17:00:00'))=     '00:00:00'  AS 2Eq,
TIMEDIFF(TIME('17:59:00'),TIME('17:00:00'))=     '00:00:00'  AS 2NEq1,
TIMEDIFF(TIME('18:00:00'),TIME('17:00:00'))=     '00:00:00'  AS 2NEq2,
TIMEDIFF(TIME('17:00:00'),TIME('17:00:00'))=TIME(0)          AS 3Eq,
TIMEDIFF(TIME('17:59:00'),TIME('17:00:00'))=TIME(0)          AS 3NEq1,
TIMEDIFF(TIME('18:00:00'),TIME('17:00:00'))=TIME(0)          AS 3NEq2,
TIME(0) AS Time0, TIME('00:00:00') AS Time00, '00:00:00' AS Literal0000,
TIMEDIFF(TIME('17:59:00'),TIME('17:00:00')),
TIMEDIFF(TIME('17:00:00'),TIME('17:59:00'))"
"""',repeat('a',60),repeat('b',60),repeat('c',60),repeat('d',100)), '""');

select insert('txs',2,1,'hi'),insert('is ',4,0,'a'),insert('txxxxt',2,4,'es');
select replace('aaaa','a','b'),replace('aaaa','aa','b'),replace('aaaa','a','bb'),replace('aaaa','','b'),replace('bbbb','a','c');
select replace(concat(lcase(concat('THIS',' ','IS',' ','A',' ')),ucase('false'),' ','test'),'FALSE','REAL') ;
select soundex(''),soundex('he'),soundex('hello all folks'),soundex('#3556 in bugdb');
select 'mood' sounds like 'mud';
select 'Glazgo' sounds like 'Liverpool';
select null sounds like 'null';
select 'null' sounds like null;
select null sounds like null;
select crc32(""123"");
select sha('abc');
select sha1('abc');
select aes_decrypt(aes_encrypt('abc','1'),'1');
select aes_decrypt(aes_encrypt('abc','1'),1);
select aes_encrypt(NULL,""a"");
select aes_encrypt(""a"",NULL);
select aes_decrypt(NULL,""a"");
select aes_decrypt(""a"",NULL);
select aes_decrypt(""a"",""a"");
select aes_decrypt(aes_encrypt("""",""a""),""a"");
select repeat('monty',5),concat('*',space(5),'*');
select reverse('abc'),reverse('abcd');
select rpad('a',4,'1'),rpad('a',4,'12'),rpad('abcd',3,'12'), rpad(11, 10 , 22), rpad(""ab"", 10, 22);
select lpad('a',4,'1'),lpad('a',4,'12'),lpad('abcd',3,'12'), lpad(11, 10 , 22);
select rpad(741653838,17,'0'),lpad(741653838,17,'0');
select rpad('abcd',7,'ab'),lpad('abcd',7,'ab');
select rpad('abcd',1,'ab'),lpad('abcd',1,'ab');
select rpad('STRING', 20, CONCAT('p','a','d') );
select lpad('STRING', 20, CONCAT('p','a','d') );

select LEAST(NULL,'HARRY','HARRIOT',NULL,'HAROLD'),GREATEST(NULL,'HARRY','HARRIOT',NULL,'HAROLD');
select least(1,2,3) | greatest(16,32,8), least(5,4)*1,greatest(-1.0,1.0)*1,least(3,2,1)*1.0,greatest(1,1.1,1.0),least(""10"",9),greatest(""A"",""B"",""0"");

select quote('\'\"\\test')"
"', 2),substring_index(""1abcd;2abcd;3abcd;4abcd"", '"
"', -2);

explain select sha('abc');
explain select sha1('abc');
explain select soundex('');
explain select 'mood' sounds like 'mud';
explain select aes_decrypt(aes_encrypt('abc','1'),'1');
explain select concat('*',space(5),'*');
explain select reverse('abc');
explain select rpad('a',4,'1');
explain select lpad('a',4,'1');
explain select concat_ws(',','',NULL,'a');
explain select make_set(255,_latin2'a', _latin2'b', _latin2'c');
explain select elt(2,1);
explain select locate(""a"",""b"",2);
explain select format(130,10);
explain select char(0);
explain select conv(130,16,10);
explain select hex(130);
explain select binary 'HE';
explain select export_set(255,_latin2'y', _latin2'n', _latin2' ');
explain select FIELD('b' COLLATE latin1_bin,'A','B');
explain select FIND_IN_SET(_latin1'B', _latin1'a,b,c,d');
explain select collation(conv(130,16,10));
explain select coercibility(conv(130,16,10));
explain select length('\n\t\r\b\0\_\%\\');
explain select bit_length('\n\t\r\b\0\_\%\\');
explain select bit_length('\n\t\r\b\0\_\%\\');
explain select concat('monty',' was here ','again');
explain select length('hello');
explain select char(ascii('h'));
explain select ord('h');
explain select quote(1/0);
explain select crc32(""123"");
explain select replace('aaaa','a','b');
explain select insert('txs',2,1,'hi');
explain select left(_latin2'a',1);
explain select right(_latin2'a',1);
explain select lcase(_latin2'a');
explain select ucase(_latin2'a');
explain select SUBSTR('abcdefg',3,2);
explain select substring_index(""1abcd;2abcd;3abcd;4abcd"", '"
"""',repeat('a',60),
repeat('b',60),
repeat('c',60),
repeat ('d',100)),'""');
SELECT
CONCAT('""',CONCAT_WS('"""
"""',repeat('a',60),
repeat('b',60),
repeat('c',60),
repeat ('d',100)),'""');
SELECT
CONCAT_WS('""',CONCAT_WS('"""
"""',repeat('a',60),
repeat('b',60),
repeat('c',60),
repeat ('d',100)),'""');
SELECT
CONCAT('""',CONCAT('"""
"CREATE TABLE t1 AS
SELECT 5 AS c1, 5 AS c2, 5 AS c3, 5 AS c4, 20010101 AS c5, 010101 AS c6,
010101 AS c7, 20010101 AS c8, 5.55 AS c11, 5.5 AS c12, 5.5 AS c13,
010101.5 AS c14, 5.5 AS c15, 010101.5 as c16, 5.5e5 as c21,
2004041e1 as c22, 150505.0e5 AS c23, 2004041e1 AS c24, '010101' AS c31,
'5' AS c32, '010101' AS c33, date '2005-05-05' AS c41,
date '2005-05-05' AS c42, time '05:05:05.555555' AS c51,
x'c3a5' AS c61, x'c3a5' AS c62, _utf8mb4 x'c3a5' AS c63,
_utf8mb4 x'c3a5' AS c64, JSON_OBJECT('a', 1) as c71
UNION
SELECT -5, 5.5, 5.5e5, '5', date '2005-05-05', time '05:05:05.555555',
timestamp '2005-05-05 05:05:05.555555', NOW(0), 88.8,
5.5e5, '5', date '2005-05-05', time '05:05:05.555555',
timestamp '2005-05-05 05:05:05.555555',
'5', date '2005-05-05', time '05:05:05.555555',
timestamp '2005-05-05 05:05:05.555555',
date '2005-05-05', time '05:05:05.555555',
timestamp '2005-05-05 05:05:05.555555',
time '05:05:05.555555', timestamp '2005-05-05 05:05:05.555555',
timestamp '2005-05-05 05:05:05.555555', '1', _binary '1', '1',
_binary '1', NULL"
"CREATE TABLE t2 AS
SELECT COALESCE(5, -5) AS c1,
COALESCE(5, 5.5) AS c2,
COALESCE(5, 5.5e5) AS c3,
COALESCE(5, '5') AS c4,
COALESCE(20010101, date '2005-05-05') AS c5,
COALESCE(010101, time '05:05:05.555555') AS c6,
COALESCE(010101, timestamp '2005-05-05 05:05:05.555555') AS c7,
COALESCE(20010101, NOW(0)) AS c8,
COALESCE(5.55, 88.8) AS c11,
COALESCE(5.5, 5.5e5) AS c12,
COALESCE(5.5, '5') AS c13,
COALESCE(010101.5, date '2005-05-05') AS c14,
COALESCE(5.5, time '05:05:05.555555') AS c15,
COALESCE(010101.5, timestamp '2005-05-05 05:05:05.555555') AS c16,
COALESCE(5.5e5, '5') AS c21,
COALESCE(2004041e1, date '2005-05-05') AS c22,
COALESCE(150505.0e5, time '05:05:05.555555') AS c23,
COALESCE(2004041e1, timestamp '2005-05-05 05:05:05.555555') AS c24,
COALESCE('010101', date '2005-05-05') AS c31,
COALESCE('5', time '05:05:05.555555') AS c32,
COALESCE('010101', timestamp '2005-05-05 05:05:05.555555') AS c33,
COALESCE(date '2005-05-05', time '05:05:05.555555') AS c41,
COALESCE(date '2005-05-05', timestamp '2005-05-05 05:05:05.555555') AS
c42,
COALESCE(time '05:05:05.555555', timestamp '2005-05-05
05:05:05.555555') AS c51,
COALESCE(x'c3a5', '1') AS c61,
COALESCE(x'c3a5', _binary '1') AS c62,
COALESCE(_utf8mb4 x'c3a5', '1') AS c63,
COALESCE(_utf8mb4 x'c3a5', _binary '1') AS c64,
COALESCE(JSON_OBJECT('a', 1), NULL) AS c71"
"select 1 from t1 where 1 < some (select cast(a as datetime) from t1)"
"CREATE TABLE t1(col1 varchar(100), gcol2 binary(16) AS (uuid_to_bin(col1)) virtual, index(gcol2))"
"CREATE TABLE t2(col1 binary(16), gcol2 varchar(36) AS (bin_to_uuid(col1)) virtual, index(col1), index(gcol2))"
"select hex(weight_string('aa' as binary(3)))"
"SELECT HEX(WEIGHT_STRING('ab' AS BINARY(1000000)))"
"CREATE VIEW v5 AS SELECT WEIGHT_STRING(a AS BINARY(2)) AS b FROM t1"
"CREATE VIEW v6 AS SELECT WEIGHT_STRING(a AS BINARY(6)) AS b FROM t1"
"SELECT HEX(WEIGHT_STRING(a AS BINARY(2))) FROM t1"
"SELECT HEX(WEIGHT_STRING(a AS BINARY(6))) FROM t1"
"CREATE TABLE t1(j json, INDEX mv_idx((CAST(j AS UNSIGNED ARRAY))))"
"ALTER TABLE t2 ALTER my_row_id SET VISIBLE"
"ALTER TABLE t1 ENGINE='MYISAM',
ADD COLUMN my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE FIRST,
ADD PRIMARY KEY(my_row_id)"
"CREATE TABLE t1(my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE,
f1 INT, primary key(my_row_id)) ENGINE = 'MyISAM'"
"ALTER TABLE t1 ENGINE='MYISAM', ALTER my_row_id SET VISIBLE"
"ALTER TABLE t1 ENGINE='InnoDB', ALTER my_row_id SET INVISIBLE"
"CREATE TEMPORARY TABLE t1(my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE,
f1 INT, primary key(my_row_id)) ENGINE = 'MyISAM'"
"ALTER TABLE t1 ALTER my_row_id SET VISIBLE"
"ALTER TABLE t1 ALTER my_row_id SET INVISIBLE"
"ALTER TABLE t1 DROP COLUMN f0, MODIFY my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE"
"ALTER TABLE t2 ALTER my_row_id SET INVISIBLE"
"ALTER TABLE t2 DROP COLUMN f0, MODIFY my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE"
"ALTER TABLE t1 ADD COLUMN my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE FIRST,
ADD PRIMARY KEY(my_row_id)"
"CREATE PROCEDURE run_show_and_i_s_stmts() BEGIN
SHOW CREATE TABLE t1;
SHOW COLUMNS FROM t1;
SHOW EXTENDED COLUMNS FROM t1;
SHOW KEYS FROM t1;

-- I_S.TABLES
SELECT TABLE_NAME, AUTO_INCREMENT FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_NAME='t1';
-- I_S.COLUMNS
SELECT COLUMN_NAME, COLUMN_TYPE, IS_NULLABLE, EXTRA
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME='t1' ORDER BY ORDINAL_POSITION;
-- I_S.COLUMN_EXTENSIONS
SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS_EXTENSIONS
WHERE TABLE_NAME='t1' ORDER BY COLUMN_NAME;
-- I_S.STATISTICS
SELECT INDEX_NAME, COLUMN_NAME FROM INFORMATION_SCHEMA.STATISTICS
WHERE TABLE_NAME='t1' ORDER BY INDEX_NAME, COLUMN_NAME;
-- I_S.KEY_COLUMN_USAGE
SELECT CONSTRAINT_NAME, COLUMN_NAME
FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE TABLE_NAME='t1'
ORDER BY CONSTRAINT_NAME, COLUMN_NAME;
-- I_S.TABLE_CONSTRAINTS
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE, ENFORCED
FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE TABLE_NAME='t1'
ORDER BY CONSTRAINT_NAME;
-- I_S.TABLE_CONSTRAINTS_EXTENSIONS
SELECT CONSTRAINT_NAME FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS_EXTENSIONS
WHERE TABLE_NAME='t1' ORDER BY CONSTRAINT_NAME;
END;
"
"ALTER TABLE t1 ALTER my_row_id SET VISIBLE, ALGORITHM=INSTANT"
"ALTER TABLE t1 ALTER my_row_id SET INVISIBLE, ALGORITHM=INSTANT"
"ALTER TABLE t1 ALTER my_row_id SET VISIBLE, RENAME COLUMN f1 to f2,
ALGORITHM=INSTANT"
"ALTER TABLE t1 ALTER my_row_id SET INVISIBLE, RENAME COLUMN f2 to f1,
ALGORITHM=INSTANT"
"ALTER TABLE t1 ALTER my_row_id SET VISIBLE, ALGORITHM=INPLACE"
"ALTER TABLE t1 ALTER my_row_id SET INVISIBLE, ALGORITHM=INPLACE"
"ALTER TABLE t1 ALTER my_row_id SET VISIBLE, ADD INDEX (f1), ALGORITHM=INPLACE"
"ALTER TABLE t1 ALTER my_row_id SET INVISIBLE, ADD INDEX(f1),
ALGORITHM=INPLACE"
"ALTER TABLE t1 ALTER my_row_id SET VISIBLE, ALGORITHM=COPY"
"ALTER TABLE t1 ALTER my_row_id SET INVISIBLE, ALGORITHM=COPY"
"DO ST_ASTEXT(ST_UNION(ST_GEOMFROMTEXT('POLYGON((525000 183300,525400
183300,525400 18370, 525000 183700,525000 183300))'),
ST_GeomFromText('POLYGON((525298.67 183511.53,525296.57
183510.39,525296.42 183510.31,525289.11 183506.62,525283.17
183503.47,525280.98 183502.26,525278.63 183500.97,525278.39
183500.84,525276.79 183500,525260.7 183491.55,525263.95
183484.75,525265.58 183481.95,525278.97 183488.73,525276.5
183493.45,525275.5 183495.7,525280.35 183498.2,525282.3
183499.1,525282.2 183499.3,525283.55 183500,525301.75
183509.35,525304.45 183504.25,525307.85 183504.95,525304.5
183510.83,525302.81 183513.8,525298.67 183511.53),(525275.06
183489.89,525272.06 183488.37,525268.94 183494.51,525271.94
183496.03,525275.06 183489.89),(525263.26 183491.55,525266.15
183493.04,525269.88 183485.82,525266.99 183484.33,525263.26
183491.55))'))) st_u"
"DO ST_AsText(@centroid_point) as centroid"
"DO MBRWITHIN(@centroid_point, ST_INTERSECTION(ST_GEOMFROMTEXT('MULTILINESTRING((541 -927,-414 316,-429 -444,212 260,-125 104,445 563,-713 -975,-976 514),(-830 882,-377 914,-915 919,-535 -23,-508 979),(806 347,-87 220,226 -22,-12 468,707 598,83 951,-592 701,833 964,270 -932,743 -514,231 469,-575 -122,-99 -245,416 465,801 -587))'), ST_GEOMFROMTEXT('LINESTRING(-96 -182,-373 75,697 687,-881 -463,-557 -959,-493 810)'))) as result"
"DO ST_ASTEXT(ST_UNION(ST_GEOMFROMTEXT('GEOMETRYCOLLECTION(POLYGON((4 -10,-3 0,-5 6,9 9,5 7,9 -6,9 -10,7 9,0 -4,-6 10,0 -3,9 3, 4 -10)),
GEOMETRYCOLLECTION(),
GEOMETRYCOLLECTION(MULTIPOLYGON(((-8 0,-2 -6,-10 -9,-9 7,-2 -10,7 -9,3 -6,-5 -8,-10 -7,-6 10,4 -10,-7 -8,6 -1, -8 0)),((-4 -3,7 -10,-4 -1,-10 -3,3 -3,-10 -4,-1 2,-2 -10,6 -7,-9 -8, -4 -3))),
POINT(5 0),
MULTIPOINT(-3 0,-4 -8,-3 -4,10 4,0 7,-7 2,4 -8,1 -6),
MULTILINESTRING((-10 10,-10 5,9 -9,2 2,-7 2,0 -3,2 3,-6 -4,0 -2),(5 -9,0 -9,6 -4,1 -4,-1 6,2 -9,5 -7,8 10)),
MULTILINESTRING((-10 10,-10 5,9 -9,2 2,-7 2,0 -3,2 3,-6 -4,0 -2),(5 -9,0 -9,6 -4,1 -4,-1 6,2 -9,5 -7,8 10)),
LINESTRING(10 5,-4 7,-5 -8,-4 4,-4 6,-5 9,-1 6,0 -5)),
GEOMETRYCOLLECTION(MULTILINESTRING((-8 5,9 -10,-9 9,-9 4,3 -2,4 -6),(3 -10,3 8,-10 4,6 -3,8 -2,3 3,4 -7,-8 6,-3 2,5 3,0 10,2 4,1 -5,-6 1),(10 3,-4 2,4 -4,3 -1,-8 0,-7 -2,10 9,-5 5,-3 6),(0 3,3 7,0 2,4 -1,8 8,-10 -4,2 7,-4 5)),
POINT(2 -1),
MULTIPOLYGON(((-10 8,1 -4,0 -8,9 2,-8 -6,-3 -7,-10 -1,-10 -9,10 -3, -10 8)),((-6 7,-1 3,2 8,10 -6,-8 4,-9 -10,-8 -8,-2 -1,-9 7,6 -9,5 1,-1 -6, -6 7)),((8 9,0 1,-5 -8,0 8,-3 -6,-9 -2,9 -6,-5 5,-1 -3,-8 2,2 -9,5 -5,7 -7,-9 3,0 -3, 8 9)),((1 -4,-7 -10,10 10,5 3,8 -9,-6 5,2 2,-5 5,-1 5, 1 -4))),
MULTIPOLYGON(((-10 8,1 -4,0 -8,9 2,-8 -6,-3 -7,-10 -1,-10 -9,10 -3, -10 8)),((-6 7,-1 3,2 8,10 -6,-8 4,-9 -10,-8 -8,-2 -1,-9 7,6 -9,5 1,-1 -6, -6 7)),((8 9,0 1,-5 -8,0 8,-3 -6,-9 -2,9 -6,-5 5,-1 -3,-8 2,2 -9,5 -5,7 -7,-9 3,0 -3, 8 9)),((1 -4,-7 -10,10 10,5 3,8 -9,-6 5,2 2,-5 5,-1 5, 1 -4)))),
MULTIPOLYGON(((8 0,7 -6,7 -2,-7 -9,-3 10,-4 -3,3 -10, 8 0)),((7 3,7 6,1 8,4 6,-8 -7,-6 -7,9 -4,-1 3,-7 10, 7 3)),((3 -6,5 4,-3 -6,-5 1,-6 0,0 0,0 -7,-2 -10,-4 8,9 9,4 6, 3 -6)),((7 -7,3 4,-5 0, 7 -7)),((4 -9,-2 -9,-2 10, 4 -9))),
POLYGON((-3 -6,-3 0,3 -10,3 10,1 -4,-6 -10,8 -5,-9 -8,2 -4,9 10,1 -3, -3 -6)),
POLYGON((2 -5,0 -2,-3 9,0 4,6 -6,5 -4,-4 2,-6 6,3 -4,1 0,-10 -7,1 6,-7 2, 2 -5)),
MULTIPOINT(7 8,-6 -3,-1 -7,0 7,-2 1,-8 -8))'),
ST_GEOMFROMTEXT('GEOMETRYCOLLECTION()'))) as result"
"DO ST_ASTEXT(ST_UNION(ST_INTERSECTION(ST_GEOMFROMTEXT('MULTIPOINT(7 2,-4 -5,6 -9,-7 3,-10 5,8 -6,0 -10,10 -4,8 -10,2 6,8 -4,-8 2,-4 2)'),
ST_GEOMFROMTEXT('MULTIPOLYGON(((6 2,1 1,-4 5,1 4,-3 -4,-7 9,-10 2,-6 1,10 -7,0 1,9 4, 6 2)))')),
ST_UNION(ST_GEOMFROMTEXT('LINESTRING(-1 -5,0 -6,4 6,3 3,2 8,-2 6,-4 5,6 -7,-1 -1,-8 6,4 -2)'),
ST_GEOMFROMTEXT('MULTIPOLYGON(((5 -4,-5 -9,-1 -6,-3 0,5 -2, 5 -4)),((-5 -10,-8 -2,-3 7,1 5,5 -10,1 -5,0 10,3 2,1 1, -5 -10)),((4 -2,6 3,7 5,1 2,8 -9,-10 -5,7 -10,-2 -9,-2 0,2 -8,-8 3,5 0, 4 -2)),((6 -4,0 4,-8 -2,10 -10,-6 5, 6 -4)))')))) as result"
"CREATE TABLE lakes (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
shore POLYGON)"
"CREATE TABLE road_segments (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
aliases CHARACTER VARYING(64),
num_lanes INTEGER,
centerline LINESTRING)"
"CREATE TABLE divided_routes (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
num_lanes INTEGER,
centerlines MULTILINESTRING)"
"CREATE TABLE forests (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
boundary MULTIPOLYGON)"
"CREATE TABLE bridges (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
position POINT)"
"CREATE TABLE streams (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
centerline LINESTRING)"
"CREATE TABLE buildings (
fid INTEGER NOT NULL PRIMARY KEY,
address CHARACTER VARYING(64),
position POINT,
footprint POLYGON)"
"CREATE TABLE ponds (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
type CHARACTER VARYING(64),
shores MULTIPOLYGON)"
"CREATE TABLE named_places (
fid INTEGER NOT NULL PRIMARY KEY,
name CHARACTER VARYING(64),
boundary POLYGON)"
"ALTER TABLE t1 ALGORITHM=COPY, MODIFY COLUMN b GEOMETRY NOT NULL"
"CREATE TABLE t1 (g GEOMCOLLECTION)"
"revoke all privileges on mysqltest.* from mysqltest_1@localhost"
"revoke all on test.* from mysqltest_3@localhost"
"revoke all on test.t1 from mysqltest_2@localhost"
"CREATE DATABASE ÂÄ"
"USE ÂÄ"
"CREATE TABLE ÔÁÂ (ËÏÌ INT)"
"CREATE USER ÀÚÅÒ@localhost"
"GRANT SELECT ON ÂÄ.* TO ÀÚÅÒ@localhost"
"SHOW GRANTS FOR ÀÚÅÒ@localhost"
"REVOKE SELECT ON ÂÄ.* FROM ÀÚÅÒ@localhost"
"GRANT SELECT ON ÂÄ.ÔÁÂ TO ÀÚÅÒ@localhost"
"REVOKE SELECT ON ÂÄ.ÔÁÂ FROM ÀÚÅÒ@localhost"
"GRANT SELECT (ËÏÌ) ON ÂÄ.ÔÁÂ TO ÀÚÅÒ@localhost"
"REVOKE SELECT (ËÏÌ) ON ÂÄ.ÔÁÂ FROM ÀÚÅÒ@localhost"
"DROP USER ÀÚÅÒ@localhost"
"DROP DATABASE ÂÄ"
"CREATE TABLE t4 LIKE t1"
"CREATE TABLE t5 LIKE t1"
"CREATE TABLE t6 LIKE t1"
"CREATE TABLE t7 LIKE t1"
"CREATE TABLE t8 LIKE t1"
"CREATE TABLE t9 LIKE t1"
"CREATE TABLE t10 LIKE t1"
"revoke ALL PRIVILEGES on t1 from grant_user@localhost"
"revoke all on mysqltest_1.t1 from mysqltest_3@localhost"
"revoke all on mysqltest_1.t2 from mysqltest_3@localhost"
"revoke all on mysqltest_2.t1 from mysqltest_3@localhost"
"revoke all on mysqltest_2.t2 from mysqltest_3@localhost"
"revoke all privileges on mysqltest.t1 from mysqltest_1@localhost"
"create database ÂÄ"
"grant select on ÂÄ.* to root@localhost"
"drop database ÂÄ"
"revoke select on ÂÄ.* from root@localhost"
"create user mysqltest_7@"
"alter user mysqltest_7@ identified by 'systpass'"
"show grants for mysqltest_7@"
"drop user mysqltest_7@"
"grant select on mysqltest.* to mysqltest_8@"
"show grants for mysqltest_8@"
"REVOKE ALL ON db27878.* FROM 'mysqltest_1'@'localhost'"
"create user ÑÐ·ÐµÑ_ÑÐ·ÐµÑ@localhost"
"grant select on test.* to ÑÐ·ÐµÑ_ÑÐ·ÐµÑ@localhost"
"revoke all on test.* from ÑÐ·ÐµÑ_ÑÐ·ÐµÑ@localhost"
"drop user ÑÐ·ÐµÑ_ÑÐ·ÐµÑ@localhost"
"REVOKE ALL ON db1.* FROM 'user1'@'localhost'"
"REVOKE ALL ON db1.* FROM 'user2'@'%'"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"GRANT CREATE ON mysqltest.* TO Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"GRANT CREATE ON mysqltest.* TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"GRANT CREATE ON mysqltest.* TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"REVOKE CREATE ON mysqltest.* FROM Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"REVOKE CREATE ON mysqltest.* FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"REVOKE CREATE ON mysqltest.* FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"GRANT CREATE ON t1 TO Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"GRANT CREATE ON t1 TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"GRANT CREATE ON t1 TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"REVOKE CREATE ON t1 FROM Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"REVOKE CREATE ON t1 FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"REVOKE CREATE ON t1 FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"GRANT SELECT ON t1 TO Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"GRANT SELECT ON t1 TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"GRANT SELECT ON t1 TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"REVOKE SELECT ON t1 FROM Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"REVOKE SELECT ON t1 FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"REVOKE SELECT ON t1 FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"GRANT EXECUTE ON PROCEDURE p1 TO Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"GRANT EXECUTE ON PROCEDURE p1 TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"GRANT EXECUTE ON PROCEDURE p1 TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"REVOKE EXECUTE ON PROCEDURE p1 FROM Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"REVOKE EXECUTE ON PROCEDURE p1 FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"REVOKE EXECUTE ON PROCEDURE p1 FROM Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"DROP USER Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·@localhost"
"DROP USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ@localhost"
"DROP USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"REVOKE ALL PRIVILEGES ON mysqltest.v0 FROM mysqltest@localhost"
"REVOKE ALL PRIVILEGES ON mysqltest.visible FROM mysqltest@localhost"
"REVOKE ALL ON mysqltest_1.t1 FROM mysqltest_1@'127.0.0.0/255.0.0.0'"
"revoke all on mysqltest_1.* from mysqltest_1@'127.0.0.1'"
"revoke all on mysqltest_1.* from mysqltest_1@'127.0.0.0/255.0.0.0'"
"create table t1 like mysqltest_2.t1"
"CREATE TEMPORARY TABLE t2 LIKE t1"
"CREATE TEMPORARY TABLE t6(a INT) ENGINE = MERGE UNION = ()"
"ALTER TABLE t6 UNION = ()"
"ALTER TABLE mysqltest_db2.t2_2 UNION = ()"
"create table t_select_priv like t_column_priv_only"
"create table t_no_priv like t_column_priv_only"
"create table test.t_duplicated like mysqltest_db1.t_select_priv"
"flush table mysqltest_db1.t1"
"ALTER USER user() IDENTIFIED BY 'abc'"
"CREATE USER 20553132_u1@localhost"
"CREATE USER 20553132_u2@localhost"
"GRANT ALL ON *.* TO 20553132_u1@localhost"
"ALTER USER 20553132_u1@localhost PASSWORD EXPIRE"
"ALTER USER 20553132_u2@localhost IDENTIFIED BY 'abcd', 20553132_u1@localhost IDENTIFIED BY 'defg' PASSWORD EXPIRE NEVER"
"ALTER USER 20553132_u2@localhost IDENTIFIED BY 'abcd', 20553132_u1@localhost IDENTIFIED WITH 'caching_sha2_password' BY 'hijk' PASSWORD EXPIRE DEFAULT"
"DROP USER 20553132_u1@localhost"
"DROP USER 20553132_u2@localhost"
"EOF



SELECT 1"
"ALTER USER USER() IDENTIFIED BY 'abc'"
"ALTER USER USER() IDENTIFIED BY 'new_pwd_string'"
"ALTER USER USER() IDENTIFIED BY 'new-auth'"
"CREATE USER user1@47.9.9.9 IDENTIFIED BY 'pass1'"
"SHOW CREATE USER user1@47.9.9.9"
"REVOKE ALL ON *.* FROM user1@localhost"
"DROP USER user1@localhost, user1@47.9.9.9, user2,
bug20625566_user@localhost, bug20625566_dest@localhost"
"ALTER USER u1@localhost DEFAULT ROLE r1"
"REVOKE ALL ON *.* FROM u1@localhost"
"REVOKE ALL ON *.* FROM u1"
"SHOW GRANTS FOR u1 using r1"
"SHOW GRANTS FOR u1 using r2"
"REVOKE ALL ON *.* FROM CURRENT_USER()"
"RESET REPLICA ALL"
enable_connect_log
"REVOKE ALL PRIVILEGES ON t1 FROM wl14303@localhost"
disable_connect_log
"SHOW GRANTS FOR CURRENT_USER USING flusher"
"REVOKE ALL PRIVILEGES ON privtest_db.t1 FROM 'privtest'@'localhost'"
"REVOKE IF EXISTS SELECT ON rngp_db.* FROM rngp_user1"
"REVOKE IF EXISTS CREATE, SELECT ON rngp_db.* FROM rngp_user1"
"REVOKE IF EXISTS SELECT ON rngp_db.* FROM rngp_role1"
"REVOKE IF EXISTS CREATE, SELECT ON rngp_db.* FROM rngp_role1"
"REVOKE ALL PRIVILEGES ON rngp_db.* FROM rngp_user1"
"REVOKE ALL PRIVILEGES ON rngp_db.* FROM rngp_role1"
"REVOKE ALL ON *.* FROM rngp_user1"
"REVOKE IF EXISTS SELECT ON rngp_db.* FROM rngp_user1, rngp_user2"
"REVOKE ALL ON *.* FROM rngp_role1"
"REVOKE IF EXISTS SELECT ON rngp_db.* FROM rngp_role1, rngp_role2"
"REVOKE IF EXISTS GRANT OPTION ON PROCEDURE rngp_db.rngp_proc FROM rngp_role"
"REVOKE IF EXISTS ALTER ROUTINE, EXECUTE ON PROCEDURE rngp_db.rngp_proc FROM rngp_role"
"REVOKE IF EXISTS GRANT OPTION ON PROCEDURE rngp_db.rngp_proc FROM rngp_user"
"REVOKE IF EXISTS ALTER ROUTINE, EXECUTE ON PROCEDURE rngp_db.rngp_proc FROM rngp_user"
"REVOKE ALL PRIVILEGES ON PROCEDURE rngp_db.rngp_proc FROM rngp_role"
"REVOKE ALL PRIVILEGES ON PROCEDURE rngp_db.rngp_proc FROM rngp_user"
"REVOKE IF EXISTS SELECT ON rngp_db.tb1 FROM rngp_role"
"REVOKE IF EXISTS SELECT (no) ON rngp_db.tb2 FROM rngp_role"
"REVOKE IF EXISTS INSERT, SELECT ON rngp_db.tb1 FROM rngp_role"
"REVOKE IF EXISTS INSERT (no), SELECT (no) ON rngp_db.tb2 FROM rngp_role"
"REVOKE IF EXISTS UPDATE, INSERT, SELECT (x), REFERENCES (x) ON rngp_db.tb1 FROM rngp_role"
"REVOKE IF EXISTS SELECT ON rngp_db.tb1 FROM rngp_user"
"REVOKE IF EXISTS SELECT (no) ON rngp_db.tb2 FROM rngp_user"
"REVOKE IF EXISTS INSERT, SELECT ON rngp_db.tb1 FROM rngp_user"
"REVOKE IF EXISTS INSERT (no), SELECT (no) ON rngp_db.tb2 FROM rngp_user"
"REVOKE ALL PRIVILEGES ON rngp_db.tb1 FROM rngp_role"
"REVOKE ALL PRIVILEGES ON rngp_db.tb1 FROM rngp_user"
"call mtr.add_suppression(""Column count of mysql.* is wrong. ""
""Expected .*, found .*. ""
""The table is probably corrupted"")"
"CREATE TABLE mysql.temp_user LIKE mysql.user"
"CREATE TABLE t100 LIKE t10"
"CREATE TABLE t10000 LIKE t10"
"insert into t2 select
x3.a,  -- 3
concat('val-', x3.a + 3*x4.a), -- 12
concat('val-', @a:=x3.a + 3*x4.a + 12*C.a), -- 120
concat('val-', @a + 120*D.a)
from t1 x3, t1 x4, t1 C, t1 D where x3.a < 3 and x4.a < 4 and D.a < 4
order by x3.a, x4.a, C.a, D.a"
"EXPLAIN SELECT a FROM t1 IGNORE INDEX FOR ORDER BY (PRIMARY)
IGNORE INDEX FOR GROUP BY (i2) GROUP BY a"
"EXPLAIN SELECT a FROM t1 IGNORE INDEX (PRIMARY) IGNORE INDEX FOR ORDER BY (i2)"
"EXPLAIN SELECT a FROM t1 USE INDEX () USE INDEX (i2)"
"EXPLAIN SELECT a FROM t1 USE INDEX (i2) USE INDEX ()"
"EXPLAIN SELECT a FROM t1 USE INDEX FOR JOIN (i2)
USE INDEX FOR GROUP BY (i2) GROUP BY a"
"EXPLAIN SELECT a FROM t1 FORCE INDEX FOR JOIN (i2)
FORCE INDEX FOR GROUP BY (i2) GROUP BY a"
"EXPLAIN SELECT a FROM t1 USE INDEX () IGNORE INDEX (i2)"
"EXPLAIN SELECT a FROM t1 IGNORE INDEX (i2) USE INDEX ()"
"EXPLAIN SELECT a FROM t1
USE INDEX FOR GROUP BY (i2)
USE INDEX FOR ORDER BY (i2)
USE INDEX FOR JOIN (i2)"
"EXPLAIN SELECT a FROM t1
USE INDEX FOR JOIN (i2)
USE INDEX FOR JOIN (i2)
USE INDEX FOR JOIN (i2,i2)"
"EXPLAIN SELECT 1 FROM t1 WHERE a IN
(SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2))"
"EXPLAIN SELECT 1 FROM t2 WHERE a IN
(SELECT a FROM t1 USE INDEX (i2) IGNORE INDEX (i2))"
"CREATE TABLE t1
(
a INT GENERATED ALWAYS AS (1) VIRTUAL,
b INT GENERATED ALWAYS AS (a) VIRTUAL,
c INT GENERATED ALWAYS AS (1) VIRTUAL
)"
"SELECT COUNT(DISTINCT f), COUNT(DISTINCT d), AVG(DISTINCT f), AVG(DISTINCT d) FROM t"
"select * from (select * from tb1 where id %3 = 0) even,
lateral (select sql_small_result avg(id2) a from tb1 where id > even.id group by id2 ) l
where even.id != l.a"
"SELECT MIN(t1.f1) AS field1 FROM (t1 JOIN (t1 t2) ON (TRUE),
LATERAL (SELECT t2.f3 AS field2 FROM t1 t3 WHERE (t2.f3 <=> t2.f4)
GROUP BY field2 ORDER BY t1.f2) AS t4)
GROUP BY field2 ORDER BY field1"
"SELECT EMPNUM, GRADE*1000
FROM HU.STAFF WHERE GRADE * 1000 >
ANY (SELECT SUM(BUDGET) FROM HU.PROJ
GROUP BY CITY, PTYPE
HAVING HU.PROJ.CITY = HU.STAFF.CITY)"
"insert into t1 values(concat(@char,@space),concat(@char,@space),concat(@char,@space))"
"create table t1 (v varchar(10), c char(10), t varchar(50), key using btree (v), key using btree (c), key using btree (t(10))) charset latin1"
"create table t1 (a char(10), unique using btree (a)) charset latin1 engine=heap"
"create table t1 (a int not null,b int not null, primary key using BTREE (a)) engine=heap comment=""testing heaps"" avg_row_length=100 min_rows=1 max_rows=100"
"alter table t1 add c int not null, add key using BTREE (c,a)"
"create table t1 (a int not null,b int not null, primary key using BTREE (a)) engine=heap comment=""testing heaps"""
"CREATE TABLE t1 ( a int not null default 0, b int not null default 0,  key  using BTREE (a,b),  key  using BTREE (b)  ) ENGINE=HEAP"
"create table t1 (id int unsigned not null, primary key  using BTREE (id)) engine=HEAP"
"create table t1 (btn char(10) not null, key using BTREE (btn)) charset utf8mb4 engine=heap"
"alter table t1 add column new_col char(1) not null, add key using BTREE (btn,new_col), drop key btn"
"CREATE TABLE t1 (a int, b int, c int, key using BTREE (a, b, c)) engine=heap"
"CREATE TABLE t1 (a int not null, primary key using BTREE (a)) engine=heap"
"create table t1(a int not null, key using btree(a)) engine=heap"
"CREATE TABLE t1 (
c1 CHAR(3),
c2 INTEGER,
KEY USING BTREE(c1),
KEY USING BTREE(c2)
) ENGINE= MEMORY"
"CREATE TABLE t1 (
c1 ENUM('1', '2'),
UNIQUE USING BTREE(c1)
) ENGINE= MEMORY DEFAULT CHARSET= utf8mb3"
"CREATE TABLE t1 (
c1 SET('1', '2'),
UNIQUE USING BTREE(c1)
) ENGINE= MEMORY DEFAULT CHARSET= utf8mb3"
"CREATE TABLE t1 (a INT, KEY USING BTREE(a)) ENGINE=MEMORY"
"CREATE TABLE t1(val INT, KEY USING BTREE(val)) ENGINE=memory"
"CREATE TABLE t1 (a INT, UNIQUE USING BTREE(a)) ENGINE=MEMORY"
"create table t1(a varchar(255), b varchar(255),
key using btree (a,b)) engine=memory"
"CREATE TABLE t1(a INT, KEY USING BTREE (a)) ENGINE=MEMORY"
"CREATE TABLE t1(
id INT AUTO_INCREMENT PRIMARY KEY,
c1 INT NOT NULL,
c2 INT NOT NULL,
UNIQUE KEY USING BTREE (c2,c1)) ENGINE = MEMORY"
"create table t1 (a int not null,b int not null, primary key using HASH (a)) engine=heap comment=""testing heaps"" avg_row_length=100 min_rows=1 max_rows=100"
"alter table t1 add c int not null, add key using HASH (c,a)"
"create table t1 (a int not null,b int not null, primary key using HASH (a)) engine=heap comment=""testing heaps"""
"CREATE TABLE t1 ( a int not null default 0, b int not null default 0,  key  using HASH (a),  key  using HASH (b)  ) ENGINE=HEAP"
"create table t1 (id int unsigned not null, primary key  using HASH (id)) engine=HEAP"
"create table t1 (btn char(10) not null, key using HASH (btn)) charset utf8mb4 engine=heap"
"alter table t1 add column new_col char(1) not null, add key using HASH (btn,new_col), drop key btn"
"CREATE TABLE t1 (a int not null, primary key using HASH (a)) engine=heap"
"CREATE TABLE t1
(
pk INT PRIMARY KEY,
val INT,
UNIQUE KEY USING HASH(val)
) ENGINE=MEMORY"
"CREATE TABLE t1(
id INT AUTO_INCREMENT PRIMARY KEY,
c1 INT NOT NULL,
c2 INT NOT NULL,
UNIQUE KEY USING HASH (c2,c1)) ENGINE = MEMORY"
"ANALYZE TABLE t1 UPDATE HISTOGRAM ON x MANUAL UPDATE"
"ANALYZE TABLE t1 UPDATE HISTOGRAM ON x AUTO UPDATE"
"ANALYZE TABLE t1 UPDATE HISTOGRAM ON c1, c3 AUTO UPDATE"
"ANALYZE TABLE t1 UPDATE HISTOGRAM ON c2 MANUAL UPDATE"
"ANALYZE TABLE t1 UPDATE HISTOGRAM ON x WITH 3 BUCKETS AUTO UPDATE"
"EXPLAIN FORMAT=JSON INTO @v SELECT x FROM t1 WHERE x > 0"
"EXPLAIN FORMAT=JSON INTO @v SELECT x FROM t1 WHERE x = 1"
"EXPLAIN FORMAT=JSON INTO @v SELECT x FROM t1 WHERE x = 2"
"ANALYZE TABLE t2 UPDATE HISTOGRAM ON x AUTO UPDATE"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75], ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA ''"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA 'a'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '1'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA 'null'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '[]'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": 1, ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""blob"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": ""0.25"", ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": -0.01, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 1.01, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": ""true"", ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": 123, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": ""yes"", ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": ""utf8mb3"", ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 2048, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": -1, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 9300000000000000000, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": ""1.0"", ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": -0.1, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.1, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": 1, ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""single"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton""}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": ""4""}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": -1}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 1025}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": ""[[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]]"", ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": null, ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [4, 0.25], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, ""0.5""], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, -0.01], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 1.1]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.7], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.26, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.24, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23.0, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [9300000000000000000, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [2200000000, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [32, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": 3, ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""text"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": ""[[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]]"", ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [4, 4, 0.3333333333333333, 1], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.4, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 2}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, ""0.6666666666666666"", 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, -0.01, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.01, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.01, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.7333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.01, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.01, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1.0], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 0], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, -1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, ""12"", 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[9300000000000000000, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 9300000000000000000, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 2200000000, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 12, 0.6666666666666666, 1], [23, 2200000000, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [13, 12, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_int UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.3333333333333333, 1], [12, 42, 0.6666666666666666, 1], [23, 52, 1.0, 2]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23.0, 0.625], [52, 0.75]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [20000000000000000000, 0.75]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [12, 0.5], [23, 0.625], [-1, 0.75]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 0.25], [32, 0.5], [23, 0.625], [52, 0.75]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.25, 1], [12.0, 12, 0.5, 1], [23, 52, 0.75, 2]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.25, 1], [12, ""12"", 0.5, 1], [23, 52, 0.75, 2]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[-1, 4, 0.25, 1], [12, 12, 0.5, 1], [23, 52, 0.75, 2]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.25, 1], [12, 12, 0.5, 1], [23, 20000000000000000000, 0.75, 2]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.25, 1], [13, 12, 0.5, 1], [23, 52, 0.75, 2]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_uint UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4, 0.25, 1], [12, 42, 0.5, 1], [23, 52, 0.75, 2]], ""data-type"": ""uint"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 0.25], [12.0, 0.5], [""23.0"", 0.625], [52.0, 0.75]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[-1e330, 0.25], [12.0, 0.5], [23.0, 0.625], [52.0, 0.75]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 0.25], [12.0, 0.5], [23.0, 0.625], [1E330, 0.75]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 0.25], [32.0, 0.5], [23.0, 0.625], [52.0, 0.75]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4, 4.0, 0.25, 1], [12.0, 12.0, 0.5, 1], [23.0, 52.0, 0.75, 2]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 4.0, 0.25, 1], [12.0, ""12.0"", 0.5, 1], [23.0, 52.0, 0.75, 2]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 4.0, 0.25, 1], [13.0, 12.0, 0.5, 1], [23.0, 52.0, 0.75, 2]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_double UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.0, 4.0, 0.25, 1], [12.0, 32.0, 0.5, 1], [23.0, 52.0, 0.75, 2]], ""data-type"": ""double"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[12345, 0.25], [""base64:type254:Q2hhcmxlcw=="", 0.5], [""base64:type254:TWFyaw=="", 0.625], [""base64:type254:VmluY2VudA=="", 0.75]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""QmlsbA=="", 0.25], [""base64:type254:Q2hhcmxlcw=="", 0.5], [""base64:type254:TWFyaw=="", 0.625], [""base64:type254:VmluY2VudA=="", 0.75]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA"", 0.25], [""base64:type254:Q2hhcmxlcw=="", 0.5], [""base64:type254:TWFyaw=="", 0.625], [""base64:type254:VmluY2VudA=="", 0.75]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsTWFyVmluY2VuQ2hhcmxlbA=="", 0.25], [""base64:type254:Q2hhcmxlcw=="", 0.5], [""base64:type254:TWFyaw=="", 0.625], [""base64:type254:VmluY2VudA=="", 0.75]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", 0.25], [""base64:type254:Q2hhcmxlcw=="", 0.5], [""base64:type254:Q2hhcmxlcw=="", 0.625], [""base64:type254:VmluY2VudA=="", 0.75]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[12345, ""base64:type254:QmlsbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", 12345, 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""QmlsbA=="", ""base64:type254:QmlsbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", ""QmlsbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA"", ""base64:type254:QmlsbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", ""base64:type254:QmlsbA"", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsTWFyVmluY2VuQ2hhcmxlbA=="", ""base64:type254:QmlsbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", ""base64:type254:QmlsTWFyVmluY2VuQ2hhcmxlbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", ""base64:type254:QmlsbA=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:VmluY2VudA=="", ""base64:type254:TWFyaw=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_string UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""base64:type254:QmlsbA=="", ""base64:type254:TWFyaw=="", 0.25, 1], [""base64:type254:Q2hhcmxlcw=="", ""base64:type254:Q2hhcmxlcw=="", 0.5, 1], [""base64:type254:TWFyaw=="", ""base64:type254:VmluY2VudA=="", 0.75, 2]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""0000-00-00"", 0.125], [""2017-02-10"", 0.375], [""2018-02-12"", 0.5], [""2018-03-21"", 0.75]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[20170206, 0.125], [""2017-02-10"", 0.375], [""2018-02-12"", 0.5], [""2018-03-21"", 0.75]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 14:48:11"", 0.125], [""2017-02-10"", 0.375], [""2018-02-12"", 0.5], [""2018-03-21"", 0.75]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""14:48:11"", 0.125], [""2017-02-10"", 0.375], [""2018-02-12"", 0.5], [""2018-03-21"", 0.75]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", 0.125], [""2017-02-10"", 0.375], [""2018-04-12"", 0.5], [""2018-03-21"", 0.75]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""0000-00-00"", ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", ""0000-00-00"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[20170206, ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", 20170210, 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 14:48:11"", ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12 14:48:11"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""14:48:11"", ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""14:48:11"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-12"", ""2017-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_date UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", ""2019-02-10"", 0.375, 2], [""2018-02-12"", ""2018-02-12"", 0.5, 1], [""2018-03-21"", ""2018-03-21"", 0.75, 1]], ""data-type"": ""date"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[170418, 0.125], [""08:15:18.000000"", 0.375], [""16:22:23.000000"", 0.5], [""21:12:42.000000"", 0.75]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-10"", 0.125], [""08:15:18.000000"", 0.375], [""16:22:23.000000"", 0.5], [""21:12:42.000000"", 0.75]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-10 07:04:18.000000"", 0.125], [""08:15:18.000000"", 0.375], [""16:22:23.000000"", 0.5], [""21:12:42.000000"", 0.75]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""-839:00:00.000000"", 0.125], [""08:15:18.000000"", 0.375], [""16:22:23.000000"", 0.5], [""21:12:42.000000"", 0.75]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""07:04:18.000000"", 0.125], [""08:15:18.000000"", 0.375], [""16:22:23.000000"", 0.5], [""839:00:00.000000"", 0.75]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""09:04:18.000000"", 0.125], [""08:15:18.000000"", 0.375], [""16:22:23.000000"", 0.5], [""21:12:42.000000"", 0.75]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[170418, ""08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""07:04:18.000000"", 181518, 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06"", ""08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""07:04:18.000000"", ""2017-02-10"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-10 07:04:18.000000"", ""08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""07:04:18.000000"", ""2017-02-10 08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""-839:00:00.000000"", ""08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""07:04:18.000000"", ""08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""839:00:00.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""09:04:18.000000"", ""08:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_time UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""07:04:18.000000"", ""17:15:18.000000"", 0.375, 2], [""16:22:23.000000"", ""16:22:23.000000"", 0.5, 1], [""21:12:42.000000"", ""21:12:42.000000"", 0.75, 1]], ""data-type"": ""time"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[20170216162223, 0.125], [""2017-02-10 08:15:18.000000"", 0.375], [""2018-02-12 07:04:18.000000"", 0.5], [""2018-03-21 21:12:42.000000"", 0.75]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""16:22:23.000000"", 0.125], [""2017-02-10 08:15:18.000000"", 0.375], [""2018-02-12 07:04:18.000000"", 0.5], [""2018-03-21 21:12:42.000000"", 0.75]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""0000-00-00 00:00:00.000000"", 0.125], [""2017-02-10 08:15:18.000000"", 0.375], [""2018-02-12 07:04:18.000000"", 0.5], [""2018-03-21 21:12:42.000000"", 0.75]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-16 16:22:23.000000"", 0.125], [""2017-02-10 08:15:18.000000"", 0.375], [""2018-02-12 07:04:18.000000"", 0.5], [""2018-03-21 21:12:42.000000"", 0.75]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 16:22:23.000000"", ""2017-02-10 08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[20170206162223, ""2017-02-10 08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 16:22:23.000000"", 20170210081518, 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""16:22:23.000000"", ""2017-02-10 08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 16:22:23.000000"", ""08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""0000-00-00 00:00:00.000000"", ""2017-02-10 08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 16:22:23.000000"", ""0000-00-00 00:00:00.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-16 16:22:23.000000"", ""2017-02-10 08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_datetime UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""2017-02-06 16:22:23.000000"", ""2019-02-10 08:15:18.000000"", 0.375, 2], [""2018-02-12 07:04:18.000000"", ""2018-02-12 07:04:18.000000"", 0.5, 1], [""2018-03-21 21:12:42.000000"", ""2018-03-21 21:12:42.000000"", 0.75, 1]], ""data-type"": ""datetime"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 0.25], [""12.00"", 0.5], [23.00, 0.625], [52.00, 0.75]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 0.25], [12.00, 0.5], [23.00, 0.625], [9300000000000000000, 0.75]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 0.25], [12.00, 0.5], [23.00, 0.625], [1e100, 0.75]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 0.25], [12.00, 0.5], [23.00, 0.625], [5555.00, 0.75]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 0.25], [32.00, 0.5], [23.00, 0.625], [52.00, 0.75]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[""4.00"", 4.00, 0.25, 1], [12.00, 12.00, 0.5, 1], [23.00, 52.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 4.00, 0.25, 1], [12.00, ""12.00"", 0.5, 1], [23.00, 52.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[-1e100, 4.00, 0.25, 1], [12.00, 12.00, 0.5, 1], [23.00, 52.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 4.00, 0.25, 1], [12.00, 12.00, 0.5, 1], [23.00, 1e100, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[-1000.00, 4.00, 0.25, 1], [12.00, 12.00, 0.5, 1], [23.00, 52.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 4.00, 0.25, 1], [12.00, 12.00, 0.5, 1], [23.00, 1000.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 4.00, 0.25, 1], [13.00, 12.00, 0.5, 1], [23.00, 52.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ANALYZE TABLE tbl_decimal UPDATE HISTOGRAM ON col1 USING DATA '{""buckets"": [[4.00, 4.00, 0.25, 1], [12.00, 32.00, 0.5, 1], [23.00, 52.00, 0.75, 2]], ""data-type"": ""decimal"", ""auto-update"": false, ""null-values"": 0.25, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 3}'"
"ALTER TABLE t1 ADD COLUMN virtual_generated INT AS (col_integer + 10) VIRTUAL,
ADD COLUMN stored_generated INT AS (col_integer + 20) STORED"
"CREATE TABLE t1 (
c1 int(11) DEFAULT NULL,
c2 int(11) GENERATED ALWAYS AS ((c1 * 2)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4"
"CREATE TABLE foo (col1 INT,
col2 INT AS (col1 + 1) VIRTUAL,
col3 INT AS (col2 + 1) VIRTUAL)"
"CREATE TABLE t1 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int int(11) NOT NULL,
col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,
col_date date NOT NULL,
col_date_key date GENERATED ALWAYS AS ((col_date + interval 30 day))
VIRTUAL,
col_datetime datetime NOT NULL,
col_time time NOT NULL,
col_datetime_key datetime GENERATED ALWAYS AS
(addtime(col_datetime,col_time)) VIRTUAL,
col_time_key time GENERATED ALWAYS AS (addtime(col_datetime,col_time))
VIRTUAL,
col_varchar varchar(1) NOT NULL,
col_varchar_key varchar(2) GENERATED ALWAYS AS
(concat(col_varchar,col_varchar)) VIRTUAL,
PRIMARY KEY (pk),
KEY col_date_key (col_date_key)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4"
"CREATE TABLE t2 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int int(11) NOT NULL,
col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,
col_date date NOT NULL,
col_date_key date GENERATED ALWAYS AS ((col_date + interval 30 day))
VIRTUAL,
col_datetime datetime NOT NULL,
col_time time NOT NULL,
col_datetime_key datetime GENERATED ALWAYS AS
(addtime(col_datetime,col_time)) VIRTUAL,
col_time_key time GENERATED ALWAYS AS (addtime(col_datetime,col_time))
VIRTUAL,
col_varchar varchar(1) NOT NULL,
col_varchar_key varchar(2) GENERATED ALWAYS AS
(concat(col_varchar,col_varchar)) VIRTUAL,
PRIMARY KEY (pk),
KEY col_date_key (col_date_key)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4"
"CREATE TABLE t1 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int int(11) DEFAULT NULL,
col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,
col_date date DEFAULT NULL,
col_date_key date GENERATED ALWAYS AS ((col_date + interval 30 day)) VIRTUAL,
col_datetime datetime DEFAULT NULL,
col_time time DEFAULT NULL,
col_datetime_key datetime GENERATED ALWAYS AS (addtime(col_datetime,col_time)) VIRTUAL,
col_time_key time GENERATED ALWAYS AS (addtime(col_datetime,col_time)) VIRTUAL,
col_varchar varchar(1) DEFAULT NULL,
col_varchar_key varchar(2) GENERATED ALWAYS AS (concat(col_varchar,col_varchar)) VIRTUAL,
PRIMARY KEY (pk),
KEY col_date_key (col_date_key) /*!80000 INVISIBLE */
) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8mb4"
"CREATE TABLE t2 (
pk int(11) NOT NULL AUTO_INCREMENT,
col_int int(11) DEFAULT NULL,
col_int_key int(11) GENERATED ALWAYS AS ((col_int + col_int)) VIRTUAL,
col_date date DEFAULT NULL,
col_date_key date GENERATED ALWAYS AS ((col_date + interval 30 day)) VIRTUAL,
col_datetime datetime DEFAULT NULL,
col_time time DEFAULT NULL,
col_datetime_key datetime GENERATED ALWAYS AS (addtime(col_datetime,col_time)) VIRTUAL,
col_time_key time GENERATED ALWAYS AS (addtime(col_datetime,col_time)) VIRTUAL,
col_varchar varchar(1) DEFAULT NULL,
col_varchar_key varchar(2) GENERATED ALWAYS AS (concat(col_varchar,col_varchar)) VIRTUAL,
PRIMARY KEY (pk),
KEY col_date_key (col_date_key)
) ENGINE=InnoDB AUTO_INCREMENT=50 DEFAULT CHARSET=utf8mb4"
"ANALYZE TABLE t UPDATE HISTOGRAM ON x USING DATA '{""buckets"": [[""base64:type254:MA=="", 0.3333333333333333], [""base64:type254:MQ=="", 0.6666666666666666], [""base64:type254:Mg=="", 1.0]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 255, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE t UPDATE HISTOGRAM ON x USING DATA '{""buckets"": [[""base64:type254:MA=="", ""base64:type254:MQ=="", 0.6666666666666666, 2], [""base64:type254:Mg=="", ""base64:type254:Mg=="", 1.0, 1]], ""data-type"": ""string"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 255, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 2}'"
"ANALYZE TABLE t UPDATE HISTOGRAM ON x USING DATA '{""buckets"": [[0, 0.3333333333333333], [1, 0.6666666666666666], [2, 1.0]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""singleton"", ""number-of-buckets-specified"": 4}'"
"ANALYZE TABLE t UPDATE HISTOGRAM ON x USING DATA '{""buckets"": [[0, 1, 0.6666666666666666, 2], [2, 2, 1.0, 1]], ""data-type"": ""int"", ""auto-update"": false, ""null-values"": 0.0, ""collation-id"": 8, ""sampling-rate"": 1.0, ""histogram-type"": ""equi-height"", ""number-of-buckets-specified"": 2}'"
"GRANT some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890 TO root@localhost"
"GRANT u1@localhost TO some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890"
"REVOKE ALL ON *.* FROM some_user_name@host_1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890abcdefghij1234567890"
"EXPLAIN ANALYZE FORMAT=TREE SELECT * FROM t1 x1, t1 x2, t1 x3
WHERE x1.a=x2.a AND x2.b=x3.b AND x3.c=x1.c"
"CREATE TABLE t1 (
a INT,
b INT,
c INT,
d INT,
e INT,
f INT,
g INT,
PRIMARY KEY(a),
KEY k1 (b,d), --  'b' and 'd' are indepdendent.
KEY k2 (b,e), -- 'b' is funtionally dependent on 'e'.
KEY k3 (b,g), -- 'b' is funtionally dependent on 'g'.
KEY k4 (f,g) -- 'f' and 'g' are independet.
)"
"EXPLAIN ANALYZE FORMAT=TREE SELECT * FROM t1 x1 WHERE d =
(SELECT MIN(g) FROM t1 x2 WHERE x1.b<>x2.b)"
"EXPLAIN FORMAT=JSON INTO @explain_output
SELECT a FROM t1 x2 WHERE x2.b IN
(SELECT a FROM t1 x1 WHERE x1.b IN (SELECT a FROM t1 x0))"
"INSERT INTO t (a)
WITH RECURSIVE 150tup(n) AS
(SELECT 1 UNION ALL SELECT n + 1 FROM 150tup WHERE n < 150)
SELECT n FROM 150tup"
"EXPLAIN FORMAT=TREE
SELECT /*+ SET_VAR(optimizer_max_subgraph_pairs = 1) */ COUNT(*)
FROM t AS t1 LEFT JOIN t AS t2 ON TRUE,
LATERAL (SELECT DISTINCT t2.a FROM t) AS t3
WHERE t1.a = t3.a"
"chdir $ENV{'MYSQL_TMP_DIR'}"
"EOF
let $EXPORT_DIR= $MYSQL_TMP_DIR/export"
"opendir(TMP, ""$ENV{'MYSQL_TMP_DIR'}/export"")"
"chdir ""$ENV{'MYSQL_TMP_DIR'}/export"""
"my $base= $1"
"rename $_, ""${base}.sdi"""
"open(T1, ""t1.sdi"")"
"open(T1_, "">t1_.sdi"")"
"print T1_ $_"
close(T1_)
"REVOKE ALL ON *.* FROM noimportforyou@localhost"
"EOF

IMPORT TABLE FROM 't1_.sdi'"
"rename $_, ""${b}.sdi"""
next
"rename $_, ""${b}.MYD"""
"rename $_, ""${b}.MYI"""
"open(T1, ""t_case.sdi"")"
"open(T1_, "">t_case_.sdi"")"
"rename ""t_case_.sdi"", ""t_case.sdi"""
"EOF

IMPORT TABLE FROM 't_case.sdi'"
"EOF




IMPORT TABLE FROM 't_case.sdi'"
"CREATE TABLE t1 (i INT DEFAULT 42, dt DATETIME(3) DEFAULT CURRENT_TIMESTAMP(3),
de DECIMAL(10,2), j INT GENERATED ALWAYS AS (42+i)) ENGINE=MYISAM"
"GRANT SELECT ON *.* TO Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost"
"CREATE TABLE t1 (f1 DATE NOT SECONDARY)"
"ALTER TABLE  t1 MODIFY f1 DATE NOT SECONDARY"
"CREATE TABLE t1 (f1 INT) SECONDARY_ENGINE=myisam"
"ALTER TABLE t1 SECONDARY_ENGINE=myisam"
"SET @table = 't1'"
"EXECUTE ps1 USING @expected, @db, @table"
"my $passwd_file= $ENV{'PASSWD_FILE'} or die"
"my $FILE"
"print ""password found\n"""
"my $OUT_FILE"
"open(OUT_FILE, ""> $passwd_file"")"
"print OUT_FILE ""delimiter lessprobability;\n"""
"print OUT_FILE ""let new_pwd=$passwd"""
"print OUT_FILE ""lessprobability\n"""
"print OUT_FILE ""--delimiter ;\n"""
close(OUT_FILE)
"EOF

source $passwd_file"
"EOF

mkdir $DDIR"
"my $mysqldir=""$ENV{'DDIR'}/mysql"""
closedir($dh)
"my $bootstrap_file= $ENV{'BOOTSTRAP_SQL'} or die"
"open(OUT_FILE, ""> $bootstrap_file"") or die"
"print OUT_FILE ""INSTALL PLUGIN validate_password SONAME '"" or die"
"print OUT_FILE $ENV{'VALIDATE_PASSWORD'} or die"
"print OUT_FILE ""';\n"" or die"
"print OUT_FILE ""CREATE TABLE mysql.t1 AS SELECT * FROM INFORMATION_SCHEMA.plugins;\n"" or die"
"print OUT_FILE ""UNINSTALL PLUGIN validate_password;\n"" or die"
"print OUT_FILE ""CREATE DATABASE test;\n"" or die"
"EOF


remove_file $MYSQL_TMP_DIR/bug35254025init.sql"
"my $log= $ENV{'MYSQLD_LOG'} || die ""Failed to read MYSQLD_LOG from env: $!"""
"open(FILE, ""$log"") || die ""Failed to open error log: $!"""
"EOF


SELECT * FROM information_schema.schemata"
"EOF




connect(root_con,localhost,root,,mysql)"
"/* 8 */
INSERT INTO t1 (id) SELECT id FROM t1"
"/* 12 */
INSERT INTO t1 (id) SELECT id FROM t1"
"/* 16 */
INSERT INTO t1 (id) SELECT id FROM t1"
"/* 20 */
INSERT INTO t1 (id) SELECT id FROM t1"
"/* 24 */
INSERT INTO t1 SELECT id+1 FROM t1"
"CREATE TABLE t1(a INT,
b INT GENERATED ALWAYS AS (-a) VIRTUAL,
c INT GENERATED ALWAYS AS (-a) STORED)"
"CREATE TABLE t1 (
Ã INTEGER,
N INTEGER,
a INTEGER,
b INTEGER,
c INTEGER,
d INTEGER,
e INTEGER,
f INTEGER,
g INTEGER,
h INTEGER,
i INTEGER,
j INTEGER,
k INTEGER,
l INTEGER,
m INTEGER,
na INTEGER,
o INTEGER,
p INTEGER,
q INTEGER,
r INTEGER,
s INTEGER,
t INTEGER,
u INTEGER,
v INTEGER,
w INTEGER,
x INTEGER,
y INTEGER,
z INTEGER,
aa INTEGER,
ab INTEGER,
ac INTEGER,
ad INTEGER
)"
"INSERT INTO t1 (Ã, N) VALUES (1, 2)"
"CREATE TABLE t1 (f1 INTEGER, b INTEGER AS ((1)) INVISIBLE, KEY k1(b))"
enable_info
disable_info
"CREATE TABLE t1(f1 INT INVISIBLE, f2 INT)"
"CREATE TABLE t1 (f1 INT, f2 INT PRIMARY KEY INVISIBLE)"
"CREATE TABLE t2 (f1 INT PRIMARY KEY INVISIBLE, f2 INT,
CONSTRAINT FOREIGN KEY (f1) REFERENCES t1(f2))"
"ALTER TABLE t1 ALTER COLUMN f1 SET INVISIBLE, ALGORITHM = INPLACE"
"ALTER TABLE t1 CHANGE f1 f1 INT VISIBLE, ALGORITHM = INPLACE"
"ALTER TABLE t1 MODIFY f1 INT INVISIBLE, ALGORITHM = INPLACE"
"ALTER TABLE t1 ALTER COLUMN f1 SET INVISIBLE, ALGORITHM = INSTANT"
"ALTER TABLE t1 CHANGE f1 f1 INT VISIBLE, ALGORITHM = INSTANT"
"ALTER TABLE t1 MODIFY f1 INT INVISIBLE, ALGORITHM = INSTANT"
"CREATE TABLE t1(a INT, b DATE NOT NULL INVISIBLE)
PARTITION BY RANGE( YEAR(b) ) (
PARTITION p0 VALUES LESS THAN (1960),
PARTITION p1 VALUES LESS THAN (1970),
PARTITION p2 VALUES LESS THAN (1980),
PARTITION p3 VALUES LESS THAN (1990))"
"CREATE TABLE t1(id INT NOT NULL INVISIBLE, name VARCHAR(10))
PARTITION BY LIST(id) (
PARTITION p0 VALUES IN (10,19),
PARTITION p1 VALUES IN (20,29),
PARTITION p2 VALUES IN (30,39),
PARTITION p3 VALUES IN (40,49))"
"CREATE TABLE t1(id INT NOT NULL INVISIBLE, name VARCHAR(40))
PARTITION BY HASH(id)
PARTITIONS 4"
"CREATE TABLE t1(id INT PRIMARY KEY NOT NULL INVISIBLE, name VARCHAR(40))
PARTITION BY KEY()
PARTITIONS 4"
"CREATE TABLE t1 (f1 INT PRIMARY KEY INVISIBLE, f2 INT UNIQUE INVISIBLE,
f3 INT, FOREIGN KEY (f2) REFERENCES t1(f1))"
"CREATE TABLE t1 ( a INT GENERATED ALWAYS AS (1), KEY (a) INVISIBLE )"
"SELECT *
FROM t1
NATURAL JOIN (
SELECT t2.*
FROM t1 AS t2 JOIN t1 AS t3 ON t3.c1 = t2.c1
WHERE t2.c3 <> ANY (SELECT c3 FROM t1)
) AS d1"
"EXPLAIN SELECT * FROM t1 AS x3 WHERE EXISTS
(SELECT * FROM t1 AS x1 JOIN t1 AS x2 ON x1.b=x2.b
JOIN LATERAL (SELECT COUNT(a) AS c FROM t1
WHERE t1.b=x1.b) AS d3 ON x1.b=c)"
"SELECT *
FROM t1, t2, LATERAL (
SELECT pk, blobfield
GROUP BY pk, blobfield WITH ROLLUP
) AS d1
ORDER BY t1.f1, t2.pk"
"SELECT MIN(t3.f1)
FROM (t2 JOIN (t3 JOIN (SELECT t1.*
FROM t1
WHERE t1.f2 < t1.f2) AS dt
ON (dt.f1 = t3.f1))
ON (dt.f2 = t3.f2))
WHERE (dt.f2 <> ANY (SELECT t1.f1 FROM t1 WHERE t1.f2 = dt.f2))"
"create table t4 like t3"
"create table t5 like t4"
"create table t6 like t5"
"create table t7 like t6"
"create table t3 like t2"
"create table ti (k int, index using btree (k)) charset utf8mb4 engine=innodb"
"create table th (k int, index using btree (k)) charset utf8mb4 engine=heap"
"alter table ti add column l int, add index using btree (l)"
"alter table th add column l int, add index using hash (l)"
"create table ti (k int, index using hash (k)) charset utf8mb4 engine=innodb"
"alter table ti add column l int, add index using hash (l)"
"create table t1 (k int, index using btree (k)) charset utf8mb4 engine=innodb"
"create table t1 (k int, index using hash (k)) charset utf8mb4 engine=heap"
"create table t1 (k int, index using btree (k), index using hash (k)) engine=heap"
"create table t1 (k int, index (k), index using hash (k)) engine=heap"
"create table t1 (k int, index using btree (k), index (k)) engine=innodb"
"create table t1 (k int, index using btree (k), index using hash (k)) engine=innodb"
"SELECT @@global.default.key_buffer_size"
"SELECT @@global.default.`key_buffer_size`"
"create table t3 (like t1)"
"create table tm (k int, index using btree (k)) charset utf8mb4 engine=myisam"
"alter table tm add column l int, add index using btree (l)"
"alter table t1 drop key k, add index using btree (k), algorithm=inplace"
"alter table t1 drop key k, add index using hash (k), algorithm=inplace"
"alter table t1 drop key k, add index using btree (k), algorithm=copy"
"require Expect"
"my $texp = new Expect()"
$texp->raw_pty(1)
$texp->log_stdout(0)
"$texp->log_file(""$ENV{MYSQLD_LOG}"", ""w"")"
"$texp->spawn(""$ENV{MYSQLD} $ENV{MYSQLD_ARGS}"")"
"$texp->expect(15,' -re ',[ 'Enter password:' => sub {
$texp->send(""a\n"")"
$texp->soft_close()
connect
"SELECT ADDTIME(LEAD(time'18:00:00', 0) OVER (ORDER BY NULL), '01:00:00')"
"SELECT ADDTIME(LEAD(NULL, 1, time'18:00:00') OVER (ORDER BY NULL), '01:00:00')"
"SELECT ADDDATE(LEAD(NULL, 1, date'1955-05-15') OVER (ORDER BY NULL), 1)"
"SELECT ADDDATE(LEAD(date'1955-05-15', 0) OVER (ORDER BY NULL), 1)"
"load data from infile '../../std_data/loaddata1.dat'
into table t1 fields terminated by ',' ignore 2 lines"
"load data infile '../../std_data/loaddata1.dat' in primary key order
into table t1 fields terminated by ',' ignore 2 lines"
"CREATE TABLE t1 (
json_col JSON , KEY json_col ((CAST(json_col -> '$' AS UNSIGNED ARRAY)))
)"
"CREATE TABLE ibstd_03 (
a INT NOT NULL,
d INT NOT NULL,
b BLOB NOT NULL,
c TEXT,
vadcol INT AS (a+length(d)) STORED,
vbcol CHAR(2) AS (substr(b,2,2)) VIRTUAL,
vbidxcol CHAR(3) AS (substr(b,1,3)) VIRTUAL
)
"
"ALTER TABLE testtable_1 ALGORITHM=INPLACE, ADD COLUMN c3 VARCHAR(255)"
"OPTIMIZE TABLES columns_priv, db, user"
"SELECT 1 FROM DUAL LIMIT 1 FOR UPDATE INTO @var"
"SELECT 1 UNION SELECT 1 FOR UPDATE INTO @var"
"my $file_trad= $ENV{'LOG_FILE_TRAD'}"
"my $file_json= $ENV{'LOG_FILE_JSON'}"
"my $file_conv= $ENV{'LOG_FILE_JSON_TO_TRAD'}"
"my @log_lines_trad=<FILET>"
close(FILET)
"print ""[ PASS ] Successfully read traditional log file.\n"""
"my @log_lines_json=<FILEJ>"
close(FILEJ)
"print ""[ PASS ] Successfully read JSON log file.\n"""
"$string =~ s/\}\n\{/\},\n\{/g "
"my $parsed_json = decode_json $string"
"unless ( $parsed_json )
{
print ""[ FAIL ] Error while parsing the error log as a JSON document:"".
""\n$@\n"""
$success=0
"my $line_count=0"
"for my $item( sort { $a->{time} cmp $b->{time} } @$parsed_json ) {
my $errcode_formatted= sprintf(""%06d"", $item->{'err_code'})"
"my $label= ($item->{'label'} =~ ""Error"") ? uc $item->{'label'}
: $item->{'label'}"
"my $msg= $item->{'msg'}"
"print $outfh $item->{'time'}."" "".$thread_id."" "".""["".$label.""] [MY-"".
$errcode_formatted.""] ["".$item->{'subsystem'}.""] "".$msg . ""\n"""
$line_count++
"use File::Compare"
"my $compare = compare($file_conv, $file_trad)"
"$/ = undef"
"my $contents"
"print ""\n--- Contents of converted file, "".$file_conv."" ---\n"""
"open my $fh, '<', $file_conv or die(""Unable to open $file_conv $!\n"")"
"$contents = <$fh>"
"close $fh"
"print $contents"
"print ""\n--- Contents of native trad file, "".$file_trad."" ---\n"""
"open my $fh, '<', $file_trad or die(""Unable to open $file_trad $!\n"")"
"print ""--- end of inserted log ---\n\n"""
"RESET PERSIST log_error_suppression_list"
"use File::stat"
"my $pattern=""^20"""
"my $stime= $ENV{'GREP_START'}"
"my $ts = 0"
$ts=$1.$2.$3.$4.$5.$6.$7
"$line =~ s/""err_code"" : \d+, //"
"print ""$line"""
"EOF

SET @@global.log_error_verbosity=@old_log_error_verbosity"
"RESET PERSIST `syseventlog.tag`"
disable_warnings
"log_sink_test"";

disable_warnings;
SET @@global.dragnet.log_error_filter_rules= @rules;
SET @@global.log_error_services=""log_filter_dragnet"
"RESET PERSIST `syseventlog.include_pid`"
"RESET PERSIST `syseventlog.facility`"
"my $file= $ENV{'LOG_FILE'} or die(""logfile not set"")"
"my $result=0"
"print $line"
"my $pattern= ""Turning logging off for the server"""
"open(FILE, ""$file"") or die(""Unable to open $file: $!\n"")"
"my $count = 0"
break
"RESET PERSIST `dragnet.log_error_filter_rules`"
"RESET PERSIST `log_error_suppression_list`"
"RESET PERSIST `log_error_services`"
"my $ignore_regex= scalar(@ignore_patterns)?
""("". join('|', @ignore_patterns). "")"":
"""""
"next if $ignore_regex and $line =~ /$ignore_regex/"
$result=1
"my $result_note=0"
"my $result_warning=0"
print
$result_note=0
$result_warning=0
$result=0
"my $verbosity_adjust_message_logged= 0"
"$verbosity_adjust_message_logged= 0"
"open(FILE,""$file"") or die(""Unable to open $file $!\n"")"
"my @log_lines=<FILE>"
"my $parsed_json"
"my $success=1"
"$parsed_json = decode_json $string"
"unless ( $parsed_json )
{
print ""[ FAIL ] Error while parsing the error log as a json document:\n$@\n"""
"for my $item( @$parsed_json ){
if ( $item->{'msg'} =~ /Access denied for user \'unknown_user\'/) {
print ""[ PASS ] Expected entry found in the json error log: "" . $item->{'msg'} . ""\n"""
"print ""[ FAIL ] Offender: $line\n"""
"create table general_log_new like general_log"
"create table slow_log_new like slow_log"
"FLUSH TABLE mysql.general_log"
"FLUSH TABLE mysql.slow_log"
"set @lparam = ""000 001 002 003 004 005 006 007 008 009""
""010 011 012 013 014 015 016 017 018 019""
""020 021 022 023 024 025 026 027 028 029""
""030 031 032 033 034 035 036 037 038 039""
""040 041 042 043 044 045 046 047 048 049""
""050 051 052 053 054 055 056 057 058 059""
""060 061 062 063 064 065 066 067 068 069""
""070 071 072 073 074 075 076 077 078 079""
""080 081 082 083 084 085 086 087 088 089""
""090 091 092 093 094 095 096 097 098 099""
""100 101 102 103 104 105 106 107 108 109""
""110 111 112 113 114 115 116 117 118 119""
""120 121 122 123 124 125 126 127 128 129""
""130 131 132 133 134 135 136 137 138 139""
""140 141 142 143 144 145 146 147 148 149""
""150 151 152 153 154 155 156 157 158 159""
""160 161 162 163 164 165 166 167 168 169""
""170 171 172 173 174 175 176 177 178 179""
""180 181 182 183 184 185 186 187 188 189""
""190 191 192 193 194 195 196 197 198 199""
""200 201 202 203 204 205 206 207 208 209""
""210 211 212 213 214 215 216 217 218 219""
""220 221 222 223 224 225 226 227 228 229""
""230 231 232 233 234 235 236 237 238 239""
""240 241 242 243 244 245 246 247 248 249""
""250 251 252 253 254 255 256 257 258 259""
""260 261 262 263 264 265 266 267 268 269""
""270 271 272 273 274 275 276 277 278 279""
""280 281 282 283 284 285 286 287 288 289""
""290 291 292 293 294 295 296 297 298 299""
""300 301 302 303 304 305 306 307 308 309""
""310 311 312 313 314 315 316 317 318 319""
""320 321 322 323 324 325 326 327 328 329""
""330 331 332 333 334 335 336 337 338 339""
""340 341 342 343 344 345 346 347 348 349""
""350 351 352 353 354 355 356 357 358 359""
""360 361 362 363 364 365 366 367 368 369""
""370 371 372 373 374 375 376 377 378 379""
""380 381 382 383 384 385 386 387 388 389""
""390 391 392 393 394 395 396 397 398 399""
""400 401 402 403 404 405 406 407 408 409""
""410 411 412 413 414 415 416 417 418 419""
""420 421 422 423 424 425 426 427 428 429""
""430 431 432 433 434 435 436 437 438 439""
""440 441 442 443 444 445 446 447 448 449""
""450 451 452 453 454 455 456 457 458 459""
""460 461 462 463 464 465 466 467 468 469""
""470 471 472 473 474 475 476 477 478 479""
""480 481 482 483 484 485 486 487 488 489""
""490 491 492 493 494 495 496 497 498 499""
""500 501 502 503 504 505 506 507 508 509""
""510 511 512 513 514 515 516 517 518 519""
""520 521 522 523 524 525 526 527 528 529""
""530 531 532 533 534 535 536 537 538 539""
""540 541 542 543 544 545 546 547 548 549""
""550 551 552 553 554 555 556 557 558 559""
""560 561 562 563 564 565 566 567 568 569""
""570 571 572 573 574 575 576 577 578 579""
""580 581 582 583 584 585 586 587 588 589""
""590 591 592 593 594 595 596 597 598 599""
""600 601 602 603 604 605 606 607 608 609""
""610 611 612 613 614 615 616 617 618 619""
""620 621 622 623 624 625 626 627 628 629""
""630 631 632 633 634 635 636 637 638 639""
""640 641 642 643 644 645 646 647 648 649""
""650 651 652 653 654 655 656 657 658 659""
""660 661 662 663 664 665 666 667 668 669""
""670 671 672 673 674 675 676 677 678 679""
""680 681 682 683 684 685 686 687 688 689""
""690 691 692 693 694 695 696 697 698 699""
""700 701 702 703 704 705 706 707 708 709""
""710 711 712 713 714 715 716 717 718 719""
""720 721 722 723 724 725 726 727 728 729""
""730 731 732 733 734 735 736 737 738 739""
""740 741 742 743 744 745 746 747 748 749""
""750 751 752 753 754 755 756 757 758 759""
""760 761 762 763 764 765 766 767 768 769""
""770 771 772 773 774 775 776 777 778 779""
""780 781 782 783 784 785 786 787 788 789""
""790 791 792 793 794 795 796 797 798 799""
""800 801 802 803 804 805 806 807 808 809""
""810 811 812 813 814 815 816 817 818 819""
""820 821 822 823 824 825 826 827 828 829""
""830 831 832 833 834 835 836 837 838 839""
""840 841 842 843 844 845 846 847 848 849""
""850 851 852 853 854 855 856 857 858 859""
""860 861 862 863 864 865 866 867 868 869""
""870 871 872 873 874 875 876 877 878 879""
""880 881 882 883 884 885 886 887 888 889""
""890 891 892 893 894 895 896 897 898 899""
""900 901 902 903 904 905 906 907 908 909""
""910 911 912 913 914 915 916 917 918 919""
""920 921 922 923 924 925 926 927 928 929""
""930 931 932 933 934 935 936 937 938 939""
""940 941 942 943 944 945 946 947 948 949""
""950 951 952 953 954 955 956 957 958 959""
""960 961 962 963 964 965 966 967 968 969""
""970 971 972 973 974 975 976 977 978 979""
""980 981 982 983 984 985 986 987 988 989""
""990 991 992 993 994 995 996 997 998 999"""
"$conn_id= $ENV{'CONN_ID'}"
"print ""Contents of log file:\n"""
"seek(FILE, 0, 0)"
"EOF





SELECT @@session.long_query_time INTO @old_long_query_time"
"my $c_w= grep(/Different lower_case_table_names settings/gi,<FILE>)"
"print ""#    Found lower_case_table_names error $c_w times.\n"""
"create table t2 like T1"
"drop table if exists Ä°,Ä°Ä°"
"create table Ä° (s1 int)"
"show create table Ä°"
"drop table Ä°"
"create table Ä°Ä° (s1 int)"
"show create table Ä°Ä°"
"drop table Ä°Ä°"
"CREATE TABLE TestTable2 LIKE TestTable1"
"CREATE TABLE T2 LIKE T1"
"EOF



set names utf8mb3"
"EOF




drop table if exists t1Aa,t2Aa,v1Aa,v2Aa"
"CREATE TABLE t1_new LIKE t1_src"
"CREATE TABLE t2_new LIKE t2_src"
"CREATE TABLE m1 LIKE t1"
"CREATE TABLE m1(a INT) ENGINE=MERGE UNION=()"
"ALTER TABLE m1 UNION=()"
"CREATE TABLE t4 LIKE t3"
"CREATE TEMPORARY TABLE t4 LIKE t3"
"CALL mtr.add_suppression(""REVOKE/GRANT failed while storing table level ""
""and column level grants in the privilege ""
""tables. An incident event has been written to ""
""the binary log which will stop the slaves."")"
"CALL mtr.add_suppression(""REVOKE/GRANT failed while granting/revoking ""
""privileges in databases. An incident event ""
""has been written to the binary log which ""
""will stop the slaves."")"
"SET @before:= (SELECT MAX_DATA_LENGTH FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='t1' AND TABLE_SCHEMA='test')"
"SELECT @before=@after"
"CREATE TABLE ta (pk INT, embedding VECTOR(4), PRIMARY KEY (pk)) ENGINE=MyISAM"
"FLUSH TABLE mysql_db1.t1"
"print FILE ""select\n"""
"print FILE ""'a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a','a',\n"" x 3400"
"print FILE ""'b';\n"""
"EOF





create table t17583 (a int)"
"EOF
remove_file $MYSQLTEST_VARDIR/tmp/mysqltest.sql"
"EOF






DROP DATABASE db1"
"1,a
2,b
EOF
1,a
2,b
EOF
1,a
2,b
EOF

CREATE TABLE test.wl13168(id INT PRIMARY KEY, data VARCHAR(50))"
"EOF



remove_file $cmd_file"
"my $dir = $ENV{'MYSQLTEST_VARDIR'}"
"open ( OUTPUT, "">$dir/tmp/zoneinfocheck.inc"") "
@path=()
"EOF



if (!$zoneinfo_japan_path) {
--skip Unable to locate zoneinfo/Japan
}
if (!$zoneinfo_europe_path) {
--skip Unable to locate zoneinfo/Europe
}

CREATE DATABASE test_zone"
"CREATE TABLE test.slave_master_info_backup LIKE mysql.slave_master_info"
"[client]
loose-database=db2
EOF


remove_file $MYSQLTEST_VARDIR/tmp/bug10608.cnf"
"EOF


[client]
host = 127.0.0.1
EOF






[client]
host = 127.0.0.1
EOF




CREATE USER testadmin_user1"
"insert into t5 select * from `Ã¤Ã¶Ã¼ÃÃÃ`
EOF

flush logs"
"EOF


diff_files $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn $MYSQLTEST_VARDIR/tmp/mysqlbinlog.warn.empty"
enable_warnings
"(`$MYSQL_BINLOG --raw --read-from-remote-server --stop-never --user=root --host=127.0.0.1 --port=$MASTER_MYPORT --result-file=$MYSQL_TMP_DIR/ binlog.000001 ; [ $? -le 1 ]` && $MYSQL -e ""use test; INSERT INTO raw_mode_exit VALUES (1);"") < /dev/null > /dev/null 2>&1 &
EOF
let $wait_condition= SELECT id from information_schema.processlist where processlist.command like '%Binlog%' and state like '%Source has sent%'"
"$timeout= 30"
"$binlog= $ENV{'MYSQL_TMP_DIR'} . '/binlog.000003'"
"$binlog_exists= 0"
$timeout--
"DROP TABLE IF EXISTS t1, `t``1`, `t 1`"
"SET @create = IF(@have_ndb = 0, @create_cmd, 'SET @dummy = 0')"
"SET @drop = IF(@have_ndb = 0, @drop_cmd, 'SET @dummy = 0')"
"PREPARE create_stmt FROM @create"
"PREPARE drop_stmt FROM @drop"
"create table `t``1`(a int) engine=myisam"
"drop table `t``1`, `t 1`"
"EOF
CREATE TABLE db2.t2 (a INT)"
"my $mysqld_log= $ENV{'MDF_LOG'}"
"open(MYSQLD_LOG, $mysqld_log) || die ""1 - Failed to open '$mysqld_log': $!"""
"open(MYSQLD_LOG, $mysqld_log) || die ""2 - Failed to open '$mysqld_log': $!"""
"my $test_dir= $ENV{'MYSQL_TEST_DIR_ABS'}"
"open(MYSQLD_LOG, $mysqld_log) || die ""3 - Failed to open '$mysqld_log': $!"""
s/$test_dir/MYSQL_TEST_DIR/
"open(MYSQLD_LOG, $mysqld_log) || die ""4 - Failed to open '$mysqld_log': $!"""
"open(MYSQLD_LOG, $mysqld_log) || die ""5 - Failed to open '$mysqld_log': $!"""
"open(MYSQLD_LOG, $mysqld_log) || die ""6 - Failed to open '$mysqld_log': $!"""
"open ( OUTPUT, "">$dir/tmp/mysqld_path_file.inc"") "
"my $path = $ENV{MYSQLD}"
"$path =~ /^(.*)\/([^\/]*)$/"
"print OUTPUT ""let \$mysqld_path = $1;\n"""
"print OUTPUT ""let \$mysqld_bin = $2;\n"""
"close (OUTPUT)"
"EOF




let BOOTSTRAP_SQL=$MYSQL_TMP_DIR/boot.sql"
"[mysqld]
binlog_format=MIXED
EOF



connection default"
"open FILE, ""$ENV{'MYSQLD_DATADIR'}/mysqldump_long_query_time-slow.log"" or die"
"my @lines = <FILE>"
"foreach $line (@lines) {
if ($line =~ /^select/) {
print $line"
"create table ```a` (i int)"
"drop table ```a`"
"CREATE TABLE `t1` (
`a b` INT,
`c""d` INT,
`e``f` INT,
PRIMARY KEY (`a b`, `c""d`, `e``f`)
) ENGINE=MyISAM DEFAULT CHARSET=latin1"
"/*!50003 CREATE FUNCTION `f`() RETURNS bigint(20)
return 42 */"
"/*!50003 CREATE PROCEDURE `p`()
select 42 */"
"revoke all privileges on mysqldump_myDB.* from myDB_User@localhost"
"CREATE TABLE t1 (pk INTEGER, a INTEGER, b INTEGER, c VARCHAR(16),
sum INTEGER GENERATED ALWAYS AS (a+b),
sub VARCHAR(4) GENERATED ALWAYS AS (SUBSTRING(c, 1, 4)),
key k1(sum),
key k2(sub)
) engine=innodb"
"CREATE TABLE t2 (pk INTEGER, a INTEGER, b INTEGER,
sum INTEGER GENERATED ALWAYS AS (a+b),
c VARCHAR(16),
key k1(sum)
) engine=innodb"
"CREATE TABLE t2(f1 INT, f2 INT INVISIBLE)"
"CREATE TABLE t1 (my_row_id bigint unsigned NOT NULL AUTO_INCREMENT INVISIBLE, f INT,
PRIMARY KEY(my_row_id))"
"CREATE TABLE t2 (f1 INT, f2 INT INVISIBLE DEFAULT 10)"
"CREATE USER IF NOT EXISTS view_u2@my.oracle.com"
"CREATE USER IF NOT EXISTS event_u2@192.1.1.140"
"CREATE USER IF NOT EXISTS trig_u2@xyz.com"
"CREATE DEFINER=view_u2@my.oracle.com VIEW v3 AS SELECT * FROM t1"
"CREATE DEFINER=view_u2@my.oracle.com VIEW v4 AS SELECT * FROM t1"
"CREATE DEFINER=event_u2@192.1.1.140 EVENT e3 ON SCHEDULE AT '2037-01-01 00:00:00' DISABLE DO SET @a = 5"
"CREATE DEFINER=event_u2@192.1.1.140 EVENT e4 ON SCHEDULE AT '2037-01-01 00:00:00' DISABLE DO SET @a = 5"
"CREATE DEFINER=trig_u2@xyz.com TRIGGER trig3 BEFORE INSERT ON t1 FOR EACH ROW SET @sum = 1"
"CREATE DEFINER=trig_u2@xyz.com TRIGGER trig4 BEFORE INSERT ON t1 FOR EACH ROW SET @sum = 1"
"DROP USER view_u1, view_u2@my.oracle.com, event_u1, event_u2@192.1.1.140, trig_u1, trig_u2@xyz.com,
proc_u1, proc_u2@localhost, func_u1, func_u2, user_not_referenced_as_definer"
"CREATE TABLE x1 (c0 BLOB AS ('a') VIRTUAL, c1 INT)"
"CREATE TABLE x2 (c1 INT, c0 BLOB AS ('a') VIRTUAL)"
"CREATE TABLE x3 (c0 BLOB AS ('a') VIRTUAL INVISIBLE, c1 INT)"
"CREATE TABLE x4 (c1 INT, c0 BLOB AS ('a') VIRTUAL INVISIBLE)"
"CREATE TABLE x5 (c0 BLOB AS ('a') STORED, c1 INT)"
"CREATE TABLE x6 (c1 INT, c0 BLOB AS ('a') STORED)"
"CREATE TABLE x7 (c0 BLOB AS ('a') STORED INVISIBLE, c1 INT)"
"CREATE TABLE x8 (c1 INT, c0 BLOB AS ('a') STORED INVISIBLE)"
"CREATE UNIQUE INDEX i1 ON t1 (c0, (TIME '-1:0:0'))"
"CREATE EVENT mysqldump_test_db.replica_event ON SCHEDULE EVERY 3 SECOND DISABLE ON REPLICA DO SELECT 1"
"CREATE TABLE t1 (a INT) SECONDARY_ENGINE=gizmo"
"1
2
3
EOF


SELECT * FROM b12688860_db.b12688860_tab"
"1
2
3
EOF


echo # cleanup
DROP TABLE b34999015_db.`KEY`"
"/*!99999 SET @@SESSION.non_supported_session_variable = 1*/"
"REVOKE ALL PRIVILEGES ON *.* FROM user1"
"CREATE TEMPORARY TABLE Temp3 LIKE Temp2"
"CREATE TEMPORARY TABLE tt1 LIKE performance_schema.setup_consumers"
"SELECT 1 WHERE 1 =
ANY (SELECT GROUPING(a) FROM t1 GROUP BY a WITH ROLLUP)"
"SELECT a, b, a + COALESCE(b, 0), AVG(b) OVER () FROM t1 GROUP BY a, b WITH ROLLUP"
"EXPLAIN FORMAT=tree SELECT i, j, i+j, AVG(j) over () from t1 GROUP BY i,j
WITH ROLLUP HAVING i+j is NULL ORDER BY i"
"SELECT i, j, i+j, AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP
HAVING i+j is NULL ORDER BY i"
"SELECT i, j, i+j, AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP
HAVING i+j is NULL ORDER BY GROUPING(i)"
"SELECT i, j, i+j, AVG(j), AVG(j) over () from t1 GROUP BY i,j WITH ROLLUP
HAVING GROUPING(j)+AVG(j) > 11 ORDER BY GROUPING(i)"
"EXPLAIN FORMAT=TREE SELECT /*+ JOIN_PREFIX(t1) */ 1 FROM t1,LATERAL (SELECT DISTINCT t2.val FROM t2 WHERE t1.val = t2.val) AS dt"
"EXPLAIN FORMAT=TREE SELECT /*+ JOIN_PREFIX(dt) */ 1 FROM t1,LATERAL (SELECT DISTINCT t2.val FROM t2 WHERE t1.val = t2.val) AS dt"
"EXPLAIN FORMAT=JSON SELECT
id, AVG(id) over w `avg`, SUM(id) OVER w `sum`, COUNT(*) OVER w cnt
FROM t1 WINDOW w as (ORDER BY id RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT /*+ SET_VAR(windowing_use_high_precision=OFF)*/
d, AVG(d) over w `avg`, SUM(d) OVER w `sum`, COUNT(*) OVER w cnt
FROM t1 WINDOW w as (ORDER BY d RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"create procedure p1()
select COUNT(*)
FROM v1 WHERE f1 IN
(SELECT f1 FROM t2 WHERE f1 = ANY (SELECT f1 FROM v1))"
"CREATE TABLE t1(id INT AUTO_INCREMENT,
c1 VARCHAR(10), c2 VARCHAR(10), c3 VARCHAR(10),
PRIMARY KEY(id)) SECONDARY_ENGINE MOCK"
"INSERT INTO t VALUES(1, x'4142434445464748494a414243444546', 'WRITEBACK',
0, TIMESTAMP'2020-01-01 00:00:00.000000', NULL)"
"revoke all privileges on *.* from user_1@localhost"
"((SELECT 1 FROM t1 ORDER BY 1) ORDER BY 1) ORDER BY 1"
"((SELECT 1 FROM t1 LIMIT 1) LIMIT 1) LIMIT 1"
"( (SELECT 1 UNION SELECT 1 ) UNION SELECT 1 ) UNION SELECT 1"
"((SELECT 1 FROM t1)  UNION   SELECT 2 FROM t1)"
"(((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1)"
"((((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1))"
"((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1))"
"(((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1)))"
"((((SELECT 1 FROM t1)) UNION  (SELECT 2 FROM t1)))"
"(((SELECT 1 FROM t1)  UNION ((SELECT 2 FROM t1))))"
"((((SELECT 1 FROM t1)) UNION ((SELECT 2 FROM t1))))"
"((SELECT 1) ORDER BY 1)"
"((SELECT 1) LIMIT 1)"
"SELECT * FROM   ((SELECT 1 FROM t1)  UNION   SELECT 2 FROM t1) dt"
"SELECT * FROM  (((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1) dt"
"SELECT * FROM ((((SELECT 1 FROM t1)) UNION   SELECT 2 FROM t1)) dt"
"SELECT * FROM   ((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1)) dt"
"SELECT * FROM  (((SELECT 1 FROM t1)  UNION  (SELECT 2 FROM t1))) dt"
"SELECT * FROM ((((SELECT 1 FROM t1)) UNION  (SELECT 2 FROM t1))) dt"
"SELECT * FROM  (((SELECT 1 FROM t1)  UNION ((SELECT 2 FROM t1)))) dt"
"SELECT * FROM ((((SELECT 1 FROM t1)) UNION ((SELECT 2 FROM t1)))) dt"
"SELECT 1 FROM ((SELECT 2) ORDER BY 1) AS res"
"SELECT 1 FROM ((SELECT 2) LIMIT 1) AS res"
"((SELECT 1 UNION SELECT 1) UNION SELECT 1)"
"SELECT * FROM ((SELECT 1 UNION SELECT 1) UNION SELECT 1) a"
"((SELECT 1) UNION (SELECT 1 INTO @v FROM t1))"
"((SELECT 1) UNION (SELECT 2 INTO OUTFILE 'parser.test.file5'))"
"select 2 as expected, /*!01000/**/*/ 2 as result"
"select 1 as expected, /*!99998/**/*/ 1 as result"
"select 7 as expected, /*!01000 1 + /* 8 + */ 2 + */ 4 as result"
"select 8 as expected, /*!99998 1 + /* 2 + */ 4 + */ 8 as result"
"select 7 as expected, /*!01000 1 + /*!01000 8 + */ 2 + */ 4 as result"
"select 7 as expected, /*!01000 1 + /*!99998 8 + */ 2 + */ 4 as result"
"select 4 as expected, /*!99998 1 + /*!99998 8 + */ 2 + */ 4 as result"
"select 4 as expected, /*!99998 1 + /*!01000 8 + */ 2 + */ 4 as result"
"select 7 as expected, /*!01000 1 + /*!01000 8 + /*!01000 error */ 16 + */ 2 + */ 4 as result"
"select 4 as expected, /* 1 + /*!01000 8 + */ 2 + */ 4"
"EXPLAIN ((SELECT * FROM t3 ORDER BY a LIMIT 3)
ORDER BY b DESC LIMIT 2)
ORDER BY c LIMIT 1"
"SELECT 'a%' LIKE 'a!%' ESCAPE '!', 'a%' LIKE 'a!' || '%' ESCAPE '!'"
"SELECT 'a%' NOT LIKE 'a!%' ESCAPE '!', 'a%' NOT LIKE 'a!' || '%' ESCAPE '!'"
"SELECT 'a%' LIKE 'a!%' ESCAPE '$', 'a%' LIKE 'a!' || '%' ESCAPE '$'"
"SELECT 'a%' NOT LIKE 'a!%' ESCAPE '$', 'a%' NOT LIKE 'a!' || '%' ESCAPE '$'"
"SELECT 1 UNION SELECT 1 FROM DUAL FOR UPDATE INTO @var"
"(SELECT 1 UNION SELECT 1 FROM DUAL FOR UPDATE INTO @var)"
"WITH cte AS (SELECT 0 /*! ) */ SELECT * FROM cte a, cte b"
"WITH cte AS /*! ( */ SELECT 0) SELECT * FROM cte a, cte b"
"(SELECT 1) LIMIT 1 INTO @var"
"(SELECT 2 AS c) ORDER BY c INTO @var"
"(SELECT 3 AS c) ORDER BY c LIMIT 1 INTO @var"
"SELECT cast( NULL AT TIME ZONE 'UTC' AS DATETIME )"
"((SELECT * FROM t1 ORDER BY i) ORDER BY i) ORDER BY i"
"ALTER TABLE t1 DROP PARTITION p0"
"abcd
EOF

CREATE TABLE t1
(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
name TINYBLOB NOT NULL,
modified TIMESTAMP DEFAULT '0000-00-00 00:00:00',
INDEX namelocs (name(255))) ENGINE = InnoDB
PARTITION BY HASH(id) PARTITIONS 2"
"CREATE TABLE t1_1 (
`col1` int(11) DEFAULT NULL,
`col2` int(11) DEFAULT NULL,
`col3` int(11) DEFAULT NULL,
`col4` text,
`col5` varchar(500) GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL,
`col6` text GENERATED ALWAYS AS (substr(`col4`,1,500)) VIRTUAL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
/*!50100 PARTITION BY RANGE ((`col1` * 2))
(PARTITION p0 VALUES LESS THAN (128) ENGINE = InnoDB,
PARTITION p1 VALUES LESS THAN (256) ENGINE = InnoDB,
PARTITION p2 VALUES LESS THAN (384) ENGINE = InnoDB,
PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */"
"CREATE TABLE tmp LIKE t"
"CREATE TEMPORARY TABLE tmp LIKE t"
"CREATE TABLE t LIKE tp"
"CREATE TABLE t2 LIKE t"
"CREATE TABLE t2 like t1"
"CREATE TABLE t LIKE general_log"
"DELETE FROM t1 PARTITION(subp1) WHERE b = ""REPLACEd by REPLACE"""
"DELETE FROM t1 PARTITION (pNeg) WHERE a = -1"
"DELETE FROM t1 PARTITION (subp1) WHERE b like '%subp1%'"
"DELETE FROM t1 PARTITION (subp1) WHERE b = 'p0-9:subp3'"
"DELETE FROM t1 PARTITION (`p0-9`) WHERE b = 'p0-9:subp3'"
"DELETE FROM t1 PARTITION (subp3)"
"DELETE FROM t1 PARTITION (`p0-29`)"
"DELETE FROM t1 PARTITION (p2)"
"revoke all privileges on *.* from mysqltest_1@localhost"
"alter table t1 drop partition p2"
"SELECT count(*) FROM t1 p where c3 in
(SELECT c3 FROM t1 t WHERE t.c3 < TIMESTAMP'2011-04-26 19:19:44'
AND t.c3 > TIMESTAMP'2011-04-26 19:18:44') "
"CREATE TABLE `t``\"""e` (a INT, PRIMARY KEY (a))
ENGINE=InnoDB
PARTITION BY RANGE (a)
SUBPARTITION BY HASH (a)
(PARTITION `p0``\"""e` VALUES LESS THAN (100)
(SUBPARTITION `sp0``\"""e`,
SUBPARTITION `sp1``\"""e`),
PARTITION `p1``\"""e` VALUES LESS THAN (MAXVALUE)
(SUBPARTITION `sp2``\"""e`,
SUBPARTITION `sp3``\"""e`))"
"INSERT INTO `t``\"""e` VALUES (0), (2), (6), (10), (14), (18), (22)"
SEND
"DROP TABLE `t``\"""e`"
"DELETE FROM t1 PARTITION (p0)
WHERE a = (SELECT a + 2 FROM t2 WHERE a = 1)"
"EXPLAIN DELETE FROM t1 PARTITION (p0)
WHERE a = (SELECT a + 2 FROM t2 WHERE a = 1)"
"CREATE TABLE t1 (a INT)
/*!50100 PARTITION BY HASH (a)
/* Test
of multi-line
comment */
PARTITIONS 5 */"
"ALTER TABLE t1 DROP PARTITION x1"
"create table t9 (a date not null) partition by RANGE(TO_DAYS(a)) (
partition p0 values less than (732299), -- 2004-12-19
partition p1 values less than (732468), -- 2005-06-06
partition p2 values less than (732664)  -- 2005-12-19
)"
"EOF



















DROP TABLE t1, t2, t3, t4, t5"
"alter table t1 drop partition p0"
"ALTER TABLE t1 DROP PARTITION p3"
"ALTER TABLE t1 DROP PARTITION p1"
"ALTER TABLE t1 DROP PARTITION p2"
"open(FILE, "">"", ""$ENV{MYSQL_TMP_DIR}/perror_syslocale.inc"") or die $!"
"EOF

source $MYSQL_TMP_DIR/perror_syslocale.inc"
"RESET PERSIST sort_buffer_size"
"RESET PERSIST max_heap_table_size"
"RESET PERSIST max_execution_time"
"RESET PERSIST max_user_connections"
"RESET PERSIST sql_require_primary_key"
"RESET PERSIST default_table_encryption"
"RESET PERSIST table_encryption_privilege_check"
"RESET PERSIST replica_net_timeout"
"RESET PERSIST max_connections"
"RESET PERSIST server_id"
"RESET PERSIST general_log"
"RESET PERSIST session_track_system_variables"
"RESET PERSIST default.key_buffer_size"
"RESET PERSIST test_component.str_sys_var"
"RESET PERSIST event_scheduler"
"RESET REPLICA"
"RESET PERSIST ft_query_expansion_limit"
"RESET PERSIST sql_mode"
"[mysqld]
innodb_fast_shutdown=1
innodb_default_row_format=REDUNDANT
sql_mode=REAL_AS_FLOAT
innodb_flush_log_at_trx_commit=2
max_digest_length=2024
disconnect_on_expired_password=OFF
EOF






SELECT @@global.innodb_fast_shutdown"
"RESET PERSIST slow_query_log_file"
"RESET PERSIST general_log_file"
"RESET PERSIST auto_increment_increment"
"RESET PERSIST innodb_checksum_algorithm"
"[mysqld]
sort_buffer_size=314156
EOF

[mysqld]
innodb_fast_shutdown=1
innodb_default_row_format=REDUNDANT
innodb_flush_log_at_trx_commit=2
EOF


SELECT VARIABLE_NAME, VARIABLE_SOURCE
FROM performance_schema.variables_info WHERE VARIABLE_NAME IN
('sort_buffer_size', 'max_connections', 'max_digest_length',
'innodb_fast_shutdown', 'innodb_default_row_format', 'innodb_flush_log_at_trx_commit')"
"RESET PERSIST `validate_password.length`"
"RESET PERSIST validate_password_length"
"RESET PERSIST gtid_mode"
"RESET PERSIST enforce_gtid_consistency"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__ IDENTIFIED WITH 'test_plugin_server' AS 'Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_Ð´ÐµÑÑ__'"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_Ð´ÐµÑÑ__ IDENTIFIED BY 'plug_dest_passwd'"
"DROP USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__"
"DROP USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_Ð´ÐµÑÑ__"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string'"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost IDENTIFIED WITH 'caching_sha2_password' BY 'auth_string'"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost IDENTIFIED WITH 'cleartext_plugin_server' AS 'auth_string'"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost IDENTIFIED WITH 'sha256_password' BY 'auth_string' REQUIRE SSL"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost IDENTIFIED WITH 'caching_sha2_password' BY 'auth_string' REQUIRE SSL"
"CREATE USER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½ÑÐ¹_ÑÐ·ÐµÑ__@localhost IDENTIFIED WITH 'cleartext_plugin_server' AS 'auth_string' REQUIRE SSL"
"REVOKE ALL PRIVILEGES ON test_user_db.* FROM plug"
"CREATE USER plÃ¼g IDENTIFIED WITH 'test_plugin_server' AS 'plÃ¼g_dest'"
"DROP USER plÃ¼g"
"CREATE USER plÃ¼g_dest IDENTIFIED BY 'plug_dest_passwd'"
"DROP USER plÃ¼g_dest"
"CREATE USER plÃ¼g IDENTIFIED WITH test_plugin_server AS 'plÃ¼g_dest'"
"set @precision=10000000000"
"select rand(),
cast(rand(10)*@precision as unsigned integer) from t1"
"set @like=""%NDAN%"""
"execute stmt using @like"
"set @like=""%ER"""
"set @offset=0, @limit=1"
"execute stmt using @offset, @limit"
"set @offset=3, @limit=2"
"execute stmt using @limit"
"set @limit=2"
"execute stmt using @offset, @limit, @offset, @limit, @limit"
"create procedure proc_1() reset binary logs and gtids"
"create procedure proc_1() RESET REPLICA"
"create procedure proc_1() START REPLICA"
"create procedure proc_1() STOP REPLICA"
"create procedure proc_1() SHOW REPLICA STATUS"
"create procedure proc_1() show binary log status"
"set @dec=0"
"execute stmt2 using @to_format, @dec"
"set @dec=4"
"set @dec=6"
"set @dec=2"
"SET @empty = ''"
"revoke all privileges on mysqltest.t1 from second_user@localhost"
"revoke all privileges on test.t1 from drop_user@localhost "
"set @a= timestamp ""2001-01-02 10:11:12.345"""
"set @a=date ""2001-01-02"""
"set @a= time ""10:11:12.345"""
"set @a= time ""01:02:00"""
"set @a= timestamp ""2001-01-02 01:02:00"""
"set @a= date ""2001-01-02"""
"SELECT a, b, c, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1 QUALIFY rnk>1"
"SELECT a, b, c
FROM t1 QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c)>1"
"SELECT a, b, c
FROM t1
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5"
"SELECT a, b, c,
MIN(b) OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS mn
FROM t1
QUALIFY ( RANK() OVER () + mn) >5"
"SELECT a, b, c,
MIN(b) OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS mn,
RANK() OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS rnk
FROM t1
QUALIFY ( rnk + mn) >5"
"SELECT a, b,
MIN(b) OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS mn,
RANK() OVER (PARTITION BY b ORDER BY a DESC,b ASC,c DESC) AS rnk
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY b)>1"
"SELECT
a, b, ( SELECT sum(rnk)
FROM ( SELECT ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1 qualify rnk > t0.a
) as z
)
FROM (values row(1,10), row(2,20)) as t0(a,b)"
"SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a)>1"
"SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER ()>1 and 2*b>2"
"SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a)>1 and c>2"
"SELECT  b
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a ORDER BY a)>1 and a>2"
"SELECT a, b, c, ROW_NUMBER() OVER () AS rnk
FROM t1
QUALIFY 2*rnk>1"
"SELECT a, b, c, ROW_NUMBER() OVER () AS rnk
FROM t1
QUALIFY a+rnk>5"
"SELECT a, b, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b) AS rnk
FROM t1
QUALIFY c>1"
"SELECT a, b, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b) AS rnk
FROM t1
QUALIFY 2*a>1"
"SELECT a
FROM t1
QUALIFY ROW_NUMBER() OVER (PARTITION BY a) + b > 0"
"SELECT a, b, ROW_NUMBER() OVER (PARTITION BY a ORDER BY a,b,c) AS rnk
FROM t1
QUALIFY rnk>1 and c>2"
"SELECT MAX(a) FROM t1
GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY MIN(2*b) OVER () + RANK() OVER () > 3"
"SELECT 1 FROM t1
GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY MIN(2*b) OVER () + RANK() OVER () + MAX(a) > 4"
"SELECT MAX(b) FROM t1
GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY MIN(2*b) OVER () + RANK() OVER () + MAX(a) > 4"
"SELECT MAX(a)
FROM t1 GROUP BY b WITH ROLLUP
QUALIFY (MIN(c) OVER () + RANK() OVER () ) >= 2"
"SELECT MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) >= 2"
"SELECT MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5"
"SELECT MAX(a) FROM t1
GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER ()) > 1"
"SELECT MAX(a)
FROM t1
GROUP BY b,c WITH ROLLUP
QUALIFY (MIN(a) OVER () + RANK() OVER () ) > 5"
"SELECT a FROM t1 GROUP BY b, 2*c WITH ROLLUP
HAVING AVG(c)>1
QUALIFY ROW_NUMBER() OVER () + MAX(a) > 4"
"SELECT a FROM t1
GROUP BY b, 2*c WITH ROLLUP
QUALIFY LEAD(c,2) OVER () > 4"
"SELECT a FROM t1
GROUP BY b, 2*c WITH ROLLUP
QUALIFY LAG(c,6) OVER () > 4"
"SELECT b,c, MAX(a)
FROM t1 GROUP BY b,c WITH ROLLUP
QUALIFY LEAD(b) OVER(ORDER BY a,b,c) >1 AND b IS NULL"
"SELECT RANK() OVER () AS sales_rank
FROM sales QUALIFY SUM(sale_amount) > 300"
"CREATE VIEW v1 as
SELECT salesperson_id,   SUM(sale_amount) AS total_sales,
RANK() OVER (ORDER BY SUM(sale_amount) DESC) AS sales_rank
FROM sales GROUP BY salesperson_id
QUALIFY SUM(sale_amount) > 3000"
"CREATE VIEW v2 as
SELECT SUM(sale_amount) AS total_sales,
RANK() OVER (ORDER BY SUM(sale_amount) DESC) AS sales_rank
FROM sales GROUP BY salesperson_id
QUALIFY SUM(sale_amount) > 3000"
"SELECT  RANK() OVER () AS field3
FROM t1
WHERE ( SELECT  MAX( t2.col_decimal_10_8 ) AS derived_1
FROM  t2) IS NOT NULL
QUALIFY field3 <=> 'a'"
"SELECT CUME_DIST() OVER () AS field1
FROM t1
WHERE
EXISTS ( SELECT LEAST(t2.col_varchar132, t2.col_timestamp_key) AS SQ1_field1
FROM  t2
)
AND ( FLOOR(ATAN(t1.col_float_key) ) IS NULL )
QUALIFY field1 = 'V' COLLATE utf8mb4_icelandic_ci"
"SELECT SUM( col_time + CAST(col_year AS FLOAT) ) AS field1,
ROW_NUMBER() OVER () AS field2
FROM cc
WHERE (12, 'H') IN ( SELECT
DENSE_RANK() OVER ( ORDER BY col_double_key ),
FIRST_VALUE(col_char_255)
OVER ( ROWS BETWEEN CURRENT ROW
AND UNBOUNDED FOLLOWING )
FROM cc )
QUALIFY field1 <=> 'M'"
"SELECT id, b FROM t GROUP BY id WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT id, b, ROW_NUMBER() OVER w FROM t
GROUP BY id WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT id, b, ROW_NUMBER() OVER w FROM t
WINDOW w AS (ORDER BY id) QUALIFY x + SUM(x) OVER w <> 4"
"SELECT id, x, ROW_NUMBER() OVER w FROM t GROUP BY id, x
WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT id, x, ROW_NUMBER() OVER w FROM t GROUP BY id, x WITH ROLLUP
WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT id FROM t GROUP BY id, x WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT id, x, ROW_NUMBER() OVER w FROM (SELECT * FROM t) AS dt
GROUP BY id, x WITH ROLLUP WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT id, ROW_NUMBER() OVER w FROM (SELECT * FROM t) AS dt
GROUP BY id, x WITH ROLLUP WINDOW w AS (ORDER BY id) QUALIFY x <> 1"
"SELECT NTILE(1) OVER() FROM (SELECT * FROM t1) as dt QUALIFY f1 AND FALSE"
"query_attributes a b"
"query_attributes a b c d"
"query_attributes 'a' ""b c"""
"query_attributes '' 'a'"
"EOF
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql"
"query_attributes a c"
"query_attributes a"
"query_attributes 'a' 'b c'"
resetconnection
"EOF
exec $MYSQL < $MYSQLTEST_VARDIR/tmp/wl12542.sql 2>&1"
reset_connection
"SELECT MAX( c1 ) OVER ( ORDER BY c2 ROWS CURRENT ROW ) FROM t1
INTERSECT DISTINCT
SELECT ""can't"" OR 447938560 FROM t1"
"SELECT pk FROM c WHERE pk IN (SELECT 2 EXCEPT SELECT 4)"
"SELECT pk FROM c WHERE pk IN (SELECT 2 EXCEPT SELECT 4) ORDER BY pk"
"(SELECT 2 AS two UNION ALL SELECT 2)
EXCEPT ALL
SELECT 2"
"SELECT SUBSTRING(t.rep, 1, 4) AS sub, LENGTH(t.rep) AS len
FROM
( SELECT REPEAT(c1, c2) AS rep FROM view_t1
EXCEPT DISTINCT
SELECT DISTINCT RANK() OVER () FROM t1 ) AS t
ORDER BY len"
"SELECT * FROM (SELECT * FROM t INTERSECT SELECT * FROM t) AS derived ORDER BY i LIMIT 2"
"EOF

create user nonsuper@localhost"
"CREATE TEMPORARY TABLE temp2 LIKE temp1"
"RESET PERSIST replica_type_conversions"
"ALTER USER u11 DEFAULT ROLE ALL"
"ALTER USER u1@localhost DEFAULT ROLE r1,r2"
"SHOW GRANTS FOR u1@localhost USING r1"
"SHOW GRANTS FOR u2@localhost USING r1"
"ALTER USER u5 DEFAULT ROLE r2,r3"
"ALTER USER u2 DEFAULT ROLE r1, r2, r3"
"CREATE RESOURCE GROUP cafÃ© TYPE=USER VCPU=1-3 THREAD_PRIORITY=5"
"DROP RESOURCE GROUP CaFÃ©"
"EOF





connection default"
RESTART
"REVOKE ALL ON *.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE SELECT ON *.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE ALL PRIVILEGES, GRANT OPTION FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE PROXY ON u1 FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE r1 FROM unknown_user IGNORE UNKNOWN USER"
"GRANT CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE, CREATE ROLE, DROP ROLE ON *.* TO u2"
"REVOKE INSERT (i) ON wl14690.t FROM u1, u2 IGNORE UNKNOWN USER"
"REVOKE r1 FROM unknown_user, u2 IGNORE UNKNOWN USER"
"REVOKE SELECT, INSERT (i) ON wl14690.t FROM u1, u2, unknown_user IGNORE UNKNOWN USER"
"REVOKE TABLE_ENCRYPTION_ADMIN ON *.* FROM unknown_user, u2 IGNORE UNKNOWN USER"
"REVOKE IF EXISTS PROXY ON u3 FROM u1"
"REVOKE IF EXISTS PROXY ON u3 FROM r1"
"REVOKE IF EXISTS SELECT ON wl14690.* FROM u1"
"REVOKE IF EXISTS SELECT ON wl14690.* FROM r1"
"REVOKE IF EXISTS INSERT (i) ON wl14690.t FROM u4"
"REVOKE IF EXISTS INSERT (j) ON wl14690.t FROM u4"
"REVOKE IF EXISTS ENCRYPTION_KEY_ADMIN, APPLICATION_PASSWORD_ADMIN ON *.* FROM u4"
"REVOKE IF EXISTS role1 FROM u1"
"REVOKE IF EXISTS role1, r1 FROM u1"
"REVOKE IF EXISTS SELECT, INSERT, UPDATE ON *.* FROM u1"
"REVOKE ALL ON *.* FROM u2"
"REVOKE ALL ON *.* FROM u3"
"REVOKE IF EXISTS SELECT ON wl14690.* FROM u1, u2, u3"
"REVOKE IF EXISTS role1 FROM u1, u2"
"REVOKE IF EXISTS DELETE, SELECT ON wl14690.* FROM u1, u2, u3"
"REVOKE IF EXISTS DELETE, SELECT ON wl14690.* FROM r1"
"REVOKE IF EXISTS SYSTEM_VARIABLES_ADMIN,TABLE_ENCRYPTION_ADMIN,XA_RECOVER_ADMIN
ON *.* FROM u1,u2,u3,u4,r1"
"REVOKE IF EXISTS UPDATE, SELECT ON wl14690.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS PROXY ON u1 FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS INSERT (i) ON wl14690.t FROM u1, u2 IGNORE UNKNOWN USER"
"REVOKE IF EXISTS TABLE_ENCRYPTION_ADMIN,XA_RECOVER_ADMIN ON *.* FROM u1, u3
IGNORE UNKNOWN USER"
"REVOKE IF EXISTS DELETE, SELECT ON wl14690.* FROM u1, u2, u3
IGNORE UNKNOWN USER"
"REVOKE IF EXISTS SYSTEM_VARIABLES_ADMIN,CONNECTION_ADMIN,ENCRYPTION_KEY_ADMIN
ON *.* FROM u1, u2 IGNORE UNKNOWN USER"
"REVOKE IF EXISTS SELECT ON wl14690.t FROM u1, unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS DYNAMIC_PRIV1, DYNAMIC_PRIV2 ON wl14690.* FROM u1"
"REVOKE IF EXISTS DYNAMIC_PRIV1, DYNAMIC_PRIV2 ON wl14690.* FROM unknown_user IGNORE UNKNOWN USER"
"REVOKE IF EXISTS r1 FROM u1"
"REVOKE IF EXISTS r1 FROM r2"
"REVOKE IF EXISTS r1 FROM u1,u2,u3,r2"
"CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3'"
"SET PASSWORD = '' REPLACE ''"
"ALTER USER u1 IDENTIFIED BY '123' REPLACE '', u2 IDENTIFIED BY '456'
PASSWORD REQUIRE CURRENT OPTIONAL"
"ALTER USER u2 IDENTIFIED BY 'xyz', u1 IDENTIFIED BY 'abc' REPLACE '123'"
"SET @sql='SELECT command_type, argument FROM mysql.general_log WHERE argument LIKE ""%Bug#16953758%""'"
"PREPARE stmt FROM @sql"
"SET @sql='DROP TABLE 18616826_does_not_exist'"
"ALTER USER plaintext_test IDENTIFIED BY '' REPLACE 'pwd'"
"SET PASSWORD='789' REPLACE '456'"
"ALTER USER test_user2 IDENTIFIED BY 'azundris2' REPLACE 'azundris2'"
"SET PASSWORD='azundris2' REPLACE 'azundris2'"
"CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3',
SOURCE_BIND = 'eth4n',
SOURCE_TLS_CIPHERSUITES = ''
FOR CHANNEL 'chan_jackie'"
"CHANGE REPLICATION SOURCE TO SOURCE_PASSWORD='azundris3',
SOURCE_CONNECT_RETRY = 1, SOURCE_HEARTBEAT_PERIOD = 1.01,
SOURCE_LOG_FILE = 'master_log_name', SOURCE_LOG_POS = 0,
SOURCE_SSL = 0, SOURCE_SSL_CA = 'ca_file_name',
SOURCE_SSL_CAPATH = 'ca_directory_name',
SOURCE_SSL_CERT = 'cert_file_name', SOURCE_SSL_KEY = 'key_file_name',
SOURCE_SSL_CIPHER = 'cipher_list', SOURCE_SSL_VERIFY_SERVER_CERT = 1,
SOURCE_SSL_CRL = 'crl_file_name', SOURCE_SSL_CRLPATH = 'crl_directory_name',
IGNORE_SERVER_IDS = (99,100), SOURCE_TLS_VERSION = 'TLSv1.2',
SOURCE_TLS_CIPHERSUITES = NULL,
SOURCE_BIND = 'eth4n', SOURCE_RETRY_COUNT = 7,
SOURCE_DELAY = 4711, SOURCE_AUTO_POSITION = 0 FOR CHANNEL 'chan_jackie'"
"SHOW GRANTS FOR CURRENT_USER() USING `admin-db1`"
"GRANT b30896461_test1@localhost TO b30896461_test2@localhost"
"SHOW GRANTS FOR u_worldrou@localhost USING r_worldrou"
"GRANT role1, `role2`@`host2`, role3 TO user1, user2, `user3`@`host3`"
"GRANT `engineering`@`US` TO `engineering`@`INDIA`"
"REVOKE role1, `role2`@`host2`, role3 FROM user1, user2, `user3`@`host3`"
"ALTER USER `joe`@`localhost` DEFAULT ROLE wp_administrators"
"ALTER USER CURRENT_USER() DEFAULT ROLE NONE"
"SHOW GRANTS FOR `joe`@`localhost` USING wp_administrators"
"SHOW GRANTS FOR `joe`@`localhost` USING engineering"
"SHOW GRANTS FOR sally USING engineering, consultants"
"SHOW GRANTS FOR sally USING consultants"
"SHOW GRANTS FOR sally USING engineering"
"SHOW GRANTS FOR current_user() USING `replication`"
"SHOW GRANTS FOR `joe`@`localhost` USING `replication`"
"ALTER USER `joe_schema_designer`@`localhost` DEFAULT ROLE `schema_designer`"
"SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'schema_designer'"
"SHOW GRANTS FOR 'joe_schema_designer'@'localhost' USING 'db_admin'"
"SHOW GRANTS FOR CURRENT_USER() USING `db_admin`"
"SHOW GRANTS FOR CURRENT_USER() USING db_admin"
"SHOW GRANTS FOR u1@`%` USING r1"
"ALTER USER u1@localhost DEFAULT ROLE ALL"
"ALTER USER u1@localhost DEFAULT ROLE NONE"
"GRANT CREATE ROLE, DROP ROLE ON *.* TO r1"
"GRANT r1@Vilhelmina TO u1@localhost"
"SHOW GRANTS FOR u1@localhost USING u1234567890123456789012345678901"
"ALTER USER r2 DEFAULT ROLE r1"
"ALTER USER baseuser default role r2"
"ALTER USER u1 DEFAULT ROLE r1"
"ALTER USER u1@localhost DEFAULT ROLE 'r1'"
"SHOW GRANTS FOR CURRENT_USER() USING r1"
"SHOW GRANTS FOR u1@localhost USING r1,r2"
"GRANT 'r1'@'' TO 'u1'@''"
"GRANT 'r2'@'' TO 'u1'@''"
"REVOKE 'r1'@'' FROM 'u1'@''"
"REVOKE 'r2'@'' FROM 'u1'@''"
"GRANT CREATE ROLE, DROP ROLE ON *.* TO uu@localhost"
"REVOKE ALL ON *.* FROM my_role"
"REVOKE ALL ON *.* FROM foo@localhost"
"GRANT `r_verifier`@`localhost` TO `TestUserFails`@`localhost`"
"REVOKE ALL ON my_db.t1 FROM foo_role"
"REVOKE ALL ON my_db.t1 FROM bar"
"GRANT CREATE ROLE, DROP ROLE ON *.* TO b35471453@localhost"
"REVOKE CREATE ROLE, DROP ROLE, SET_ANY_DEFINER, ALLOW_NONEXISTENT_DEFINER ON *.* FROM b35471453@localhost"
"my $mysqlbinlog= $ENV{'MYSQL_BINLOG'}"
"my $port= $ENV{'MASTER_MYPORT'}"
"my $binlog_file= $ENV{'BINLOG_FILE'}"
"system(""$mysqlbinlog --stop-never --read-from-remote-server --user=root --host=127.0.0.1 --port=$port $binlog_file > /dev/null &"")"
"EOF



eval SELECT ATTR_NAME, ATTR_VALUE FROM performance_schema.session_connect_attrs
WHERE PROCESSLIST_ID = $thread_id AND
ATTR_NAME IN ('program_name', '_client_replication_channel_name', '_client_role')"
"CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch1.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch1'"
"CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE='binlog-ch2.000001', SOURCE_LOG_POS=4 FOR CHANNEL 'ch2'"
"CHANGE REPLICATION SOURCE TO SOURCE_HOST='127.0.0.1', SOURCE_LOG_FILE=""binlog-default.000001"", SOURCE_LOG_POS=4 FOR CHANNEL ''"
"EOF
COMMIT"
"ALTER SCHEMA s1 READ ONLY DEFAULT"
"CREATE TABLE tÃ¦Ã¸Ã¥(i INT)"
"DROP TABLE tÃ¦Ã¸Ã¥"
"START TRANSACTION READ ONLY,  WITH CONSISTENT SNAPSHOT"
"SET TRANSACTION   READ ONLY, ISOLATION LEVEL SERIALIZABLE"
"CREATE TABLE t1 (i int, KEY USING HASH (i)) ENGINE=MEMORY"
"CREATE TABLE t1 (i int, KEY USING BTREE (i)) ENGINE=MEMORY"
"CREATE TABLE t1 (i int, KEY USING BTREE (i)) ENGINE=MyISAM"
"SHOW PARSE_TREE SELECT t3.col3, t1.col1 / t2. col2 FROM tab t1
JOIN tab t2 ON t1.col1=t2.col2 JOIN tab t3 ON t1.col1 <= t3.col3"
"SHOW PARSE_TREE SELECT a, b, func(c), SUM(c) OVER (PARTITION BY a,b ) FROM Y"
"SHOW PARSE_TREE SELECT a, b, c, SUM(c) OVER
(PARTITION BY a,b
OrDER              BY a,b RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
FROM Y"
"SHOW PARSE_TREE SELECT id, FIRST_VALUE(id) OVER w FROM t_date
WINDOW w AS (ORDER BY id RANGE BETWEEN INTERVAL col1 DAY PRECEDING AND INTERVAL 1 DAY PRECEDING)"
"SHOW PARSE_TREE select (select 1) from t ORDER BY 1 DESC, 2"
"SHOW PARSE_TREE SELECT 1 < 2, col1 NOT between 1 and 2, 1 IN (1, 2), 1 IN (1), 1 NOT IN (1)"
"SHOW PARSE_TREE SELECT avg(distinct col1) from tab GROUP BY col2, col3"
"SHOW PARSE_TREE SELECT not 1 or 2 is true or 0 is not false alias_name"
"SHOW PARSE_TREE select 1 and 2 or 3 and 4, {u '2022/22/2' }, 1 < all (select 1)"
"SHOW PARSE_TREE SELECT 1 - INTERVAL 2 HOUR_MINUTE, curtime(4), utc_time(2)"
"SHOW PARSE_TREE SELECT * FROM t1 WHERE
MATCH(a,b) AGAINST (""collections"" IN BOOLEAN MODE ) OR
MATCH(a,b) AGAINST (""indexes"" IN NATURAL LANGUAGE MODE WITH QUERY EXPANSION)"
"SHOW PARSE_TREE SELECT cast('30' as time(2)), cast(30 as decimal(6, 3)),
cast(30 as decimal), cast(30 as float), cast('30' as char(40) charset utf8mb3),
cast(30 as decimal array)"
"SHOW PARSE_TREE SELECT CASE a WHEN b THEN c WHEN d THEN e ELSE f END,
CASE a WHEN b THEN c END,
CASE WHEN a THEN b ELSE c END"
"SHOW PARSE_TREE SELECT
CASE a
WHEN
CASE WHEN a1 THEN b2 END
THEN c
ELSE f END"
"SHOW PARSE_TREE SELECT 1 union (select 2 intersect ALL select 3 limit 2 offset 10) limit 1, 5"
"SHOW PARSE_TREE select SQL_SMALL_RESULT STRAIGHT_JOIN SQL_BUFFER_RESULT 1 and 2 and 3"
"SHOW PARSE_TREE WITH der(col1, col2) AS (SELECT 1, 2), der1 AS (SELECT 2) SELECT * FROM der"
"SHOW PARSE_TREE SELECT * FROM t STRAIGHT_JOIN t2 USING (col1, col2)"
"SHOW PARSE_TREE SELECT * FROM t RIGHT OUTER JOIN t3 on col1/col2"
"SHOW PARSE_TREE SELECT * FROM LATERAL (SELECT * FROM mydb.bar bar_alias) AS t(i, j)"
"SHOW PARSE_TREE SELECT * FROM t JOIN t2 JOIN t3 JOIN t4"
"SHOW PARSE_TREE SELECT * FROM t JOIN t2 JOIN (t3 JOIN t4)"
"SHOW PARSE_TREE SELECT * FROM t JOIN t2 NATURAL JOIN t3 LEFT JOIN t4 USING (col1, col2)"
"SHOW PARSE_TREE SELECT * FROM t JOIN t2 NATURAL JOIN (t3 LEFT JOIN t4 USING (col1, col2))"
"SHOW PARSE_TREE SELECT * FROM t JOIN t2 JOIN t3 USING (col1, col2) JOIN (SELECT * FROM tab) AS t4"
"SHOW PARSE_TREE SELECT db.func(), char(col1), char(col1 USING utf8mb4), concat(a,b), concat(a,b) COLLATE utf8mb4_turkish_ci"
"/* John Doe wants 1 table and 4 chairs */
call po_create_order(""P"", 1, @my_po)"
"/* Marry Smith wants a coffee table */
call po_create_order(""P"", 2, @my_po)"
"/* The local school wants 10 class tables and 20 chairs */
call po_create_order(""M"", 4, @my_po)"
"my $filename = $ENV{""MYSQLD_PIDFILE""} or die(""pidfile not set"")"
"my $pid"
"my $wait_cnt=60"
"open(FILE, ""$filename"") or die ""cannot open file $filename"""
"rename $ENV{""MYSQLD_LOG""}, $ENV{""MYSQLD_LOG""}."".1"""
"kill 'USR1', $pid or die ""could not kill $pid: $!"""
$wait_cnt--
"rename $ENV{""MYSQLD_LOG_SLOW""}, $ENV{""MYSQLD_LOG_SLOW""}."".1"""
"EOF

let MYSQLD_PIDFILE= `SELECT @@pid_file;`"
"EOF


SET @@global.slow_query_log=0"
"rename $ENV{""MYSQLD_LOG_GENERAL""}, $ENV{""MYSQLD_LOG_GENERAL""}."".1"""
"EOF

SET @@global.general_log=0"
"REVOKE ALL ON test.* FROM mysqltest_1@'127.0.0.1/255.255.255.255'"
"SELECT SUM(table1.pk )AS field1 , COUNT(table2.col_varchar_key ) AS field2
FROM (t1 AS table1 JOIN (t2 AS table2))
WHERE (table2.col_varchar_key <> SOME (SELECT SUBQUERY2_t1. col_varchar_key AS SUBQUERY2_field1
FROM t1 AS SUBQUERY2_t1
WHERE (SUBQUERY2_t1.pk < 4
AND SUBQUERY2_t1. pk IN (SELECT 2 EXCEPT SELECT 9))))"
"my $file= $ENV{'SLOW_LOG'} or die(""slow log not set"")"
"$result++ if ($line =~ /SET timestamp=10"
/)
"EOF

SET @@global.slow_query_log_file= @old_slow_query_log_file"
"my $obfs = 0"
"my $nono = 0"
"my $protdiv= $ENV{'IS_PS'}+1"
"$obfs++ if(($line =~ /CREATE USER /)&& ($line =~ / IDENTIFIED BY <secret>/))"
"$nono++ if(($line =~ /CREATE USER /)&&!($line =~ / IDENTIFIED BY <secret>/))"
"print ""slow file non-obfuscated statements>"".($nono/$protdiv).""\n"""
"EOF

TRUNCATE mysql.slow_log"
"open FILE, ""$ENV{'BIG_LOG'}"" or die"
"foreach $line (@lines) {
if ($line =~ m/^# Query_time/) {
$line =~ m/(Rows_sent.*) Thread_id.* (Errno.*) Start.*/"
"print ""$1 $2\n"""
"my $file= $ENV{'SLOW_LOG1'} or die(""slow log not set"")"
"$result++ if ($line =~ /Start: 1970-01-01T00:00:10.000000Z /)"
"open FILE, ""$ENV{'SLOW_LOG2'}"" or die"
"foreach $line (@lines) {
if ($line =~ m/^# Query_time/) {
$line =~ s/Thread_id: \d* Errno:/Thread_id: 0 Errno:/"
"$line =~ m/(Rows_sent.*) Start.*/"
"print ""$1\n"""
"open FILE, ""$ENV{'SLOW_LOG3'}"" or die ""Could not open tmp slow log file: $!"""
"EOF

SET @@global.slow_query_log_file=@save_sqlf"
"DROP PROCEDURE CaFÃ©"
"CREATE PROCEDURE Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_e() BEGIN END"
"SHOW CREATE PROCEDURE Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"DROP PROCEDURE Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"SHOW CREATE FUNCTION CaFÃ©"
"DROP FUNCTION CaFÃ©"
"CREATE FUNCTION Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_e() RETURNS INT return 15081947"
"SHOW CREATE FUNCTION Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"DROP FUNCTION Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"create procedure sudoku_solve(p_naive boolean, p_all boolean)
deterministic
modifies sql data
begin
drop temporary table if exists sudoku_work, sudoku_schedule;

create temporary table sudoku_work
(
`row` smallint not null,
col smallint not null,
dig smallint not null,
cnt smallint,
key using btree (cnt),
key using btree (`row`),
key using btree (col),
unique key using hash (`row`,col)
);

create temporary table sudoku_schedule
(
idx int not null auto_increment primary key,
`row` smallint not null,
col smallint not null
);

call sudoku_init();

if p_naive then
update sudoku_work set cnt = 0 where dig = 0;
else
call sudoku_count();
end if;
insert into sudoku_schedule (`row`,col)
select `row`,col from sudoku_work where cnt is not null order by cnt desc;

begin
declare v_scounter bigint default 0;
declare v_i smallint default 1;
declare v_dig smallint;
declare v_schedmax smallint;

select count(*) into v_schedmax from sudoku_schedule;

more:
loop
begin
declare v_tcounter bigint default 0;

sched:
while v_i <= v_schedmax do
begin
declare v_row, v_col smallint;

select `row`,col into v_row,v_col from sudoku_schedule where v_i = idx;

select dig into v_dig from sudoku_work
where v_row = `row` and v_col = col;

case v_dig
when 0 then
set v_dig = 1;
update sudoku_work set dig = 1
where v_row = `row` and v_col = col;
when 9 then
if v_i > 0 then
update sudoku_work set dig = 0
where v_row = `row` and v_col = col;
set v_i = v_i - 1;
iterate sched;
else
select v_scounter as 'Solutions';
leave more;
end if;
else
set v_dig = v_dig + 1;
update sudoku_work set dig = v_dig
where v_row = `row` and v_col = col;
end case;

set v_tcounter = v_tcounter + 1;
if not sudoku_digit_ok(v_row, v_col, v_dig) then
iterate sched;
end if;
set v_i = v_i + 1;
end;
end while sched;

select dig from sudoku_work;
select v_tcounter as 'Tests';
set v_scounter = v_scounter + 1;

if p_all and v_i > 0 then
set v_i = v_i - 1;
else
leave more;
end if;
end;
end loop more;
end;

drop temporary table sudoku_work, sudoku_schedule;
end"
"FLUSH TABLE mysql.procs_priv"
"create procedure p1()
begin
declare v_stmt_text varchar(255);
declare v_id integer;
declare done int default 0;
declare c cursor for select id, stmt_text from t1;
declare continue handler for 1295 -- ER_UNSUPPORTED_PS
set @status='not supported';
declare continue handler for 1064 -- ER_SYNTAX_ERROR
set @status='syntax error';
declare continue handler for sqlstate '02000' set done = 1;

prepare update_stmt from ""update t1 set status=? where id=?"";
open c;
repeat
if not done then
fetch c into v_id, v_stmt_text;
set @id=v_id, @stmt_text=v_stmt_text;
set @status=""supported"";
prepare stmt from @stmt_text;
execute update_stmt using @status, @id;
end if;
until done end repeat;
deallocate prepare update_stmt;
end"
"DECLARE cur1 CURSOR FOR SHOW TABLES"
"OPEN cur1"
"FETCH cur1 INTO c"
"CLOSE cur1"
"END|


CREATE DATABASE mysqltest"
"create procedure p1(a int)
begin
declare continue handler for 1436 -- ER_STACK_OVERRUN_NEED_MORE
select 'exception';
call p1(a+1);
end"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE FUNCTION JAVASCRIPT(x INTEGER) RETURNS INTEGER DETERMINISTIC
LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE PYTHON
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE RUBY
AS $$
x-1
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE javascript
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE jAvaScRIpt
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE JAVA1
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE $NOLANG
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE 123j
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE __
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS INTEGER
LANGUAGE JAVASCRIPT DETERMINISTIC LANGUAGE SQL
BEGIN RETURN a-1; END "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
LANGUAGE SQL DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
LANGUAGE
JAVASCRIPT

AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
LANGUAGE
JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
LANGUAGE	  	 JAVASCRIPT  DETERMINISTIC
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC NO SQL
LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE JAVASCRIPT
CONTAINS SQL
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC READS SQL DATA
LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER DETERMINISTIC LANGUAGE JAVASCRIPT
MODIFIES SQL DATA
AS $$
return x-1;
$$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER NOT DETERMINISTIC
LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$
"
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE PROCEDURE JAVASCRIPT(a INTEGER) DETERMINISTIC
LANGUAGE JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE PYTHON
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE RUBY
AS $$ b = a $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE javascript
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE jAvaScRIpt
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE JAVA1
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE $NOLANG
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE 123j
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE __
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER)
LANGUAGE JAVASCRIPT DETERMINISTIC LANGUAGE SQL
BEGIN DECLARE b INTEGER DEFAULT a; END "
"CREATE PROCEDURE bar(a INTEGER)
LANGUAGE SQL DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER)
LANGUAGE
JAVASCRIPT

AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER)
LANGUAGE
JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER)
LANGUAGE	  	 JAVASCRIPT  DETERMINISTIC
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC NO SQL
LANGUAGE JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE JAVASCRIPT
CONTAINS SQL
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC READS SQL DATA
LANGUAGE JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) DETERMINISTIC LANGUAGE JAVASCRIPT
MODIFIES SQL DATA
AS $$ let b = a; $$ "
"CREATE PROCEDURE bar(a INTEGER) NOT DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$ let b = a; $$ "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
return x-1;
$$ "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
DETERMINISTIC LANGUAGE JAVASCRIPT
AS 'return x-1;' "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
DETERMINISTIC LANGUAGE JAVASCRIPT
AS ""return x-1;"" "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
DETERMINISTIC LANGUAGE JAVASCRIPT
AS '
return x-1;
' "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
""
return x-1;
"" "
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
'
return ""$$"" + a + ""$$"";
'
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$code$
return ""$$"" + a + ""$$"";
$code$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$coDE$
return ""$$"" + a + ""$$"";
$coDE$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$CODE$
return ""$$"" + a + ""$$"";
$CODE$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$tag$
return ""$$"" + a + ""$$"";
$tag$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$TAG$
return ""$$"" + a + ""$$"";
$TAG$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$NULL$
return ""$$"" + a + ""$$"";
$NULL$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$abdc_1234$
return ""$$"" + a + ""$$"";
$abdc_1234$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$_a$
return ""$$"" + a + ""$$"";
$_a$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$_$
return ""$$"" + a + ""$$"";
$_$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$0$
return ""$$"" + a + ""$$"";
$0$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$100$
return ""$$"" + a + ""$$"";
$100$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$12345678901234$
return ""$$"" + a + ""$$"";
$12345678901234$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNM$
return ""$$"" + a + ""$$"";
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNM$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$Â¡$
return ""$$"" + a + ""$$"";
$Â¡$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNMÂ¡â¢Â£Â¢âÂ§Â¶â¢ÂªÂºââ ÅâÂ´Â®â Â¥Â¨ËÃ¸ÏââÂ«Ã¥ÃâÆÂ©ËâËÂ¬â¦Ã¦Î©âÃ§ââ«Âµâ¤â¥Ã·ââ¬â¹âºï¬ï¬â¡Â°Â·ââÂ±Ã
ÃÃÃËÃÃÃÃÃÂ¸ËÃâÄ±ÃÂ¯ËÂ¿$
return ""$$"" + a + ""$$"";
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNMÂ¡â¢Â£Â¢âÂ§Â¶â¢ÂªÂºââ ÅâÂ´Â®â Â¥Â¨ËÃ¸ÏââÂ«Ã¥ÃâÆÂ©ËâËÂ¬â¦Ã¦Î©âÃ§ââ«Âµâ¤â¥Ã·ââ¬â¹âºï¬ï¬â¡Â°Â·ââÂ±Ã
ÃÃÃËÃÃÃÃÃÂ¸ËÃâÄ±ÃÂ¯ËÂ¿$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS	      $$
const $x = 3;
const $y$ = 4;
return $x + $y$ + a;
$$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$code$
const x$$ = 3;
const $y$$z = 4;
return x$$ + $y$$z + a;

$code$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
return ""â"" + a + ""$â$"";
$$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $code$
return ""â"" + a + ""$â$$"";
$code$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $code$
return ""â"" + a + ""$â$$â"";
$code$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$â
return ""â"" + a + ""$â$"";
$$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $â$
return ""â"" + a + ""â$"";
$â$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $coâe$
return ""â"" + a + ""$â$$"";
$coâe$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $ð$
return ""ð$ð"" + a + ""ð$ð$"";
$ð$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $ðð$
return ""ð$ð"" + a + ""ð$ð$"";
$ðð$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $xð$
return ""$xðð"" + a + ""$xðð$"";
$xð$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $ðx$
return ""$ðxð$"" + a + ""$ððx$"";
$ðx$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $xðy$
return ""$xððy$"" + a + ""$xðyð$"";
$xðy$
"
"CREATE FUNCTION foo(a INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $xðyð$
return ""ðð$"" + a + ""ð$ð$"";
$xðyð$
"
"CREATE FUNCTION foo(x INTEGER) RETURNS VARCHAR(20)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $code$ rtrn ""$$"" + x + ""$foo$""; $code$ "
"CREATE FUNCTION foo(x INTEGER) RETURNS INTEGER
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
const $x = x,
const $y = 1
return $x + $y;
$$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
let b = a;
$$ "
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS 'let b = a;' "
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS ""let b = a;"" "
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS '
let b = a;
' "
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
""
let b = a;
"" "
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
'
let b = ""$$"" + a + ""$$"";
'
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$code$
let b = ""$$"" + a + ""$$"";
$code$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$coDE$
let b = ""$$"" + a + ""$$"";
$coDE$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$CODE$
let b = ""$$"" + a + ""$$"";
$CODE$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$tag$
let b = ""$$"" + a + ""$$"";
$tag$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$TAG$
let b = ""$$"" + a + ""$$"";
$TAG$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$NULL$
let b = ""$$"" + a + ""$$"";
$NULL$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$abdc_1234$
let b = ""$$"" + a + ""$$"";
$abdc_1234$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$_a$
let b = ""$$"" + a + ""$$"";
$_a$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$_$
let b = ""$$"" + a + ""$$"";
$_$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$0$
let b = ""$$"" + a + ""$$"";
$0$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$100$
let b = ""$$"" + a + ""$$"";
$100$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$12345678901234$
let b = ""$$"" + a + ""$$"";
$12345678901234$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNM$
let b = ""$$"" + a + ""$$"";
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNM$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$Â¡$
let b = ""$$"" + a + ""$$"";
$Â¡$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNMÂ¡â¢Â£Â¢âÂ§Â¶â¢ÂªÂºââ ÅâÂ´Â®â Â¥Â¨ËÃ¸ÏââÂ«Ã¥ÃâÆÂ©ËâËÂ¬â¦Ã¦Î©âÃ§ââ«Âµâ¤â¥Ã·ââ¬â¹âºï¬ï¬â¡Â°Â·ââÂ±Ã
ÃÃÃËÃÃÃÃÃÂ¸ËÃâÄ±ÃÂ¯ËÂ¿$
let b = ""$$"" + a + ""$$"";
$1234567890qwertyuiopasdfghjklzxcvbnm_QWERTYUIOPASDFGHJKLZXCVBNMÂ¡â¢Â£Â¢âÂ§Â¶â¢ÂªÂºââ ÅâÂ´Â®â Â¥Â¨ËÃ¸ÏââÂ«Ã¥ÃâÆÂ©ËâËÂ¬â¦Ã¦Î©âÃ§ââ«Âµâ¤â¥Ã·ââ¬â¹âºï¬ï¬â¡Â°Â·ââÂ±Ã
ÃÃÃËÃÃÃÃÃÂ¸ËÃâÄ±ÃÂ¯ËÂ¿$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS	      $$
const $x = 3;
const $y$ = 4;
let b = $x + $y$ + a;
$$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS
$code$
const x$$ = 3;
const $y$$z = 4;
let b = x$$ + $y$$z + a;

$code$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
let b = ""â"" + a + ""$â$"";
$$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $code$
let b = ""â"" + a + ""$â$$"";
$code$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $code$
let b = ""â"" + a + ""$â$$â"";
$code$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$â
let b = ""â"" + a + ""$â$"";
$$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $â$
let b = ""â"" + a + ""â$"";
$â$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $coâe$
let b = ""â"" + a + ""$â$$"";
$coâe$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $ð$
let b = ""ð$ð"" + a + ""ð$ð$"";
$ð$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $ðð$
let b = ""ð$ð"" + a + ""ð$ð$"";
$ðð$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $xð$
let b = ""$xðð"" + a + ""$xðð$"";
$xð$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $ðx$
let b = ""$ðxð$"" + a + ""$ððx$"";
$ðx$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $xðy$
let b = ""$xððy$"" + a + ""$xðyð$"";
$xðy$
"
"CREATE PROCEDURE bar(a INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $xðyð$
let b = ""ðð$"" + a + ""ð$ð$"";
$xðyð$
"
"CREATE PROCEDURE bar(x INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $code$ let b := ""$$"" + x + ""$foo$""; $code$ "
"CREATE PROCEDURE bar(x INTEGER)
DETERMINISTIC LANGUAGE JAVASCRIPT
AS $$
const $x = x,
const $y = 1
let b = $x + $y;
$$
"
"SELECT 1 AS $hi"
"revoke all privileges on procedure sptest.p1 from userb@localhost"
"CREATE PROCEDURE p2()
BEGIN
DECLARE i TINYINT DEFAULT 3;

WHILE i > 0 DO
IF MOD(i, 2) = 0 THEN
SET @_test_session_var = 10;
ELSE
SET @_test_session_var = 'test';
END IF;

CASE @_test_session_var
WHEN 10 THEN
INSERT INTO t1 VALUES('p2: case: numerical type');
WHEN 'test' THEN
INSERT INTO t1 VALUES('p2: case: string type');
ELSE
INSERT INTO t1 VALUES('p2: case: ERROR');
END CASE;

SET i = i - 1;
END WHILE;
END"
"create procedure h_ee()
deterministic
begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Outer (bad)' as 'h_ee';

begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Inner (good)' as 'h_ee';

insert into t3 values (1);
end;
end"
"create procedure h_es()
deterministic
begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Outer (bad)' as 'h_es';

begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Inner (good)' as 'h_es';

insert into t3 values (1);
end;
end"
"create procedure h_en()
deterministic
begin
declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA
select 'Outer (bad)' as 'h_en';

begin
declare x int;
declare continue handler for sqlstate '02000' -- no data
select 'Inner (good)' as 'h_en';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_ew()
deterministic
begin
declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE
select 'Outer (bad)' as 'h_ew';

begin
declare continue handler for sqlwarning
select 'Inner (good)' as 'h_ew';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_ex()
deterministic
begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Outer (bad)' as 'h_ex';

begin
declare continue handler for sqlexception
select 'Inner (good)' as 'h_ex';

insert into t3 values (1);
end;
end"
"create procedure h_se()
deterministic
begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Outer (bad)' as 'h_se';

begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Inner (good)' as 'h_se';

insert into t3 values (1);
end;
end"
"create procedure h_ss()
deterministic
begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Outer (bad)' as 'h_ss';

begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Inner (good)' as 'h_ss';

insert into t3 values (1);
end;
end"
"create procedure h_sn()
deterministic
begin
-- Note: '02000' is more specific than NOT FOUND ;
--       there might be other not found states
declare continue handler for sqlstate '02000' -- no data
select 'Outer (bad)' as 'h_sn';

begin
declare x int;
declare continue handler for not found
select 'Inner (good)' as 'h_sn';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_sw()
deterministic
begin
-- data exception - numeric value out of range
declare continue handler for sqlstate '22003'
select 'Outer (bad)' as 'h_sw';

begin
declare continue handler for sqlwarning
select 'Inner (good)' as 'h_sw';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_sx()
deterministic
begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Outer (bad)' as 'h_sx';

begin
declare continue handler for sqlexception
select 'Inner (good)' as 'h_sx';

insert into t3 values (1);
end;
end"
"create procedure h_ne()
deterministic
begin
declare continue handler for not found
select 'Outer (bad)' as 'h_ne';

begin
declare x int;
declare continue handler for 1329 -- ER_SP_FETCH_NO_DATA
select 'Inner (good)' as 'h_ne';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_ns()
deterministic
begin
declare continue handler for not found
select 'Outer (bad)' as 'h_ns';

begin
declare x int;
declare continue handler for sqlstate '02000' -- no data
select 'Inner (good)' as 'h_ns';

select a into x from t3 where a = 42;
end;
end"
"create procedure h_we()
deterministic
begin
declare continue handler for sqlwarning
select 'Outer (bad)' as 'h_we';

begin
declare continue handler for 1264 -- ER_WARN_DATA_OUT_OF_RANGE
select 'Inner (good)' as 'h_we';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_ws()
deterministic
begin
declare continue handler for sqlwarning
select 'Outer (bad)' as 'h_ws';

begin
-- data exception - numeric value out of range
declare continue handler for sqlstate '22003'
select 'Inner (good)' as 'h_ws';

insert into t3 values (123456789012);
end;
delete from t3;
insert into t3 values (1);
end"
"create procedure h_xe()
deterministic
begin
declare continue handler for sqlexception
select 'Outer (bad)' as 'h_xe';

begin
declare continue handler for 1062 -- ER_DUP_ENTRY
select 'Inner (good)' as 'h_xe';

insert into t3 values (1);
end;
end"
"create procedure h_xs()
deterministic
begin
declare continue handler for sqlexception
select 'Outer (bad)' as 'h_xs';

begin
-- integrity constraint violation
declare continue handler for sqlstate '23000'
select 'Inner (good)' as 'h_xs';

insert into t3 values (1);
end;
end"
"call bug1656(@1, @2)"
"select @1, @2"
"show binary log status"
"create procedure bug6063()
begin
lÃ¢bel: begin end;
label: begin end;
label1: begin end;
end"
"create procedure bug7088_2()
lÃ¤bel1: begin end"
"/*!50003 create function bug14723()
returns bigint(20)
main_loop: begin
return 42;
end */"
"/*!50003 create procedure bug14723()
main_loop: begin
select 42;
end */"
"create procedure mysqltest1.p1()
begin
alter database character set koi8r;
end"
"drop function if exists test.database"
"drop function if exists test.current_user"
"select test.database(), test.database ()"
"select test.current_user(), test.current_user ()"
"drop function test.database"
"drop function test.current_user"
"CREATE PROCEDURE p1(IN loops BIGINT(19) UNSIGNED)
BEGIN
WHILE loops > 0 DO
SELECT c1 FROM v1"
"END|

CREATE PROCEDURE p2(IN loops BIGINT(19) UNSIGNED)
BEGIN
WHILE loops > 0 DO
SELECT c1 FROM v1"
"END|

CREATE FUNCTION f1(loops INT UNSIGNED)
RETURNS INT
BEGIN
DECLARE tmp INT"
"RETURN loops"
"END|

DELIMITER "
"|

eval CALL p1($p1_cnt)"
"CREATE PROCEDURE p1()
BEGIN
DECLARE áâä INT;
SELECT áâä;
END"
"CREATE TEMPORARY TABLE t3 LIKE t1"
"CREATE FUNCTION f1() RETURNS INT DETERMINISTIC
BEGIN
DECLARE a int;
-- SQL statement inside
SELECT 1 INTO a;
RETURN a;
END "
"create procedure 15298_1 () sql security definer show grants for current_user"
"create procedure 15298_2 () sql security definer show grants"
"call 15298_1()"
"call 15298_2()"
"drop procedure 15298_1"
"drop procedure 15298_2"
"CREATE EVENT e1 ON SCHEDULE EVERY 1 SECOND STARTS NOW() DO
BEGIN
DECLARE EXIT HANDLER FOR 1136 BEGIN
INSERT INTO t3 VALUES (1);
END; -- ER_WRONG_VALUE_COUNT_ON_ROW

SELECT GET_LOCK('e1_lock', 60);
SELECT RELEASE_LOCK('e1_lock');

INSERT INTO t2 SELECT * FROM t1;
END"
"CREATE PROCEDURE `v1`(_limit_val BIGINT, _offset_val BIGINT)
BEGIN
CREATE TEMPORARY TABLE n1 AS (SELECT * FROM t1 LIMIT _limit_val OFFSET _offset_val);
SELECT * FROM n1;
END "
"create function bug23333()
RETURNS int(11)
DETERMINISTIC
begin
insert into t1 values (null)"
"return @a"
"end|

reset binary logs and gtids"
"ALTER INSTANCE RELOAD TLS"
"ALTER INSTANCE RELOAD TLS NO ROLLBACK ON ERROR"
"SELECT 1 FROM t1 AS table2 LEFT JOIN (SELECT 'c') AS table3(f1)
ON table3.f1 = table2.f1 WHERE table2.f1
IN (SELECT 1 FROM (SELECT 1314830897) AS t1(pk)
WHERE t1.pk <= ANY(SELECT 5)) AND FALSE"
"SELECT * FROM
t AS upper JOIN LATERAL
(SELECT DISTINCT ROW_NUMBER() OVER () AS rn FROM t
WHERE (t.a > upper.a)) der "
"EXPLAIN FORMAT=tree
SELECT /*+ JOIN_ORDER(t3,t2,t1) */ * FROM t1
WHERE t1.col1 = ANY (
SELECT t1.col1 + t2.col2
FROM t2 JOIN t3 ON t2.col2 = t3.col2 AND t2.col1 =  t3.col1
WHERE t2.col2 BETWEEN 2 AND 9
)"
"SELECT t1.a
FROM
t1,
LATERAL ( SELECT t1.a FROM t1 AS inner_t1 LIMIT 1 ) AS d1
WHERE 1 IN ( SELECT a FROM t1 )
ORDER BY a"
"SELECT CAST(NULL < ANY (VALUES ROW(1), ROW(2)) AS SIGNED)"
"SELECT AVG(a) OVER () AS `avg`,
a + (SELECT SUM(a) + (SELECT COUNT(a) FROM t1)
FROM (SELECT * from t1) t11) AS cnt FROM t2"
"SELECT (derived_1.`COUNT(*) + outer_t.a` +
IFNULL(derived_0.`MAX(b)`,0)) + 1 + 5 AS mx
FROM (SELECT STRAIGHT_JOIN MAX(outer_t.b) AS `MAX(b)`,
outer_t.a AS d_1
FROM t1 outer_t
GROUP BY outer_t.a) derived_0
LEFT JOIN LATERAL (SELECT (COUNT(0) + derived_0.d_1)
AS `COUNT(*) + outer_t.a`
FROM t1) derived_1
ON(true)
WHERE true"
"SELECT AVG(s2.avg_us) OVER () + 3 AS avgsum,
s2.avg_us avg_us,
s2.avg_us avg_us2,
SUM(s2.avg_us) OVER () + 3 AS avgsum2,
IFNULL(SUM(s1.cnt)/NULLIF((SELECT COUNT(*) FROM
events_digest), 0), 0) percentile
FROM sys.`x$ps_digest_avg_latency_distribution` AS s1
JOIN sys.`x$ps_digest_avg_latency_distribution` AS s2
ON s1.avg_us <= s2.avg_us
GROUP BY s2.avg_us
HAVING IFNULL(SUM(s1.cnt)/ NULLIF((SELECT COUNT(*) FROM events_digest), 0), 0) > 0.95
ORDER BY percentile LIMIT 1"
"ANALYZE TABLES c, cc"
"ANALYZE TABLES b, c, cc"
"SELECT t2.i FROM t2
WHERE ( false ) AND
( t2.i  IN ( SELECT t1.i FROM t1
WHERE t1.i <= SOME ( SELECT 8 UNION  SELECT 3 ) ) )"
"SELECT SUM(pk) FROM t1 WHERE ( pk >= ANY ( SELECT MAX(1) FROM DUAL) )"
"SELECT AVG(DISTINCT id) FROM t1 GROUP BY id % 13"
"SELECT * FROM t1 WHERE int_key IN ( SELECT AVG(DISTINCT pk) FROM t2 WHERE time_nokey = datetime_key )"
"FLUSH TABLE schema1.t1"
"REVOKE ALL ON *.* FROM noprivs@localhost"
"CREATE TABLESPACE ts1 ENGINE_ATTRIBUTE=''"
"CREATE TABLESPACE ts2 ENGINE_ATTRIBUTE='{""c"": ""v""}'"
"ALTER TABLESPACE ts1 ENGINE_ATTRIBUTE='{""foo"": ""bar""}'"
"create temporary table tg (i int not null) engine=merge union=()"
"SELECT * FROM t1 WHERE a BETWEEN DATE'2001-01-01' AND DATE'2002-01-01'"
"SELECT DATE'2001-01-01' FROM t1 GROUP BY DATE'2001-01-01'"
"SELECT * FROM t1 LEFT JOIN t2 ON c1 = c11
WHERE c2 BETWEEN DATE'2014-01-01' AND DATE'2014-01-05'"
"SELECT * FROM t1 LEFT JOIN t2 ON c1 = c11
WHERE c3 BETWEEN TIME'01:01:01' AND TIME'01:01:05'"
"SELECT * FROM t1 LEFT JOIN t2 ON c1 = c11
WHERE c4 BETWEEN TIMESTAMP'2014-01-01 01:01:01'
AND TIMESTAMP'2014-01-05 01:01:01'"
"SELECT JSON_VALUE('{""data"": ""2019-01-01 11:11::11""}', '$.data' RETURNING DATETIME) AS v"
"SELECT JSON_VALUE('{""data"": ""2019-01/01""}', '$.data' RETURNING DATE) AS v"
"SELECT JSON_VALUE('{""data"": ""10:11:12.098700    ""}', '$.data' RETURNING TIME) AS v"
"INSERT INTO t1 VALUES ( TIMESTAMP'2015-01-01 10:10:10.1+05:30' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2015-01-01 10:10:10.01+05:30' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2015-01-01 10:10:10.001+05:30' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2015-01-01 10:10:10.0001+05:30' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2015-01-01 10:10:10.00001+05:30' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2015-01-01 10:10:10.000001+05:30' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2038-01-19 03:14:07+00:00' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'2038-01-19 03:14:07.000001+00:00' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'1970-01-01 01:00:00.000000+00:00' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'1970-01-01 00:00:01.000000+00:00' )"
"INSERT INTO t1 VALUES ( TIMESTAMP'1970-01-01 00:00:00.999999+00:00' )"
"INSERT INTO t2 VALUES ( TIMESTAMP'2038-01-19 03:14:07+00:00' )"
"INSERT INTO t2 VALUES ( TIMESTAMP'2038-01-19 03:14:07.000001+00:00' )"
"INSERT INTO t2 VALUES ( TIMESTAMP'2038-01-19 03:14:07.999999+00:00' )"
"INSERT INTO t2 VALUES ( TIMESTAMP'1970-01-01 01:00:00.000000+00:00' )"
"INSERT INTO t2 VALUES ( TIMESTAMP'1970-01-01 00:00:01.000000+00:00' )"
"CREATE TABLE diffs (i INT, CONSTRAINT i CHECK (1200 = i) ENFORCED)"
"CALL mtr.add_suppression(""Column count of mysql.* is wrong. ""
""Expected .*, found .*. ""
""The table is probably corrupted"")"
"CREATE USER user1@"
"GRANT UPDATE (a) ON t1 TO user1@"
"DROP USER user1@"
"TYPE=TRIGGERNAME
trigger_table=t1
EOF

TYPE=TRIGGERNAME
trigger_table=t1
EOF

TYPE=TRIGGERNAME
trigger_table=t1
EOF

TYPE=TRIGGERNAME
trigger_table=t1
EOF

TYPE=TRIGGERNAME
trigger_table=t1
EOF

TYPE=TRIGGERS
triggers='CREATE DEFINER=`root`@`localhost` TRIGGER tr11 BEFORE INSERT ON t1 FOR EACH ROW DELETE FROM t3' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr12 AFTER INSERT ON t1 FOR EACH ROW DELETE FROM t3' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr13 BEFORE DELETE ON t1 FOR EACH ROW DELETE FROM t1 a USING t1 a' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr14 AFTER DELETE ON t1 FOR EACH ROW DELETE FROM non_existing_table' 'CREATE DEFINER=`root`@`localhost` TRIGGER tr15 BEFORE UPDATE ON t1 FOR EACH ROW DELETE FROM non_existing_table a USING non_existing_table a'
sql_modes=0 0 0 0 0
definers='root@localhost' 'root@localhost' 'root@localhost' 'root@localhost' 'root@localhost'
EOF

TYPE=TRIGGERS
triggers='Not allowed syntax here, and trigger name cant be extracted either.'
sql_modes=0
definers='root@localhost'
EOF

FLUSH TABLE t1"
"create procedure p1() reset binary logs and gtids"
"create procedure p1() RESET REPLICA"
"create trigger t1_whoupdated before update on t1 for each row
begin
declare user varchar(32);
declare i int;
select user() into user;
set NEW.username = user;
select count(*) from ((select 1) union (select 2)) as d1 into i;
end"
"load data infile '../../std_data/words.dat' into table t1 (a) set b:= f1()"
"create trigger t1_bi before insert on t1 for each row
begin
insert into t2 values (new.id, new.v);
update t2 set v=v+1 where id= new.id;
replace t3 values (new.id, 0);
update t2, t3 set t2.v=new.v, t3.v=new.v where t2.id=t3.id;
create temporary table t5 select * from t1;
delete from t5;
insert into t5 select * from t1;
insert into t4 values (0);
set @check= (select count(*) from t5);
update t4 set c= @check;
drop temporary table t5;

set @a:=1/0;
end"
"set @check=0, @t4_bi_called=0, @t4_bu_called=0"
"select @check, @t4_bi_called, @t4_bu_called"
"REVOKE ALL ON *.* FROM 'no_rights'@'localhost'"
"CREATE TRIGGER _AI_1 AFTER INSERT ON t1 FOR EACH ROW SET
@t1_var=concat(@t1_var,'_AI_1')"
"CREATE TRIGGER _AI_2 AFTER INSERT ON t1 FOR EACH ROW SET
@t1_var=concat(@t1_var,'_AI_2')"
"CREATE TRIGGER _BU_2 BEFORE UPDATE ON t1 FOR EACH ROW SET
@t1_var=concat(@t1_var,'_BU_2')"
"CREATE TRIGGER _BD_2 BEFORE DELETE ON t1 FOR EACH ROW SET
@t1_var=concat(@t1_var,'_BD_2')"
"CREATE TRIGGER _AI_0 AFTER INSERT ON t1 FOR EACH ROW PRECEDES _AI_1 SET
@t1_var=concat(@t1_var,'_AI_0')"
"CREATE TRIGGER _AI_3 AFTER INSERT ON t1 FOR EACH ROW FOLLOWS _AI_2 SET
@t1_var=concat(@t1_var,'_AI_3')"
"SHOW CREATE TRIGGER cAfÃ©"
"DROP TRIGGER CaFÃ©"
"CREATE TRIGGER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_e
BEFORE INSERT ON t1 FOR EACH ROW SET @sum= @sum + NEW.f1"
"SHOW CREATE TRIGGER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"DROP TRIGGER Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð¾ÑÐµÐ½Ñ_Ð´Ð»Ð¸Ð½Ð½Ð°Ñ_ÑÑÑÐ¾ÐºÐ°_Ã©"
"CREATE TABLE t1(a INT, b TEXT, KEY (a)) SECONDARY_ENGINE=MOCK"
"SELECT * FROM t2 EXCEPT SELECT * FROM t3"
"SELECT * FROM t3 EXCEPT SELECT * FROM t2"
"CREATE TABLE t1 (
t1_id bigint(21) NOT NULL auto_increment,
_field_72 varchar(128) DEFAULT '' NOT NULL,
_field_95 varchar(32),
_field_115 tinyint(4) DEFAULT '0' NOT NULL,
_field_122 tinyint(4) DEFAULT '0' NOT NULL,
_field_126 tinyint(4),
_field_134 tinyint(4),
PRIMARY KEY (t1_id),
UNIQUE _field_72 (_field_72),
KEY _field_115 (_field_115),
KEY _field_122 (_field_122)
)"
"CREATE TABLE t3 (
t3_id bigint(21) NOT NULL auto_increment,
_field_131 varchar(128),
_field_133 tinyint(4) DEFAULT '0' NOT NULL,
_field_135 datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
_field_137 tinyint(4),
_field_139 datetime DEFAULT '0000-00-00 00:00:00' NOT NULL,
_field_140 blob,
_field_142 tinyint(4) DEFAULT '0' NOT NULL,
_field_145 tinyint(4) DEFAULT '0' NOT NULL,
_field_148 tinyint(4) DEFAULT '0' NOT NULL,
PRIMARY KEY (t3_id),
KEY _field_133 (_field_133),
KEY _field_135 (_field_135),
KEY _field_139 (_field_139),
KEY _field_142 (_field_142),
KEY _field_145 (_field_145),
KEY _field_148 (_field_148)
)"
"CREATE TABLE t5 (
t5_id bigint(21) NOT NULL auto_increment,
_field_149 tinyint(4),
_field_156 varchar(128) DEFAULT '' NOT NULL,
_field_157 varchar(128) DEFAULT '' NOT NULL,
_field_158 varchar(128) DEFAULT '' NOT NULL,
_field_159 varchar(128) DEFAULT '' NOT NULL,
_field_160 varchar(128) DEFAULT '' NOT NULL,
_field_161 varchar(128) DEFAULT '' NOT NULL,
PRIMARY KEY (t5_id),
KEY _field_156 (_field_156),
KEY _field_157 (_field_157),
KEY _field_158 (_field_158),
KEY _field_159 (_field_159),
KEY _field_160 (_field_160),
KEY _field_161 (_field_161)
)"
"CREATE TABLE t7 (
t7_id bigint(21) NOT NULL auto_increment,
_field_143 tinyint(4),
_field_165 varchar(32),
_field_166 smallint(6) DEFAULT '0' NOT NULL,
PRIMARY KEY (t7_id),
KEY _field_166 (_field_166)
)"
"select replace(t3._field_140, ""\r"",""^M""),t3_id,min(t3._field_131), min(t3._field_135), min(t3._field_139), min(t3._field_137), min(link_alias_142._field_165), min(link_alias_133._field_72), min(t3._field_145), min(link_alias_148._field_156), replace(min(t3._field_140), ""\r"",""^M""),t3.t3_id from t3 left join t4 on t4.seq_0_id = t3.t3_id left join t7 link_alias_142 on t4.seq_1_id = link_alias_142.t7_id left join t6 on t6.seq_0_id = t3.t3_id left join t1 link_alias_133 on t6.seq_1_id = link_alias_133.t1_id left join t2 on t2.seq_0_id = t3.t3_id left join t5 link_alias_148 on t2.seq_1_id = link_alias_148.t5_id where t3.t3_id in (1) group by t3.t3_id order by link_alias_142._field_166, _field_139, link_alias_133._field_72, _field_135, link_alias_148._field_156"
"INSERT INTO t1 VALUES (TIMESTAMP'2001-01-01 23:59:59.4')"
"INSERT INTO t1 VALUES (TIME'23:59:59.4')"
"INSERT INTO t1 VALUES
(TIMESTAMP'9999-12-30 23:59:59.4'),
(TIMESTAMP'9999-12-31 23:59:59.4')"
"INSERT INTO t1 VALUES (TIMESTAMP'2001-01-01 23:59:59.9')"
"INSERT INTO t1 VALUES (TIME'23:59:59.9')"
"SELECT CAST(CASE WHEN 0 THEN DATE'2001-01-01' END AS DATE)"
"SELECT * FROM t1 WHERE a NOT IN (DATE'2001-01-01',DATE'2002-02-02')"
"SELECT * FROM t WHERE a = DATE'2023-01-01'"
"SELECT * FROM t WHERE a = b and b = DATE'2023-01-01'"
"INSERT INTO t1 VALUES
(1, TIME'08:00:00', TIME'12:00:00', TIMESTAMP'2020-01-01 00:00:00'),
(2, TIME'12:00:00', TIME'12:00:00', TIMESTAMP'2020-01-01 00:00:00'),
(3, TIME'16:00:00', TIME'12:00:00', TIMESTAMP'2020-01-01 00:00:00')"
"SELECT * FROM t WHERE a = TIMESTAMP'2023-01-01 01:02:03'"
"SELECT * FROM t WHERE a = b and b = TIMESTAMP'2023-01-01 01:02:03'"
"SELECT LEAD(e) OVER () FROM t GROUP BY ROLLUP(e) EXCEPT SELECT 1"
"SELECT LAG(e) OVER () FROM t GROUP BY ROLLUP(e) EXCEPT SELECT 1"
"SELECT LEAST(e, NULL) FROM t GROUP BY ROLLUP(e) EXCEPT SELECT 1"
"SELECT GREATEST(e, NULL) FROM t GROUP BY ROLLUP(e) EXCEPT SELECT 1"
"SELECT IF(e='a', e, NULL) FROM t GROUP BY ROLLUP(e) EXCEPT SELECT 1"
"SELECT COALESCE(e, NULL) FROM t GROUP BY ROLLUP(e) EXCEPT SELECT 1"
"SELECT 10,10.0,10.,.1e+2,100.0e-1"
"SELECT 1e1,1.e1,1.0e1,1e+1,1.e+1,1.0e+1,1e-1,1.e-1,1.0e-1"
"create table t1 (c nchar varchar(10))"
"create table t1 (c national character varying(10))"
"create table t1 (c nchar varying(10))"
"SET @decimal= 1.1"
"CREATE TABLE t1 SELECT @decimal AS c1"
"SELECT AVG(DISTINCT a) FROM t1"
"INSERT INTO t1 VALUES (TIME'01:59:59.499999')"
"INSERT INTO t1 VALUES (TIME'01:59:59.500000')"
"INSERT INTO t1 VALUES (TIME'01:02:03.123')"
"SELECT * FROM t1 WHERE a BETWEEN TIME'01:02:03.456' AND TIME'01:02:03.45678'"
"CREATE TABLE t2 AS SELECT
t0 + 1, t3 + 1, t6 + 1,
t0 - 1, t3 - 1, t6 - 1,
t0 * 1, t3 * 1, t6 * 1,
t0 / 1, t3 / 1, t6 / 1,
TIME'10:10:10' + 1,
TIME'10:10:10.123' + 1,
TIME'10:10:10.123456' + 1,
TIME'10:10:10' - 1,
TIME'10:10:10.123' - 1,
TIME'10:10:10.123456' - 1,
TIME'10:10:10' * 1,
TIME'10:10:10.123' * 1,
TIME'10:10:10.123456' * 1,
TIME'10:10:10' / 1,
TIME'10:10:10.123' / 1,
TIME'10:10:10.123456' / 1
FROM t1"
"CREATE TABLE t1 (s1 TIME(6))
PARTITION BY RANGE COLUMNS (s1)
(PARTITION p1 VALUES LESS THAN (TIME'01:01:01.000001'))"
"CREATE TABLE t1 AS SELECT
TIME(101),
TIME(101.1),
TIME(101.12),
TIME(101.123),
TIME(101.1234),
TIME(101.12345),
TIME(101.123456),
TIME('00:01:01'),
TIME('00:01:01.1'),
TIME('00:01:01.12'),
TIME('00:01:01.123'),
TIME('00:01:01.1234'),
TIME('00:01:01.12345'),
TIME('00:01:01.123456'),
TIME(CONCAT('00:01:01', '')),
TIME(CONCAT('00:01:01', '.1')),
TIME(CONCAT('00:01:01', '.12')),
TIME(CONCAT('00:01:01', '.123')),
TIME(CONCAT('00:01:01', '.1234')),
TIME(CONCAT('00:01:01', '.12345')),
TIME(CONCAT('00:01:01', '.123456')),
TIME(TIME'00:01:01'),
TIME(TIME'00:01:01.1'),
TIME(TIME'00:01:01.12'),
TIME(TIME'00:01:01.123'),
TIME(TIME'00:01:01.1234'),
TIME(TIME'00:01:01.12345'),
TIME(TIME'00:01:01.123456'),
TIME(TIMESTAMP('2001-01-01 00:00:00')),
TIME(TIMESTAMP('2001-01-01 00:00:00.1')),
TIME(TIMESTAMP('2001-01-01 00:00:00.12')),
TIME(TIMESTAMP('2001-01-01 00:00:00.123')),
TIME(TIMESTAMP('2001-01-01 00:00:00.1234')),
TIME(TIMESTAMP('2001-01-01 00:00:00.12345')),
TIME(TIMESTAMP('2001-01-01 00:00:00.123456'))"
"CREATE PROCEDURE p1 ()
BEGIN
DECLARE a TIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE PROCEDURE p1 (a TIME(6))
BEGIN
SELECT a"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1(112233)//
CALL p1(112233.123)//
CALL p1(112233.123e0)//
CALL p1('11:22:33.123')//
DROP PROCEDURE p1//
CREATE PROCEDURE p1()
BEGIN
DECLARE a TIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE FUNCTION p1 (a TIME(6)) RETURNS TIME(6)
BEGIN
RETURN a"
"END//
SHOW CREATE FUNCTION p1//
SELECT p1(112233.123)//
DROP FUNCTION p1//
DELIMITER "
"//


CREATE TABLE t1 (a TIME(6))"
"SELECT DATE_ADD(TIME'00:00:00.0', INTERVAL 10.1 SECOND)"
"SELECT DATE_ADD(TIME'00:00:00.0', INTERVAL 10000000.1 SECOND)"
"SELECT DATE_ADD(TIME'00:00:00.0', INTERVAL 100000000000000000.1 SECOND)"
"SELECT DATE_ADD(TIME'00:00:00.0', INTERVAL 1000000000000000000000.1 SECOND)"
"CREATE TABLE t1 AS SELECT
DATE_ADD(TIME'00:00:00', INTERVAL 1 SECOND) AS t0s0,
DATE_ADD(TIME'00:00:00', INTERVAL 1.1 SECOND) AS t0s1,
DATE_ADD(TIME'00:00:00', INTERVAL 1.12 SECOND) AS t0s2,
DATE_ADD(TIME'00:00:00', INTERVAL 1.123 SECOND) AS t0s3,
DATE_ADD(TIME'00:00:00', INTERVAL 1.1234 SECOND) AS t0s4,
DATE_ADD(TIME'00:00:00', INTERVAL 1.12345 SECOND) AS t0s5,
DATE_ADD(TIME'00:00:00', INTERVAL 1.123456 SECOND) AS t0s6,
DATE_ADD(TIME'00:00:00.1', INTERVAL 1 SECOND) AS t1s0,
DATE_ADD(TIME'00:00:00.12', INTERVAL 1 SECOND) AS t2s0,
DATE_ADD(TIME'00:00:00.123', INTERVAL 1 SECOND) AS t3s0,
DATE_ADD(TIME'00:00:00.1234', INTERVAL 1 SECOND) AS t4s0,
DATE_ADD(TIME'00:00:00.12345', INTERVAL 1 SECOND) AS t5s0,
DATE_ADD(TIME'00:00:00.123456', INTERVAL 1 SECOND) AS t6s0,
DATE_ADD(TIME'00:00:00', INTERVAL 1 MICROSECOND) AS t0ms"
"SELECT * FROM t1 WHERE a BETWEEN TIMESTAMP'2000-01-01 01:02:03.456' AND TIMESTAMP'2000-01-01 01:02:03.45678'"
"INSERT INTO t1 VALUES (TIME'08:00:00.123456'), (TIME'240:00:00.000001')"
"INSERT INTO t1 VALUES (TIME'-10:00:00.000001'), (TIME'-240:00:00.000001')"
"CREATE TABLE t2 AS SELECT
t0 + 1, t3 + 1, t6 + 1,
t0 - 1, t3 - 1, t6 - 1,
t0 * 1, t3 * 1, t6 * 1,
t0 / 1, t3 / 1, t6 / 1,
TIMESTAMP'2001-01-01 10:10:10' + 1,
TIMESTAMP'2001-01-01 10:10:10.123' + 1,
TIMESTAMP'2001-01-01 10:10:10.123456' + 1,
TIMESTAMP'2001-01-01 10:10:10' - 1,
TIMESTAMP'2001-01-01 10:10:10.123' - 1,
TIMESTAMP'2001-01-01 10:10:10.123456' - 1,
TIMESTAMP'2001-01-01 10:10:10' * 1,
TIMESTAMP'2001-01-01 10:10:10.123' * 1,
TIMESTAMP'2001-01-01 10:10:10.123456' * 1,
TIMESTAMP'2001-01-01 10:10:10' / 1,
TIMESTAMP'2001-01-01 10:10:10.123' / 1,
TIMESTAMP'2001-01-01 10:10:10.123456' / 1
FROM t1"
"CREATE TABLE t1 AS SELECT
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1 SECOND) AS t0s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1.1 SECOND) AS t0s1,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1.12 SECOND) AS t0s2,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1.123 SECOND) AS t0s3,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1.1234 SECOND) AS t0s4,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1.12345 SECOND) AS t0s5,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1.123456 SECOND) AS t0s6,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00.1', INTERVAL 1 SECOND) AS t1s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00.12', INTERVAL 1 SECOND) AS t2s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00.123', INTERVAL 1 SECOND) AS t3s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00.1234', INTERVAL 1 SECOND) AS t4s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00.12345', INTERVAL 1 SECOND) AS t5s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00.123456', INTERVAL 1 SECOND) AS t6s0,
DATE_ADD(TIMESTAMP'2001-01-01 00:00:00', INTERVAL 1 MICROSECOND) AS t0ms"
"SELECT * FROM t1 WHERE a=TIME'10:50:50.123'"
"SELECT * FROM t1 WHERE TIME'10:50:50.123'=a"
"SELECT * FROM t1 WHERE a BETWEEN TIME'10:50:50.120' AND TIME'10:50:50.123'"
"SELECT * FROM t1 WHERE a BETWEEN TIMESTAMP'2010-01-01 10:50:50.120' AND TIME'10:50:50.123'"
"SELECT * FROM t1 WHERE a BETWEEN TIME'10:50:50.120' AND TIMESTAMP'2010-01-01 10:50:50.123'"
"CREATE TABLE t1 AS SELECT
TIMESTAMP(20010101101010),
TIMESTAMP(20010101101010.1),
TIMESTAMP(20010101101010.12),
TIMESTAMP(20010101101010.123),
TIMESTAMP(20010101101010.1234),
TIMESTAMP(20010101101010.12345),
TIMESTAMP(20010101101010.123456),
TIMESTAMP('2001-01-01 00:01:01'),
TIMESTAMP('2001-01-01 00:01:01.1'),
TIMESTAMP('2001-01-01 00:01:01.12'),
TIMESTAMP('2001-01-01 00:01:01.123'),
TIMESTAMP('2001-01-01 00:01:01.1234'),
TIMESTAMP('2001-01-01 00:01:01.12345'),
TIMESTAMP('2001-01-01 00:01:01.123456'),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','')),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','.1')),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','.12')),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','.123')),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','.1234')),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','.12345')),
TIMESTAMP(CONCAT('2001-01-01 00:01:01','.123456')),
TIMESTAMP(TIME'00:01:01'),
TIMESTAMP(TIME'00:01:01.1'),
TIMESTAMP(TIME'00:01:01.12'),
TIMESTAMP(TIME'00:01:01.123'),
TIMESTAMP(TIME'00:01:01.1234'),
TIMESTAMP(TIME'00:01:01.12345'),
TIMESTAMP(TIME'00:01:01.123456'),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00')),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00.1')),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00.12')),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00.123')),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00.1234')),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00.12345')),
TIMESTAMP(TIMESTAMP('2001-01-01 00:00:00.123456'))"
"CREATE TABLE t1 (s1 DATETIME(6))
PARTITION BY RANGE COLUMNS (s1)
(PARTITION p1 VALUES LESS THAN (TIMESTAMP'2001-01-01 01:01:01.000001'),
PARTITION p2 VALUES LESS THAN (DATE'2002-01-01'))"
"CREATE PROCEDURE p1 ()
BEGIN
DECLARE a DATETIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE PROCEDURE p1 (a DATETIME(6))
BEGIN
SELECT a"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1(20010101112233)//
CALL p1(20010101112233.123)//
CALL p1(0.123e0)//
CALL p1('2001-01-01 11:22:33.123')//
DROP PROCEDURE p1//
CREATE PROCEDURE p1()
BEGIN
DECLARE a DATETIME(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE FUNCTION p1 (a DATETIME(6)) RETURNS DATETIME(6)
BEGIN
RETURN a"
"END//
SHOW CREATE FUNCTION p1//
SELECT p1(20010101112233)//
SELECT p1(20010101112233.123)//
DROP FUNCTION p1//
DELIMITER "
"//

CREATE TABLE t1 (a DATETIME(6))"
"SELECT * FROM t1 WHERE a BETWEEN TIMESTAMP'2000-01-01 01:02:03.456' AND '2000-01-01 01:02:03.45678'"
"CREATE PROCEDURE p1 ()
BEGIN
DECLARE a TIMESTAMP(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE PROCEDURE p1 (a TIMESTAMP(6))
BEGIN
SELECT a"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1(20010101112233)//
CALL p1(20010101112233.123)//
CALL p1(0.123e0)//
CALL p1('2001-01-01 11:22:33.123')//
DROP PROCEDURE p1//
CREATE PROCEDURE p1()
BEGIN
DECLARE a TIMESTAMP(6)"
"END//
SHOW CREATE PROCEDURE p1//
CALL p1//
DROP PROCEDURE p1//
CREATE FUNCTION p1 (a TIMESTAMP(6)) RETURNS TIMESTAMP(6)
BEGIN
RETURN a"
"//

CREATE TABLE t1 (a TIMESTAMP(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6) ON UPDATE CURRENT_TIMESTAMP(6))"
"INSERT INTO t1 SET time_column=TIME'1.000001'"
"INSERT INTO t1 SET time_column=TIME'1.0000005'"
"INSERT INTO t1 SET time_column=TIME'1.0000005' + 0.000001"
"SELECT TIME'00:00:00.1' = TIME'00:00:00.100'"
"CREATE TABLE t1 AS SELECT
TIME'10:10:10' + INTERVAL 1 SECOND,
ADDTIME(TIME'10:10:10', '1.1')"
"SELECT TIME'10:10:10' + INTERVAL .6 SECOND"
"CREATE TABLE t1 AS SELECT
TIMESTAMP'2001-01-01 00:00:00' + INTERVAL 1 MICROSECOND AS a"
"INSERT INTO t1 VALUES (TIME'11:11:11.123456', TIME'11:11:11.123456')"
"INSERT INTO t1 VALUES (TIMESTAMP'1000-00-01 00:00:00')"
"INSERT INTO t1 VALUES (TIMESTAMP '0001-01-01 00:00:00.05')"
"UPDATE t1 SET time_column=TIME '1.0000005'"
"UPDATE t1 SET time_column=TIME '1.0000005' + 0.000001"
"SELECT * FROM t1
WHERE timestamp'2006-11-14 10:22:27.009969' IN (LEAST(a, MAKETIME(24,8,0)))"
"SELECT TIMESTAMP'2001-01-01 00:00:00' = TIME(NULL)"
"SELECT * FROM t1 WHERE a<=>TIME'19:20:30'"
"SELECT CAST(IF(1, TIME'00:00:00',TIME'00:00:00') AS CHAR)"
"SELECT CAST(CASE WHEN 1 THEN TIME'00:00:00' ELSE TIME'00:00:00' END AS CHAR)"
"SELECT CAST(CASE WHEN 0 THEN TIME'01:01:01' END AS TIME)"
"SELECT * FROM t1 WHERE a NOT IN (TIME'20:20:20',TIME'10:10:10')"
"SELECT * FROM t WHERE a = TIME'01:02:03'"
"SELECT * FROM t WHERE a = b and b = TIME'01:02:03'"
"SELECT TIMESTAMP'2000-01-27 23:13:41' - TIMESTAMP'2003-05-16 23:53:29'"
"INSERT INTO t1 VALUES (TIME'15:44:00')"
"INSERT INTO t1 VALUES (TIME'25:00:00')"
"INSERT INTO t1 VALUES(1901, DATE'1901-01-01', 1, 'one')"
"CREATE TABLE t5 (c1 YEAR AS (CAST(1985 AS YEAR)))"
"SELECT x FROM (SELECT NULL FROM t1 GROUP BY t1.c0) AS x(x)
INTERSECT
SELECT t0.c0 FROM t0"
"EOF




connection default"
"ALTER UNDO TABLESPACE undo_003 SET ACTIVE ENGINE InnoDB"
"ALTER UNDO TABLESPACE undo_003 SET INACTIVE ENGINE InnoDB"
"select count(*) from (
(select                      a,b from t1 limit 2)  union all (select a,b from t2 order by a)) q"
"(select * from t1 limit 3) intersect (select * from t1 limit 3) order by a"
"(select * from t1 limit 4) except (select * from t1 limit 1) order by a"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1) UNION all (SELECT * FROM t2)) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) UNION all (SELECT * FROM t2)) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1) UNION all (SELECT * FROM t2 LIMIT 1)) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) UNION SELECT * FROM t2) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 1) UNION all SELECT * FROM t2) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 LIMIT 100) UNION SELECT * FROM t2) q"
"SELECT COUNT(*) FROM (
(SELECT                     * FROM t1 limit 2,2) UNION SELECT * FROM t2) q"
"select * from ((select * from t1 limit 1) union (select * from t1 limit 1)) a"
"select * from ((select * from t1 limit 1) union (select * from t1 limit 1) union (select * from t1 limit 1)) a"
"select * from ((((select * from t1))) union (select * from t1) union (select * from t1)) a"
"select * from ((select * from t1) union (((select * from t1))) union (select * from t1)) a"
"SELECT c1, c2 FROM (
(
(SELECT c1, c2 FROM t1)
UNION
(SELECT c1, c2 FROM t2)
)
ORDER BY c2 DESC, c1 ASC LIMIT 1
) AS res"
"((SELECT SQL_CALC_FOUND_ROWS * FROM r ORDER BY a LIMIT 5) ORDER BY -a LIMIT 4) ORDER BY a LIMIT 3"
"CREATE TABLE t1(a INTEGER, b INTEGER AS (a))"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 4 PASSWORD_LOCK_TIME 6"
"ALTER USER foo@localhost FAILED_LOGIN_ATTEMPTS 2"
"ALTER USER foo@localhost PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER failed_login_attempts@localhost FAILED_LOGIN_ATTEMPTS 2"
"CREATE USER password_lock_time@localhost PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"ALTER USER foo@localhost FAILED_LOGIN_ATTEMPTS 0"
"ALTER USER foo@localhost FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 0"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3 ACCOUNT LOCK"
"CREATE USER proxied_to_user@localhost IDENTIFIED WITH 'caching_sha2_password' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER proxy_user@localhost IDENTIFIED WITH 'caching_sha2_password' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 2"
"ALTER USER u1 FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"ALTER USER u1 FAILED_LOGIN_ATTEMPTS 0 PASSWORD_LOCK_TIME 0"
"CREATE USER foo@localhost FAILED_LOGIN_ATTEMPTS 32767"
"CREATE USER foo@localhost PASSWORD_LOCK_TIME 32767"
"CREATE USER ''@localhost IDENTIFIED BY 'pwd' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME 3"
"CREATE USER foo@localhost IDENTIFIED BY 'foo' PASSWORD_LOCK_TIME 3 FAILED_LOGIN_ATTEMPTS 2"
"ALTER USER foo@localhost ATTRIBUTE ""{ \"test\": \"account locking\" }"""
"ALTER USER foo@localhost COMMENT ""This is a test account for verifying that password locking and user attributes won't interfer with one and another."""
"CREATE USER foo@localhost IDENTIFIED BY 'foo' FAILED_LOGIN_ATTEMPTS 2 PASSWORD_LOCK_TIME UNBOUNDED"
"ALTER USER u1 COMMENT 'free form text'"
"ALTER USER u1 COMMENT 'changed the free form text'"
"ALTER USER u1 ATTRIBUTE '{""uid"" : ""34234""}'"
"ALTER USER u1 ATTRIBUTE '{""speed"" : ""9000""}'"
"ALTER USER u1 ATTRIBUTE '{""speed"" : null }'"
"ALTER USER foo@localhost COMMENT 'password lock time'"
"ALTER USER foo@localhost ATTRIBUTE '{""flag"":""red""}'"
"ALTER USER foo@localhost ATTRIBUTE '{""flag"":null}'"
"ALTER USER foo@localhost COMMENT 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'"
"ALTER USER foo@localhost COMMENT 'xxx'"
"CREATE USER foo2@localhost IDENTIFIED BY 'foo' COMMENT 'xxx'"
"CREATE USER foo3 PASSWORD EXPIRE DEFAULT COMMENT 'abc'"
"CREATE USER foo4 ACCOUNT LOCK ATTRIBUTE '{""stuff"":""ffuts""}'"
"ALTER USER foo4 ACCOUNT UNLOCK ATTRIBUTE '{""stuff"":""unlocked""}'"
"ALTER USER foo@localhost ATTRIBUTE '{""key"":""value""}'"
"ALTER USER foo@localhost COMMENT 'Added key/value pair'"
"ALTER USER redqueen@localhost IDENTIFIED BY 'madness' RETAIN CURRENT PASSWORD"
"ALTER USER redqueen@localhost DISCARD OLD PASSWORD COMMENT 'Dropped old password'"
"CREATE USER u1 COMMENT 'Hello ""Smith""'"
"CREATE USER u1@localhost IDENTIFIED BY 'foo' COMMENT 'Not permitted to change this'"
"CREATE USER u1@localhost IDENTIFIED BY 'foo',u2@localhost IDENTIFIED BY 'foo' COMMENT ""Works with partial restrictions"""
"ALTER USER CURRENT_USER() COMMENT 'test'"
"ALTER USER CURRENT_USER() ATTRIBUTE '{ ""comment"" : null }'"
"ALTER USER u1@localhost ATTRIBUTE '{""Restrictions"": [{""Database"":""mysql"",""Privileges"": [ ""CREATE"" ]}]}'"
"CREATE TRIGGER trig_t1_ins BEFORE INSERT ON t1 FOR EACH ROW
BEGIN
SET @aux = GET_LOCK(2,1)"
END
"|
SELECT GET_LOCK(CAST(2 AS CHAR),0)"
"select sql_small_result
distinct @var:=id2, @var1:=cast((avg(id) over(partition by id2)) as signed)
from tb1 order by 1 limit 1"
"set @rank := 0"
"select @rownum := @rownum + 1 as `row`,
@rank := IF(@prev_score!=a, @rownum, @rank) as `rank`,
@prev_score := a as score
from t1 order by score desc"
"password
validate
EOF

password
validate
monkey
EOF

CREATE USER 'user1'@'localhost' IDENTIFIED BY 'passWORD123#'"
"my $dict_file= ""$ENV{MYSQLTEST_VARDIR}/tmp/dict.txt"""
"my $outer = 100000"
"open(DICT_FILE, "">"", $dict_file) or die ""Can't open $dict_file for write: $!"""
"EOF









SELECT @@GLOBAL.VALIDATE_PASSWORD.LENGTH"
"password
validate
EOF

eval SET @@global.validate_password.dictionary_file=""$MYSQLTEST_VARDIR/tmp/dictionary.txt"""
"REVOKE ALL PRIVILEGES ON test.* FROM ""base_user""@localhost"
"REVOKE ALL PRIVILEGES ON test.* FROM """"@localhost"
"CREATE USER 'usr1'@'localhost' IDENTIFIED BY RANDOM PASSWORD"
"CREATE USER 'usr2'@'localhost' IDENTIFIED BY RANDOM PASSWORD"
"CREATE USER 'usr3'@'localhost' IDENTIFIED BY RANDOM PASSWORD"
"ALTER USER 'usr1'@'localhost' IDENTIFIED BY RANDOM PASSWORD"
"SET PASSWORD FOR 'usr1'@'localhost' TO RANDOM"
"create table table_28127_a(0b02 int)"
"create table table_28127_b(0b2 int)"
"set @select=2,@t5=1.23456"
"set @test_int=10,@test_double=1e-10,@test_string=""abcdeghi"",@test_string2=""abcdefghij"",@select=NULL"
"select @test_int,@test_double,@test_string,@test_string2,@select"
"drop table if exists t1,t2,t3,t4,t9,`t1a``b`,v1,v2,v3,v4,v5,v6"
"drop view if exists t1,t2,`t1a``b`,v1,v2,v3,v4,v5,v6"
"create table `t1a``b` (col1 char(2))"
"drop table `t1a``b`"
"create function `f``1` () returns int return 5"
"create view v1 as select test.`f``1` ()"
"drop function `f``1`"
"create table tÃ¼ (cÃ¼ char)"
"create view vÃ¼ as select cÃ¼ from tÃ¼"
"insert into vÃ¼ values ('Ã¼')"
"select * from vÃ¼"
"drop view vÃ¼"
"drop table tÃ¼"
"create view  v1 as select avg(distinct s1) from t1"
"ALTER DEFINER=s@1 VIEW v1 AS SELECT * FROM t1"
"revoke all privileges on test.* from mysqltest_1@localhost"
"revoke all privileges on mysqltest.v1 from mysqltest_1@localhost"
"REVOKE ALL ON mysqltest_db1.* FROM mysqltest_u1@localhost"
"REVOKE ALL ON mysqltest_db2.* FROM mysqltest_u2@localhost"
"SELECT k, AVG(DISTINCT j), SUM(k) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t GROUP BY (k)"
"SELECT ADDTIME(FIRST_VALUE(time'18:00:00') OVER (ORDER BY NULL), '01:00:00')"
"SELECT ADDTIME(NTH_VALUE(time'18:00:00', 1) OVER (ORDER BY NULL), '01:00:00')"
"SELECT sex, RANK() OVER (ORDER BY sex DESC) `rank`, AVG(DISTINCT id) AS uids FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex"
"SELECT sex, PERCENT_RANK() OVER (ORDER BY sex DESC) `rank`, AVG(DISTINCT id) AS uids FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex"
"SELECT sex, CUME_DIST() OVER (ORDER BY sex DESC) `cume_dist`, AVG(DISTINCT id) AS uids FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex"
"SELECT  sex, AVG(DISTINCT id) AS uids, RANK() OVER w `rank` FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex
WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex"
"SELECT  sex, AVG(DISTINCT id) AS uids, PERCENT_RANK() OVER w `p_rank` FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex
WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex"
"SELECT  sex, AVG(DISTINCT id) AS uids, CUME_DIST() OVER w `c_dist` FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex
WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex"
"SELECT t3_id, AVG(t3_id) OVER w,
CUME_DIST() OVER w,
k FROM t3
WINDOW w AS (PARTITION BY k ORDER BY t3_id
RANGE BETWEEN 4 PRECEDING AND 2 PRECEDING)"
"SELECT SUM(id) OVER w * 2, AVG(id) OVER w, COUNT(id) OVER w FROM t1
WINDOW w AS (PARTITION BY sex)"
"SELECT id, AVG(id) OVER (ROWS UNBOUNDED PRECEDING) FROM t1"
"SELECT id, AVG(id) OVER w, COUNT(id) OVER w FROM t1
WINDOW w AS (ORDER BY id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT d, SUM(d) OVER (ORDER BY d), AVG(d) OVER (ORDER BY d) FROM td"
"SELECT d, SUM(d) OVER (ORDER BY d), AVG(d) OVER () FROM td"
"SELECT d, SUM(d) OVER (ORDER BY d), AVG(d) OVER (ORDER BY d ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM td"
"SELECT d, SUM(d) OVER w, AVG(d) OVER w FROM td
WINDOW w AS (ORDER BY d RANGE BETWEEN 2 PRECEDING AND CURRENT ROW)"
"SELECT d, SUM(d) OVER w, AVG(d) OVER w FROM td
WINDOW w AS (ORDER BY d RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING)"
"SELECT d, SUM(d) OVER w, AVG(d) OVER w FROM td
WINDOW w AS (ORDER BY d RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)"
"SELECT user_id, SUM(user_id) OVER w, AVG(user_id) OVER w FROM t2 WINDOW w AS (ORDER BY user_id)"
"SELECT p, user_id, SUM(user_id) OVER w, AVG(user_id) OVER w FROM t22 WINDOW w AS (PARTITION BY p ORDER BY user_id) ORDER BY p"
"SELECT user_id, SUM(user_id) OVER w, AVG(user_id) OVER w1 FROM t2
WINDOW w AS (ORDER BY user_id), w1 AS (ORDER BY user_id)"
"SELECT id, AVG(id) OVER (PARTITION BY id) summ FROM t1"
"SELECT     AVG(id) OVER (PARTITION BY id) summ FROM t1"
"SELECT id, AVG(id) OVER (PARTITION BY id) summ,
AVG(id) OVER (PARTITION BY id) summ2 FROM t1"
"SELECT     AVG(id) OVER (PARTITION BY id) summ,
AVG(id) OVER (PARTITION BY id) summ2 FROM t1"
"SELECT COUNT(id) OVER w, id, AVG(id) OVER w, SUM(id) OVER w, FIRST_VALUE(id) OVER w FROM t1
WINDOW w AS (ORDER BY id RANGE 1 PRECEDING)"
"SELECT COUNT(id) OVER w, id, AVG(id) OVER w, SUM(id) OVER w, FIRST_VALUE(id) OVER w FROM t1r
WINDOW w AS (ORDER BY id RANGE 1 PRECEDING)"
"SELECT *, AVG(s1) OVER () FROM t1"
"SELECT *, AVG(s1) OVER (ROWS UNBOUNDED PRECEDING) FROM t1"
"SELECT AVG(b) OVER (ORDER BY b) FROM t"
"SELECT a, b, COUNT(a) OVER w count,
SUM(a) OVER w sum,
AVG(a) over w average,
LAST_VALUE(a) OVER w lastval FROM t1
WINDOW w as (PARTITION BY a ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT a, b, COUNT(a) OVER w count,
SUM(a) OVER w sum,
AVG(a) OVER w average,
LAST_VALUE(a) OVER w lastval FROM t1
WINDOW w as (PARTITION BY a ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT a, b, COUNT(a) OVER w count,
SUM(a) OVER w sum,
AVG(a) OVER w average,
LAST_VALUE(a) OVER w lastval FROM t1
WINDOW w as (PARTITION BY a ORDER BY b ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING)"
"SELECT id, AVG(id) over w `avg`, SUM(id) OVER w `sum`, COUNT(*) OVER w cnt FROM t1 WINDOW w as (ORDER BY id RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"SELECT d, AVG(d) over w `avg`, SUM(d) OVER w `sum`, COUNT(*) OVER w cnt FROM t1 WINDOW w as (ORDER BY d RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"SELECT AVG(1) OVER ()"
"SELECT AVG(1.2) OVER ()"
"SELECT AVG(CAST(4 as JSON)) OVER ()"
"SELECT AVG('e') OVER ()"
"SELECT AVG(1)   OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)"
"SELECT AVG(1.2) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)"
"SELECT AVG(CAST(4 as JSON)) OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)"
"SELECT AVG('e') OVER (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)"
"SELECT * FROM t WHERE a = SOME(SELECT ROW_NUMBER() OVER () + 1 FROM t)"
"SELECT * FROM t WHERE a = ANY(SELECT ROW_NUMBER() OVER () + 1 FROM t)"
"SELECT * FROM t WHERE a >= SOME(SELECT ROW_NUMBER() OVER () + 1 FROM t)"
"SELECT NTILE (3) OVER (ORDER BY alias1.a), AVG(alias1.a)  OVER ()
FROM t AS alias1 RIGHT JOIN t AS alias2 ON (alias1.a = alias2.b)"
"CREATE PROCEDURE p1() SELECT  AVG(c2)  OVER ( ) AS res FROM  te2"
"CREATE FUNCTION f1()
RETURNS char(255)
BEGIN
DECLARE ret char(255);
SELECT  AVG(c2)  OVER ( ) AS res FROM  te2 INTO ret;
RETURN ret;
END"
"SET @sav_big= (SELECT COALESCE(@session.big_tables, 0))"
"CREATE TABLE `C` (
`pk` int(11) NOT NULL AUTO_INCREMENT,
`col_int` int(11) NOT NULL,
`col_int_gckey` int(11) GENERATED ALWAYS AS ((`col_int` + `col_int`)) VIRTUAL NOT NULL,
`col_int_key` int(11) GENERATED ALWAYS AS ((`col_int_gckey` + `col_int`)) VIRTUAL NOT NULL,
`col_date` date NOT NULL,
`col_date_gckey` date GENERATED ALWAYS AS ((`col_date` + interval 30 day)) VIRTUAL NOT NULL,
`col_date_key` date GENERATED ALWAYS AS ((`col_date_gckey` + interval 30 day)) VIRTUAL NOT NULL,
`col_datetime` datetime NOT NULL,
`col_time` time NOT NULL,
`col_datetime_gckey` datetime GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time`)) VIRTUAL NOT NULL,
`col_time_gckey` time GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time`)) VIRTUAL NOT NULL,
`col_datetime_key` datetime GENERATED ALWAYS AS (addtime(`col_datetime_gckey`,`col_time`)) VIRTUAL NOT NULL,
`col_time_key` time GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time_gckey`)) VIRTUAL NOT NULL,
`col_varchar` varchar(15) NOT NULL,
`col_varchar_gckey` varchar(15) GENERATED ALWAYS AS (concat(`col_varchar`,`col_varchar`)) VIRTUAL NOT NULL,
`col_varchar_key` varchar(15) GENERATED ALWAYS AS (concat(`col_varchar_gckey`,_latin1'x')) VIRTUAL NOT NULL,
PRIMARY KEY (`pk`),
UNIQUE KEY `col_date_key` (`col_date_key`),
UNIQUE KEY `col_date_key_2` (`col_date_key`,`col_time_key`,`col_datetime_key`),
UNIQUE KEY `col_varchar_key` (`col_varchar_key`(3)),
UNIQUE KEY `col_varchar_key_2` (`col_varchar_key`(5) DESC),
UNIQUE KEY `col_int_key_3` (`col_int_key`,`col_varchar_key`(5)),
UNIQUE KEY `col_int_key_4` (`col_int_key` DESC,`col_varchar_key`(5)),
UNIQUE KEY `col_varchar_key_3` (`col_varchar_key`(2),`col_varchar`(3)),
UNIQUE KEY `col_varchar_key_4` (`col_varchar_key`(2) DESC,`col_varchar`(3) DESC),
UNIQUE KEY `col_int_key_10` (`col_int_key`,`col_varchar_key`(5),`col_date_key`,`col_time_key`,`col_datetime_key`),
KEY `col_int_gckey` (`col_int_gckey`),
KEY `col_int_gckey_2` (`col_int_gckey` DESC),
KEY `col_date_gckey` (`col_date_gckey`),
KEY `col_datetime_gckey` (`col_datetime_gckey`),
KEY `col_time_gckey` (`col_time_gckey`),
KEY `col_varchar_gckey` (`col_varchar_gckey`(5)),
KEY `col_int_key` (`col_int_key`),
KEY `col_int_key_2` (`col_int_key` DESC),
KEY `col_time_key` (`col_time_key`),
KEY `col_datetime_key` (`col_datetime_key`),
KEY `col_int_key_5` (`col_int_key`,`col_int`),
KEY `col_int_key_6` (`col_int_key` DESC,`col_int` DESC),
KEY `col_int_key_7` (`col_int_key`,`col_date_key`),
KEY `col_int_key_8` (`col_int_key`,`col_time_key`),
KEY `col_int_key_9` (`col_int_key`,`col_datetime_key`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=latin1"
"CREATE TABLE `DD` (
`pk` int(11) NOT NULL AUTO_INCREMENT,
`col_int` int(11) NOT NULL,
`col_int_gckey` int(11) GENERATED ALWAYS AS ((`col_int` + `col_int`)) VIRTUAL NOT NULL,
`col_int_key` int(11) GENERATED ALWAYS AS ((`col_int_gckey` + `col_int`)) VIRTUAL NOT NULL,
`col_date` date NOT NULL,
`col_date_gckey` date GENERATED ALWAYS AS ((`col_date` + interval 30 day)) VIRTUAL NOT NULL,
`col_date_key` date GENERATED ALWAYS AS ((`col_date_gckey` + interval 30 day)) VIRTUAL NOT NULL,
`col_datetime` datetime NOT NULL,
`col_time` time NOT NULL,
`col_datetime_gckey` datetime GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time`)) VIRTUAL NOT NULL,
`col_time_gckey` time GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time`)) VIRTUAL NOT NULL,
`col_datetime_key` datetime GENERATED ALWAYS AS (addtime(`col_datetime_gckey`,`col_time`)) VIRTUAL NOT NULL,
`col_time_key` time GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time_gckey`)) VIRTUAL NOT NULL,
`col_varchar` varchar(15) NOT NULL,
`col_varchar_gckey` varchar(15) GENERATED ALWAYS AS (concat(`col_varchar`,`col_varchar`)) VIRTUAL NOT NULL,
`col_varchar_key` varchar(15) GENERATED ALWAYS AS (concat(`col_varchar_gckey`,_latin1'x')) VIRTUAL NOT NULL,
PRIMARY KEY (`pk`),
UNIQUE KEY `col_date_key` (`col_date_key`),
UNIQUE KEY `col_date_key_2` (`col_date_key`,`col_time_key`,`col_datetime_key`),
UNIQUE KEY `col_varchar_key` (`col_varchar_key`(3)),
UNIQUE KEY `col_varchar_key_2` (`col_varchar_key`(5) DESC),
UNIQUE KEY `col_int_key_3` (`col_int_key`,`col_varchar_key`(5)),
UNIQUE KEY `col_int_key_4` (`col_int_key` DESC,`col_varchar_key`(5)),
UNIQUE KEY `col_varchar_key_3` (`col_varchar_key`(2),`col_varchar`(3)),
UNIQUE KEY `col_varchar_key_4` (`col_varchar_key`(2) DESC,`col_varchar`(3) DESC),
UNIQUE KEY `col_int_key_10` (`col_int_key`,`col_varchar_key`(5),`col_date_key`,`col_time_key`,`col_datetime_key`),
KEY `col_int_gckey` (`col_int_gckey`),
KEY `col_int_gckey_2` (`col_int_gckey` DESC),
KEY `col_date_gckey` (`col_date_gckey`),
KEY `col_datetime_gckey` (`col_datetime_gckey`),
KEY `col_time_gckey` (`col_time_gckey`),
KEY `col_varchar_gckey` (`col_varchar_gckey`(5)),
KEY `col_int_key` (`col_int_key`),
KEY `col_int_key_2` (`col_int_key` DESC),
KEY `col_time_key` (`col_time_key`),
KEY `col_datetime_key` (`col_datetime_key`),
KEY `col_int_key_5` (`col_int_key`,`col_int`),
KEY `col_int_key_6` (`col_int_key` DESC,`col_int` DESC),
KEY `col_int_key_7` (`col_int_key`,`col_date_key`),
KEY `col_int_key_8` (`col_int_key`,`col_time_key`),
KEY `col_int_key_9` (`col_int_key`,`col_datetime_key`)
) ENGINE=InnoDB AUTO_INCREMENT=73 DEFAULT CHARSET=latin1"
"CREATE TABLE `E` (
`pk` int(11) NOT NULL AUTO_INCREMENT,
`col_int` int(11) NOT NULL,
`col_int_gckey` int(11) GENERATED ALWAYS AS ((`col_int` + `col_int`)) VIRTUAL NOT NULL,
`col_int_key` int(11) GENERATED ALWAYS AS ((`col_int_gckey` + `col_int`)) VIRTUAL NOT NULL,
`col_date` date NOT NULL,
`col_date_gckey` date GENERATED ALWAYS AS ((`col_date` + interval 30 day)) VIRTUAL NOT NULL,
`col_date_key` date GENERATED ALWAYS AS ((`col_date_gckey` + interval 30 day)) VIRTUAL NOT NULL,
`col_datetime` datetime NOT NULL,
`col_time` time NOT NULL,
`col_datetime_gckey` datetime GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time`)) VIRTUAL NOT NULL,
`col_time_gckey` time GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time`)) VIRTUAL NOT NULL,
`col_datetime_key` datetime GENERATED ALWAYS AS (addtime(`col_datetime_gckey`,`col_time`)) VIRTUAL NOT NULL,
`col_time_key` time GENERATED ALWAYS AS (addtime(`col_datetime`,`col_time_gckey`)) VIRTUAL NOT NULL,
`col_varchar` varchar(15) NOT NULL,
`col_varchar_gckey` varchar(15) GENERATED ALWAYS AS (concat(`col_varchar`,`col_varchar`)) VIRTUAL NOT NULL,
`col_varchar_key` varchar(15) GENERATED ALWAYS AS (concat(`col_varchar_gckey`,_latin1'x')) VIRTUAL NOT NULL,
PRIMARY KEY (`pk`),
UNIQUE KEY `col_date_key` (`col_date_key`),
UNIQUE KEY `col_date_key_2` (`col_date_key`,`col_time_key`,`col_datetime_key`),
UNIQUE KEY `col_varchar_key` (`col_varchar_key`(3)),
UNIQUE KEY `col_varchar_key_2` (`col_varchar_key`(5) DESC),
UNIQUE KEY `col_int_key_3` (`col_int_key`,`col_varchar_key`(5)),
UNIQUE KEY `col_int_key_4` (`col_int_key` DESC,`col_varchar_key`(5)),
UNIQUE KEY `col_varchar_key_3` (`col_varchar_key`(2),`col_varchar`(3)),
UNIQUE KEY `col_varchar_key_4` (`col_varchar_key`(2) DESC,`col_varchar`(3) DESC),
UNIQUE KEY `col_int_key_10` (`col_int_key`,`col_varchar_key`(5),`col_date_key`,`col_time_key`,`col_datetime_key`),
KEY `col_int_gckey` (`col_int_gckey`),
KEY `col_int_gckey_2` (`col_int_gckey` DESC),
KEY `col_date_gckey` (`col_date_gckey`),
KEY `col_datetime_gckey` (`col_datetime_gckey`),
KEY `col_time_gckey` (`col_time_gckey`),
KEY `col_varchar_gckey` (`col_varchar_gckey`(5)),
KEY `col_int_key` (`col_int_key`),
KEY `col_int_key_2` (`col_int_key` DESC),
KEY `col_time_key` (`col_time_key`),
KEY `col_datetime_key` (`col_datetime_key`),
KEY `col_int_key_5` (`col_int_key`,`col_int`),
KEY `col_int_key_6` (`col_int_key` DESC,`col_int` DESC),
KEY `col_int_key_7` (`col_int_key`,`col_date_key`),
KEY `col_int_key_8` (`col_int_key`,`col_time_key`),
KEY `col_int_key_9` (`col_int_key`,`col_datetime_key`)
) ENGINE=InnoDB AUTO_INCREMENT=80 DEFAULT CHARSET=latin1"
"CREATE TABLE t (
f1 LONGTEXT GENERATED ALWAYS AS (_utf8mb4'1') VIRTUAL NOT NULL
)"
"SELECT VARIANCE(b) over w `var`,
AVG(b) OVER w `avg`,
SUM(b) OVER w `sum`,
b,
COUNT(b) OVER w count FROM t1
WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT VARIANCE(b) over w `var`,
AVG(b) OVER w `avg`,
SUM(b) OVER w `sum`,
b,
count(b) OVER w count FROM t1
WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT VARIANCE(b) over w `var`,
AVG(b) OVER w `avg`,
SUM(b) OVER w `sum`,
b,
count(b) OVER w count,
LAST_VALUE(b) OVER w lastval FROM t1
WINDOW w as (ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT VARIANCE(b) over w `var`,
FIRST_VALUE(b) over w fv,
AVG(b) OVER w `avg`,
SUM(b) OVER w `sum`,
b,
count(b) OVER w count FROM t1
WINDOW w as (ORDER BY b ROWS BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"DO BIT_LENGTH(AVG(@f)OVER())"
"DO LTRIM(AVG(LOG2(@c))OVER())"
"DO TO_BASE64(AVG(@d)OVER())"
"SELECT bit_count(avg(cos(-66365726))over())"
"CREATE TABLE t(
a TEXT CHARACTER SET CP1251
GENERATED ALWAYS AS (LPAD(1,10621933,10)) VIRTUAL,
b BLOB
GENERATED ALWAYS AS (LPAD(1,10622,10)) VIRTUAL
) ENGINE=INNODB"
"SELECT 0.2 * AVG(f1) OVER w AS avg, f1
FROM t1 JOIN t2 ON t1_partkey = t2_partkey
WINDOW w AS (PARTITION BY t1_partkey)"
"SELECT n
, SUM(n)   OVER w AS ""sum(n)""
, COUNT(*) OVER w AS ""count(n)""
, AVG(n)   OVER w AS ""avg(n)""
, SUM(n)   OVER w / COUNT(*) OVER w AS ""sum(n)/count(n)"",
r
, SUM(r)   OVER w AS ""sum(r)""
, COUNT(*) OVER w AS ""count(r)""
, AVG(r)   OVER w AS ""avg(r)""
, SUM(r)   OVER w / COUNT(*) OVER w AS ""sum(r)/count(r)""
FROM t WINDOW w AS (ORDER BY n ROWS BETWEEN 1 FOLLOWING AND UNBOUNDED FOLLOWING)
ORDER BY n"
"SELECT AVG( @A := c1 ) OVER (ROWS 1 PRECEDING) FROM t1"
"SELECT DISTINCT
pow( COUNT(*), @a:=(SELECT 1 FROM t1 LEFT JOIN
t1 t2
ON @a)
) AS `pow`,
AVG( @a:= a ) OVER (ROWS 1 PRECEDING) AS `avg`
FROM t1 GROUP BY a"
"EXPLAIN FORMAT=JSON SELECT k, AVG(DISTINCT j), SUM(k) OVER (ROWS UNBOUNDED PRECEDING) foo FROM t GROUP BY (k)"
"EXPLAIN FORMAT=JSON SELECT sex, RANK() OVER (ORDER BY sex DESC) `rank`, AVG(DISTINCT id) AS uids FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex ORDER BY sex"
"EXPLAIN FORMAT=JSON SELECT  sex, AVG(DISTINCT id) AS uids, RANK() OVER w `rank` FROM t1 u, t2
WHERE t2.user_id = u.id GROUP BY sex
WINDOW w AS (ORDER BY AVG(DISTINCT id) DESC) ORDER BY sex"
"EXPLAIN FORMAT=JSON SELECT SUM(id) OVER w * 2, AVG(id) OVER w, COUNT(id) OVER w FROM t1
WINDOW w AS (PARTITION BY sex)"
"EXPLAIN FORMAT=JSON SELECT id, AVG(id) OVER (ROWS UNBOUNDED PRECEDING) FROM t1"
"EXPLAIN FORMAT=JSON SELECT id, AVG(id) OVER w, COUNT(id) OVER w FROM t1
WINDOW w AS (ORDER BY id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT d, SUM(d) OVER (ORDER BY d), AVG(d) OVER (ORDER BY d) FROM td"
"EXPLAIN FORMAT=JSON SELECT d, SUM(d) OVER (ORDER BY d), AVG(d) OVER () FROM td"
"EXPLAIN FORMAT=JSON SELECT d, SUM(d) OVER (ORDER BY d), AVG(d) OVER (ORDER BY d ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING) FROM td"
"EXPLAIN FORMAT=JSON SELECT d, SUM(d) OVER w, AVG(d) OVER w FROM td
WINDOW w AS (ORDER BY d RANGE BETWEEN 2 PRECEDING AND CURRENT ROW)"
"EXPLAIN FORMAT=JSON SELECT d, SUM(d) OVER w, AVG(d) OVER w FROM td
WINDOW w AS (ORDER BY d RANGE BETWEEN 2 PRECEDING AND 2 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT d, SUM(d) OVER w, AVG(d) OVER w FROM td
WINDOW w AS (ORDER BY d RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT user_id, SUM(user_id) OVER w, AVG(user_id) OVER w FROM t2 WINDOW w AS (ORDER BY user_id)"
"EXPLAIN FORMAT=JSON SELECT p, user_id, SUM(user_id) OVER w, AVG(user_id) OVER w FROM t22 WINDOW w AS (PARTITION BY p ORDER BY user_id) ORDER BY p"
"EXPLAIN FORMAT=JSON SELECT user_id, SUM(user_id) OVER w, AVG(user_id) OVER w1 FROM t2
WINDOW w AS (ORDER BY user_id), w1 AS (ORDER BY user_id)"
"EXPLAIN FORMAT=JSON SELECT id, AVG(id) OVER (PARTITION BY id) summ FROM t1"
"EXPLAIN FORMAT=JSON SELECT     AVG(id) OVER (PARTITION BY id) summ FROM t1"
"EXPLAIN FORMAT=JSON SELECT id, AVG(id) OVER (PARTITION BY id) summ,
AVG(id) OVER (PARTITION BY id) summ2 FROM t1"
"EXPLAIN FORMAT=JSON SELECT     AVG(id) OVER (PARTITION BY id) summ,
AVG(id) OVER (PARTITION BY id) summ2 FROM t1"
"EXPLAIN FORMAT=JSON SELECT COUNT(id) OVER w, id, AVG(id) OVER w, SUM(id) OVER w, FIRST_VALUE(id) OVER w FROM t1
WINDOW w AS (ORDER BY id RANGE 1 PRECEDING)"
"EXPLAIN FORMAT=JSON SELECT *, AVG(s1) OVER () FROM t1"
"EXPLAIN FORMAT=JSON SELECT *, AVG(s1) OVER (ROWS UNBOUNDED PRECEDING) FROM t1"
"EXPLAIN FORMAT=JSON SELECT AVG(b) OVER (ORDER BY b) FROM t"
"EXPLAIN FORMAT=JSON SELECT a, b, COUNT(a) OVER w count,
SUM(a) OVER w sum,
AVG(a) over w average,
LAST_VALUE(a) OVER w lastval FROM t1
WINDOW w as (PARTITION BY a ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT a, b, COUNT(a) OVER w count,
SUM(a) OVER w sum,
AVG(a) OVER w average,
LAST_VALUE(a) OVER w lastval FROM t1
WINDOW w as (PARTITION BY a ORDER BY b ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT a, b, COUNT(a) OVER w count,
SUM(a) OVER w sum,
AVG(a) OVER w average,
LAST_VALUE(a) OVER w lastval FROM t1
WINDOW w as (PARTITION BY a ORDER BY b ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT id, AVG(id) over w `avg`, SUM(id) OVER w `sum`, COUNT(*) OVER w cnt FROM t1 WINDOW w as (ORDER BY id RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT d, AVG(d) over w `avg`, SUM(d) OVER w `sum`, COUNT(*) OVER w cnt FROM t1 WINDOW w as (ORDER BY d RANGE BETWEEN 1 FOLLOWING AND 2 FOLLOWING)"
"EXPLAIN FORMAT=JSON SELECT SUM(j) OVER w, COUNT(j) OVER (),
AVG(j) OVER (w ORDER BY j), FIRST_VALUE(j) OVER w
FROM t WINDOW w AS (PARTITION BY i)
ORDER BY LAST_VALUE(j) OVER w, NTH_VALUE(j,1) OVER (),
ROW_NUMBER() OVER (PARTITION BY j)"
"EXPLAIN FORMAT=tree SELECT a, SUM(c) OVER (ORDER BY b), AVG(c) OVER (ORDER BY a), SUM(c) OVER (PARTITION BY a) AS x FROM t1 ORDER BY b, x"
"SELECT k, AVG(DISTINCT j), MIN(k) OVER (ROWS UNBOUNDED PRECEDING) min,
MAX(k) OVER (ROWS UNBOUNDED PRECEDING) max FROM t GROUP BY (k)"
"SELECT t.*, MIN(t.rank) OVER (ROWS UNBOUNDED PRECEDING) min,
MAX(t.rank) OVER (ROWS UNBOUNDED PRECEDING) max FROM
(SELECT sex, id, date, ROW_NUMBER() OVER w AS row_no, RANK() OVER w AS `rank` FROM t1,t2
WHERE t1.id=t2.user_id
WINDOW w AS (PARTITION BY date ORDER BY id)
) AS t"
"SELECT AVG(id) OVER w, MIN(id) OVER w min, MAX(id) OVER w max FROM t1
WINDOW w AS (PARTITION BY sex)"
"SELECT id, AVG(id) OVER (ROWS UNBOUNDED PRECEDING) avg,
MIN(id) OVER (ROWS UNBOUNDED PRECEDING) min FROM t1"
"SELECT id, AVG(id) OVER (ROWS UNBOUNDED PRECEDING),
MAX(id) OVER (ROWS UNBOUNDED PRECEDING) max FROM t1"
"SELECT id, AVG(id) OVER w avg, COUNT(id) OVER w count, MIN(id) OVER w min,
MAX(id) OVER w max FROM t1
WINDOW w AS (ORDER BY id ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING)"
"SELECT MIN(DATE'2000-01-01') OVER () AS c1,
MIN(TIME'12:00:00') OVER () AS c2,
MIN(TIMESTAMP'2000-01-01 12:00:00') OVER () AS c3,
JSON_ARRAY(MIN(CAST('123' AS JSON)) OVER ()) AS c4,
MIN(DATE'2000-01-01') OVER () = DATE'2000-01-01' AS c5,
MIN(TIME'12:00:00') OVER () = TIME '12:00:00' AS c6,
MIN(TIMESTAMP'2000-01-01 12:00:00') OVER () =
TIMESTAMP'2000-01-01 12:00:00' AS c7"
"create procedure solver(initial_leftm varchar(200), initial_rightm varchar(200))

begin
declare initial_leftm_j  json;
declare initial_rightm_j json;
set initial_leftm_j  = cast(initial_leftm as json),
initial_rightm_j = cast(initial_rightm as json);

with recursive

number_of_lines (value) as
(select json_length(initial_rightm_j)),

number_of_columns (value) as
(select json_length(json_extract(initial_leftm_j,""$[0]""))),

line_numbers (n) as
(
select 0
union all
select n+1 from line_numbers, number_of_lines where n<(value-1)
),

column_numbers (n) as
(
select 0
union all
select n+1 from line_numbers, number_of_columns where n<(value-1)
),


equations (null_if_done, leftm, rightm, pivot_lines, pivot_columns) as
(
select 0, initial_leftm_j, initial_rightm_j,
cast("""" as char(200)), cast("""" as char(200))

union all

select

cur_pivot.cur_pivot_line
,

(

select
""["" ||

group_concat(

(
select
""["" ||

group_concat(


json_extract(json_extract(eq.leftm, ""$["" || ln.n || ""]""),
""$["" || cn.n || ""]"")
-

(case when find_in_set(ln.n,eq.pivot_lines)=0 and ln.n<>cur_pivot.cur_pivot_line
then json_extract(json_extract(eq.leftm, ""$["" || ln.n || ""]""),
""$["" || cur_pivot.cur_pivot_column || ""]"") *
json_extract(json_extract(eq.leftm, ""$["" || cur_pivot.cur_pivot_line || ""]""),
""$["" || cn.n || ""]"") /
cur_pivot.cur_pivot_value
else 0 end)


order by cn.n separator ',')
|| ""]""

from column_numbers cn

)


order by ln.n separator ',')
|| ""]""

from line_numbers ln
),

(

select
""["" ||

group_concat(
json_extract(eq.rightm, ""$["" || ln.n || ""]"")
-
(case when find_in_set(ln.n,eq.pivot_lines)=0 and ln.n<>cur_pivot.cur_pivot_line
then json_extract(json_extract(eq.leftm, ""$["" || ln.n || ""]""),
""$["" || cur_pivot.cur_pivot_column || ""]"") *
json_extract(eq.rightm, ""$["" || cur_pivot.cur_pivot_line || ""]"") /
cur_pivot.cur_pivot_value
else 0 end)

order by ln.n separator ',')
|| ""]""

from line_numbers
ln
),

coalesce(cur_pivot.cur_pivot_line, """") || "","" || eq.pivot_lines,

coalesce(cur_pivot.cur_pivot_column, """") || "","" || eq.pivot_columns

from equations eq
left join
lateral
(
select
ln.n as cur_pivot_line,
cn.n as cur_pivot_column,
(
# Extract the ln.n-th line of the left member, and from it, extract the
# cn.n-th column, getting a number
json_extract(json_extract(eq.leftm, ""$["" || ln.n || ""]""),
""$["" || cn.n || ""]"")
) as cur_pivot_value
from line_numbers ln join column_numbers cn
where
find_in_set(ln.n,eq.pivot_lines)=0 and
json_extract(json_extract(eq.leftm, ""$["" || ln.n || ""]""),
""$["" || cn.n || ""]"") <> 0
order by cur_pivot_line,cur_pivot_column
limit 1
) as cur_pivot

on 1

where eq.null_if_done is not null

),


final_equations as
(
select * from equations where null_if_done is null
)


select
json_extract(eq.leftm, ""$["" || ln.n || ""]"")  as left_member,
json_extract(eq.rightm, ""$["" || ln.n || ""]"") as right_member,
free.value as list_of_free_unknowns
from final_equations eq, line_numbers ln,
(
select group_concat(cn.n+1) as value
from final_equations eq, column_numbers cn
where find_in_set(cn.n,eq.pivot_columns)=0
) as free

order by find_in_set(ln.n,eq.pivot_lines), ln.n;

end

"
"SELECT AVG(DISTINCT EXTRACTVALUE((''),('$@k')))"
